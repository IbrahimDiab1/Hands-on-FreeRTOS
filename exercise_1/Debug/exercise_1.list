
exercise_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059ac  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c28  08005c28  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005c28  08005c28  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c28  08005c28  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c2c  08005c2c  00015c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040c8  20000014  08005c44  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040dc  08005c44  000240dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001696b  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000302d  00000000  00000000  000369eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000ba5a  00000000  00000000  00039a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014b8  00000000  00000000  00045478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001330  00000000  00000000  00046930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019cda  00000000  00000000  00047c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001737e  00000000  00000000  0006193a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000985e9  00000000  00000000  00078cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000056f4  00000000  00000000  001112a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08005aa4 	.word	0x08005aa4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08005aa4 	.word	0x08005aa4

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20000164 	.word	0x20000164

080001dc <Task1_handler>:
static void MX_GPIO_Init(void);
static void MX_USART1_Init(void);
/* USER CODE BEGIN PFP */

void Task1_handler(void* parameter)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]

	while(1)
	{
		(void)HAL_USART_Transmit(&husart1, "This is task 2 handler \n", 25, 22000U);
 80001e4:	f245 53f0 	movw	r3, #22000	; 0x55f0
 80001e8:	2219      	movs	r2, #25
 80001ea:	4906      	ldr	r1, [pc, #24]	; (8000204 <Task1_handler+0x28>)
 80001ec:	4806      	ldr	r0, [pc, #24]	; (8000208 <Task1_handler+0x2c>)
 80001ee:	f001 fb90 	bl	8001912 <HAL_USART_Transmit>
		taskYIELD();
 80001f2:	4b06      	ldr	r3, [pc, #24]	; (800020c <Task1_handler+0x30>)
 80001f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	f3bf 8f4f 	dsb	sy
 80001fe:	f3bf 8f6f 	isb	sy
		(void)HAL_USART_Transmit(&husart1, "This is task 2 handler \n", 25, 22000U);
 8000202:	e7ef      	b.n	80001e4 <Task1_handler+0x8>
 8000204:	08005abc 	.word	0x08005abc
 8000208:	20000030 	.word	0x20000030
 800020c:	e000ed04 	.word	0xe000ed04

08000210 <Task2_handler>:
	}
}

void Task2_handler(void* parameter)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]

	while(1)
	{

		(void)HAL_USART_Transmit(&husart1, "This is task 1 handler \n", 25, 22000U);
 8000218:	f245 53f0 	movw	r3, #22000	; 0x55f0
 800021c:	2219      	movs	r2, #25
 800021e:	4906      	ldr	r1, [pc, #24]	; (8000238 <Task2_handler+0x28>)
 8000220:	4806      	ldr	r0, [pc, #24]	; (800023c <Task2_handler+0x2c>)
 8000222:	f001 fb76 	bl	8001912 <HAL_USART_Transmit>
		taskYIELD();
 8000226:	4b06      	ldr	r3, [pc, #24]	; (8000240 <Task2_handler+0x30>)
 8000228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	f3bf 8f4f 	dsb	sy
 8000232:	f3bf 8f6f 	isb	sy
		(void)HAL_USART_Transmit(&husart1, "This is task 1 handler \n", 25, 22000U);
 8000236:	e7ef      	b.n	8000218 <Task2_handler+0x8>
 8000238:	08005ad8 	.word	0x08005ad8
 800023c:	20000030 	.word	0x20000030
 8000240:	e000ed04 	.word	0xe000ed04

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b086      	sub	sp, #24
 8000248:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	TaskHandle_t task1_Handle = NULL,task2_Handle = NULL;
 800024a:	2300      	movs	r3, #0
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	2300      	movs	r3, #0
 8000250:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000252:	f000 f9fd 	bl	8000650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000256:	f000 f831 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025a:	f000 f897 	bl	800038c <MX_GPIO_Init>
  MX_USART1_Init();
 800025e:	f000 f869 	bl	8000334 <MX_USART1_Init>

  /* USER CODE BEGIN 2 */

  DWT_CTRL |=1;
 8000262:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <main+0x64>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a10      	ldr	r2, [pc, #64]	; (80002a8 <main+0x64>)
 8000268:	f043 0301 	orr.w	r3, r3, #1
 800026c:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800026e:	f001 fd3d 	bl	8001cec <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000272:	f002 fca7 	bl	8002bc4 <SEGGER_SYSVIEW_Start>

  task1_Returned = xTaskCreate(  Task1_handler, "Task_1", 30, NULL, 1, &task1_Handle );
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	9301      	str	r3, [sp, #4]
 800027a:	2301      	movs	r3, #1
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	2300      	movs	r3, #0
 8000280:	221e      	movs	r2, #30
 8000282:	490a      	ldr	r1, [pc, #40]	; (80002ac <main+0x68>)
 8000284:	480a      	ldr	r0, [pc, #40]	; (80002b0 <main+0x6c>)
 8000286:	f003 fdb7 	bl	8003df8 <xTaskCreate>
 800028a:	60f8      	str	r0, [r7, #12]
  task2_Returned = xTaskCreate(  Task2_handler, "Task_2", 30, NULL, 1, &task2_Handle );
 800028c:	463b      	mov	r3, r7
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	2301      	movs	r3, #1
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	2300      	movs	r3, #0
 8000296:	221e      	movs	r2, #30
 8000298:	4906      	ldr	r1, [pc, #24]	; (80002b4 <main+0x70>)
 800029a:	4807      	ldr	r0, [pc, #28]	; (80002b8 <main+0x74>)
 800029c:	f003 fdac 	bl	8003df8 <xTaskCreate>
 80002a0:	60b8      	str	r0, [r7, #8]
  vTaskStartScheduler();
 80002a2:	f003 ff23 	bl	80040ec <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a6:	e7fe      	b.n	80002a6 <main+0x62>
 80002a8:	e0001000 	.word	0xe0001000
 80002ac:	08005af4 	.word	0x08005af4
 80002b0:	080001dd 	.word	0x080001dd
 80002b4:	08005afc 	.word	0x08005afc
 80002b8:	08000211 	.word	0x08000211

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b090      	sub	sp, #64	; 0x40
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	2228      	movs	r2, #40	; 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f005 fbb0 	bl	8005a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002de:	2302      	movs	r3, #2
 80002e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	2301      	movs	r3, #1
 80002e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e6:	2310      	movs	r3, #16
 80002e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ea:	2300      	movs	r3, #0
 80002ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 fc42 	bl	8000b7c <HAL_RCC_OscConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002fe:	f000 f86a 	bl	80003d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	230f      	movs	r3, #15
 8000304:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000306:	2300      	movs	r3, #0
 8000308:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f000 feb0 	bl	8001080 <HAL_RCC_ClockConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000326:	f000 f856 	bl	80003d6 <Error_Handler>
  }
}
 800032a:	bf00      	nop
 800032c:	3740      	adds	r7, #64	; 0x40
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <MX_USART1_Init+0x50>)
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <MX_USART1_Init+0x54>)
 800033c:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_USART1_Init+0x50>)
 8000340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000344:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_USART1_Init+0x50>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 800034c:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <MX_USART1_Init+0x50>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_USART1_Init+0x50>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <MX_USART1_Init+0x50>)
 800035a:	220c      	movs	r2, #12
 800035c:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_USART1_Init+0x50>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <MX_USART1_Init+0x50>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_USART1_Init+0x50>)
 800036c:	2200      	movs	r2, #0
 800036e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <MX_USART1_Init+0x50>)
 8000372:	f001 fa8d 	bl	8001890 <HAL_USART_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 800037c:	f000 f82b 	bl	80003d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000030 	.word	0x20000030
 8000388:	40013800 	.word	0x40013800

0800038c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <MX_GPIO_Init+0x28>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a07      	ldr	r2, [pc, #28]	; (80003b4 <MX_GPIO_Init+0x28>)
 8000398:	f043 0304 	orr.w	r3, r3, #4
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <MX_GPIO_Init+0x28>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0304 	and.w	r3, r3, #4
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40021000 	.word	0x40021000

080003b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003c8:	d101      	bne.n	80003ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003ca:	f000 f957 	bl	800067c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003da:	b672      	cpsid	i
}
 80003dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003de:	e7fe      	b.n	80003de <Error_Handler+0x8>

080003e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <HAL_MspInit+0x44>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <HAL_MspInit+0x44>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6193      	str	r3, [r2, #24]
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <HAL_MspInit+0x44>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <HAL_MspInit+0x44>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	4a08      	ldr	r2, [pc, #32]	; (8000424 <HAL_MspInit+0x44>)
 8000404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000408:	61d3      	str	r3, [r2, #28]
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <HAL_MspInit+0x44>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000412:	603b      	str	r3, [r7, #0]
 8000414:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000416:	f004 ffd3 	bl	80053c0 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000

08000428 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART1)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a1c      	ldr	r2, [pc, #112]	; (80004b4 <HAL_USART_MspInit+0x8c>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d131      	bne.n	80004ac <HAL_USART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <HAL_USART_MspInit+0x90>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a1a      	ldr	r2, [pc, #104]	; (80004b8 <HAL_USART_MspInit+0x90>)
 800044e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <HAL_USART_MspInit+0x90>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <HAL_USART_MspInit+0x90>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <HAL_USART_MspInit+0x90>)
 8000466:	f043 0304 	orr.w	r3, r3, #4
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <HAL_USART_MspInit+0x90>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0304 	and.w	r3, r3, #4
 8000474:	60bb      	str	r3, [r7, #8]
 8000476:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000478:	f44f 7340 	mov.w	r3, #768	; 0x300
 800047c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800047e:	2302      	movs	r3, #2
 8000480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000482:	2303      	movs	r3, #3
 8000484:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	4619      	mov	r1, r3
 800048c:	480b      	ldr	r0, [pc, #44]	; (80004bc <HAL_USART_MspInit+0x94>)
 800048e:	f000 f9f1 	bl	8000874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	4619      	mov	r1, r3
 80004a6:	4805      	ldr	r0, [pc, #20]	; (80004bc <HAL_USART_MspInit+0x94>)
 80004a8:	f000 f9e4 	bl	8000874 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004ac:	bf00      	nop
 80004ae:	3720      	adds	r7, #32
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40013800 	.word	0x40013800
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010800 	.word	0x40010800

080004c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08e      	sub	sp, #56	; 0x38
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80004c8:	2300      	movs	r3, #0
 80004ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80004cc:	2300      	movs	r3, #0
 80004ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004d0:	2300      	movs	r3, #0
 80004d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80004d6:	4b34      	ldr	r3, [pc, #208]	; (80005a8 <HAL_InitTick+0xe8>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a33      	ldr	r2, [pc, #204]	; (80005a8 <HAL_InitTick+0xe8>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b31      	ldr	r3, [pc, #196]	; (80005a8 <HAL_InitTick+0xe8>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004ee:	f107 0210 	add.w	r2, r7, #16
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	4611      	mov	r1, r2
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 ff31 	bl	8001360 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004fe:	6a3b      	ldr	r3, [r7, #32]
 8000500:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000504:	2b00      	cmp	r3, #0
 8000506:	d103      	bne.n	8000510 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000508:	f000 ff02 	bl	8001310 <HAL_RCC_GetPCLK1Freq>
 800050c:	6378      	str	r0, [r7, #52]	; 0x34
 800050e:	e004      	b.n	800051a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000510:	f000 fefe 	bl	8001310 <HAL_RCC_GetPCLK1Freq>
 8000514:	4603      	mov	r3, r0
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800051a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800051c:	4a23      	ldr	r2, [pc, #140]	; (80005ac <HAL_InitTick+0xec>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	0c9b      	lsrs	r3, r3, #18
 8000524:	3b01      	subs	r3, #1
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000528:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <HAL_InitTick+0xf0>)
 800052a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800052e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000530:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <HAL_InitTick+0xf0>)
 8000532:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000536:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000538:	4a1d      	ldr	r2, [pc, #116]	; (80005b0 <HAL_InitTick+0xf0>)
 800053a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800053c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <HAL_InitTick+0xf0>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000544:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <HAL_InitTick+0xf0>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054a:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <HAL_InitTick+0xf0>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000550:	4817      	ldr	r0, [pc, #92]	; (80005b0 <HAL_InitTick+0xf0>)
 8000552:	f000 ff53 	bl	80013fc <HAL_TIM_Base_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800055c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000560:	2b00      	cmp	r3, #0
 8000562:	d11b      	bne.n	800059c <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000564:	4812      	ldr	r0, [pc, #72]	; (80005b0 <HAL_InitTick+0xf0>)
 8000566:	f000 ffa1 	bl	80014ac <HAL_TIM_Base_Start_IT>
 800056a:	4603      	mov	r3, r0
 800056c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000570:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000574:	2b00      	cmp	r3, #0
 8000576:	d111      	bne.n	800059c <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000578:	201c      	movs	r0, #28
 800057a:	f000 f96c 	bl	8000856 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2b0f      	cmp	r3, #15
 8000582:	d808      	bhi.n	8000596 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000584:	2200      	movs	r2, #0
 8000586:	6879      	ldr	r1, [r7, #4]
 8000588:	201c      	movs	r0, #28
 800058a:	f000 f948 	bl	800081e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <HAL_InitTick+0xf4>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	e002      	b.n	800059c <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800059c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3738      	adds	r7, #56	; 0x38
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40021000 	.word	0x40021000
 80005ac:	431bde83 	.word	0x431bde83
 80005b0:	20000074 	.word	0x20000074
 80005b4:	20000004 	.word	0x20000004

080005b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <NMI_Handler+0x4>

080005be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <HardFault_Handler+0x4>

080005c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <MemManage_Handler+0x4>

080005ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <BusFault_Handler+0x4>

080005d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <UsageFault_Handler+0x4>

080005d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr
	...

080005e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <TIM2_IRQHandler+0x10>)
 80005ea:	f000 ffb1 	bl	8001550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000074 	.word	0x20000074

080005f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000604:	f7ff fff8 	bl	80005f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800060a:	490c      	ldr	r1, [pc, #48]	; (800063c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800060c:	4a0c      	ldr	r2, [pc, #48]	; (8000640 <LoopFillZerobss+0x16>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a09      	ldr	r2, [pc, #36]	; (8000644 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000620:	4c09      	ldr	r4, [pc, #36]	; (8000648 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800062e:	f005 fa07 	bl	8005a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000632:	f7ff fe07 	bl	8000244 <main>
  bx lr
 8000636:	4770      	bx	lr
  ldr r0, =_sdata
 8000638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800063c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000640:	08005c30 	.word	0x08005c30
  ldr r2, =_sbss
 8000644:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000648:	200040dc 	.word	0x200040dc

0800064c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC1_2_IRQHandler>
	...

08000650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <HAL_Init+0x28>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_Init+0x28>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000660:	2003      	movs	r0, #3
 8000662:	f000 f8d1 	bl	8000808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000666:	200f      	movs	r0, #15
 8000668:	f7ff ff2a 	bl	80004c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800066c:	f7ff feb8 	bl	80003e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40022000 	.word	0x40022000

0800067c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HAL_IncTick+0x1c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <HAL_IncTick+0x20>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4413      	add	r3, r2
 800068c:	4a03      	ldr	r2, [pc, #12]	; (800069c <HAL_IncTick+0x20>)
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	20000008 	.word	0x20000008
 800069c:	200000bc 	.word	0x200000bc

080006a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <HAL_GetTick+0x10>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	200000bc 	.word	0x200000bc

080006b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d0:	4013      	ands	r3, r2
 80006d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e6:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	60d3      	str	r3, [r2, #12]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <__NVIC_GetPriorityGrouping+0x18>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	f003 0307 	and.w	r3, r3, #7
}
 800070a:	4618      	mov	r0, r3
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	2b00      	cmp	r3, #0
 8000728:	db0b      	blt.n	8000742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f003 021f 	and.w	r2, r3, #31
 8000730:	4906      	ldr	r1, [pc, #24]	; (800074c <__NVIC_EnableIRQ+0x34>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	095b      	lsrs	r3, r3, #5
 8000738:	2001      	movs	r0, #1
 800073a:	fa00 f202 	lsl.w	r2, r0, r2
 800073e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	e000e100 	.word	0xe000e100

08000750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	db0a      	blt.n	800077a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	; (800079c <__NVIC_SetPriority+0x4c>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000778:	e00a      	b.n	8000790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4908      	ldr	r1, [pc, #32]	; (80007a0 <__NVIC_SetPriority+0x50>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	3b04      	subs	r3, #4
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	440b      	add	r3, r1
 800078e:	761a      	strb	r2, [r3, #24]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	f1c3 0307 	rsb	r3, r3, #7
 80007be:	2b04      	cmp	r3, #4
 80007c0:	bf28      	it	cs
 80007c2:	2304      	movcs	r3, #4
 80007c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d902      	bls.n	80007d4 <NVIC_EncodePriority+0x30>
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3b03      	subs	r3, #3
 80007d2:	e000      	b.n	80007d6 <NVIC_EncodePriority+0x32>
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	f04f 32ff 	mov.w	r2, #4294967295
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43da      	mvns	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	401a      	ands	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43d9      	mvns	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	4313      	orrs	r3, r2
         );
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3724      	adds	r7, #36	; 0x24
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff4f 	bl	80006b4 <__NVIC_SetPriorityGrouping>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
 800082a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000830:	f7ff ff64 	bl	80006fc <__NVIC_GetPriorityGrouping>
 8000834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	6978      	ldr	r0, [r7, #20]
 800083c:	f7ff ffb2 	bl	80007a4 <NVIC_EncodePriority>
 8000840:	4602      	mov	r2, r0
 8000842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff81 	bl	8000750 <__NVIC_SetPriority>
}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff57 	bl	8000718 <__NVIC_EnableIRQ>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000874:	b480      	push	{r7}
 8000876:	b08b      	sub	sp, #44	; 0x2c
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000886:	e169      	b.n	8000b5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000888:	2201      	movs	r2, #1
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	69fa      	ldr	r2, [r7, #28]
 8000898:	4013      	ands	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	f040 8158 	bne.w	8000b56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	4a9a      	ldr	r2, [pc, #616]	; (8000b14 <HAL_GPIO_Init+0x2a0>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d05e      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008b0:	4a98      	ldr	r2, [pc, #608]	; (8000b14 <HAL_GPIO_Init+0x2a0>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d875      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008b6:	4a98      	ldr	r2, [pc, #608]	; (8000b18 <HAL_GPIO_Init+0x2a4>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d058      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008bc:	4a96      	ldr	r2, [pc, #600]	; (8000b18 <HAL_GPIO_Init+0x2a4>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d86f      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008c2:	4a96      	ldr	r2, [pc, #600]	; (8000b1c <HAL_GPIO_Init+0x2a8>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d052      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008c8:	4a94      	ldr	r2, [pc, #592]	; (8000b1c <HAL_GPIO_Init+0x2a8>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d869      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008ce:	4a94      	ldr	r2, [pc, #592]	; (8000b20 <HAL_GPIO_Init+0x2ac>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d04c      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008d4:	4a92      	ldr	r2, [pc, #584]	; (8000b20 <HAL_GPIO_Init+0x2ac>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d863      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008da:	4a92      	ldr	r2, [pc, #584]	; (8000b24 <HAL_GPIO_Init+0x2b0>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d046      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008e0:	4a90      	ldr	r2, [pc, #576]	; (8000b24 <HAL_GPIO_Init+0x2b0>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d85d      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008e6:	2b12      	cmp	r3, #18
 80008e8:	d82a      	bhi.n	8000940 <HAL_GPIO_Init+0xcc>
 80008ea:	2b12      	cmp	r3, #18
 80008ec:	d859      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008ee:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <HAL_GPIO_Init+0x80>)
 80008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f4:	0800096f 	.word	0x0800096f
 80008f8:	08000949 	.word	0x08000949
 80008fc:	0800095b 	.word	0x0800095b
 8000900:	0800099d 	.word	0x0800099d
 8000904:	080009a3 	.word	0x080009a3
 8000908:	080009a3 	.word	0x080009a3
 800090c:	080009a3 	.word	0x080009a3
 8000910:	080009a3 	.word	0x080009a3
 8000914:	080009a3 	.word	0x080009a3
 8000918:	080009a3 	.word	0x080009a3
 800091c:	080009a3 	.word	0x080009a3
 8000920:	080009a3 	.word	0x080009a3
 8000924:	080009a3 	.word	0x080009a3
 8000928:	080009a3 	.word	0x080009a3
 800092c:	080009a3 	.word	0x080009a3
 8000930:	080009a3 	.word	0x080009a3
 8000934:	080009a3 	.word	0x080009a3
 8000938:	08000951 	.word	0x08000951
 800093c:	08000965 	.word	0x08000965
 8000940:	4a79      	ldr	r2, [pc, #484]	; (8000b28 <HAL_GPIO_Init+0x2b4>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d013      	beq.n	800096e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000946:	e02c      	b.n	80009a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	623b      	str	r3, [r7, #32]
          break;
 800094e:	e029      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	3304      	adds	r3, #4
 8000956:	623b      	str	r3, [r7, #32]
          break;
 8000958:	e024      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	3308      	adds	r3, #8
 8000960:	623b      	str	r3, [r7, #32]
          break;
 8000962:	e01f      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	330c      	adds	r3, #12
 800096a:	623b      	str	r3, [r7, #32]
          break;
 800096c:	e01a      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000976:	2304      	movs	r3, #4
 8000978:	623b      	str	r3, [r7, #32]
          break;
 800097a:	e013      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d105      	bne.n	8000990 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000984:	2308      	movs	r3, #8
 8000986:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	69fa      	ldr	r2, [r7, #28]
 800098c:	611a      	str	r2, [r3, #16]
          break;
 800098e:	e009      	b.n	80009a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000990:	2308      	movs	r3, #8
 8000992:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	615a      	str	r2, [r3, #20]
          break;
 800099a:	e003      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
          break;
 80009a0:	e000      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          break;
 80009a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	2bff      	cmp	r3, #255	; 0xff
 80009a8:	d801      	bhi.n	80009ae <HAL_GPIO_Init+0x13a>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	e001      	b.n	80009b2 <HAL_GPIO_Init+0x13e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3304      	adds	r3, #4
 80009b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	2bff      	cmp	r3, #255	; 0xff
 80009b8:	d802      	bhi.n	80009c0 <HAL_GPIO_Init+0x14c>
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	e002      	b.n	80009c6 <HAL_GPIO_Init+0x152>
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	3b08      	subs	r3, #8
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	210f      	movs	r1, #15
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	fa01 f303 	lsl.w	r3, r1, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	401a      	ands	r2, r3
 80009d8:	6a39      	ldr	r1, [r7, #32]
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	fa01 f303 	lsl.w	r3, r1, r3
 80009e0:	431a      	orrs	r2, r3
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 80b1 	beq.w	8000b56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009f4:	4b4d      	ldr	r3, [pc, #308]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a4c      	ldr	r2, [pc, #304]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b4a      	ldr	r3, [pc, #296]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a0c:	4a48      	ldr	r2, [pc, #288]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	089b      	lsrs	r3, r3, #2
 8000a12:	3302      	adds	r3, #2
 8000a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	220f      	movs	r2, #15
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a40      	ldr	r2, [pc, #256]	; (8000b34 <HAL_GPIO_Init+0x2c0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d013      	beq.n	8000a60 <HAL_GPIO_Init+0x1ec>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a3f      	ldr	r2, [pc, #252]	; (8000b38 <HAL_GPIO_Init+0x2c4>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d00d      	beq.n	8000a5c <HAL_GPIO_Init+0x1e8>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a3e      	ldr	r2, [pc, #248]	; (8000b3c <HAL_GPIO_Init+0x2c8>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d007      	beq.n	8000a58 <HAL_GPIO_Init+0x1e4>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a3d      	ldr	r2, [pc, #244]	; (8000b40 <HAL_GPIO_Init+0x2cc>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d101      	bne.n	8000a54 <HAL_GPIO_Init+0x1e0>
 8000a50:	2303      	movs	r3, #3
 8000a52:	e006      	b.n	8000a62 <HAL_GPIO_Init+0x1ee>
 8000a54:	2304      	movs	r3, #4
 8000a56:	e004      	b.n	8000a62 <HAL_GPIO_Init+0x1ee>
 8000a58:	2302      	movs	r3, #2
 8000a5a:	e002      	b.n	8000a62 <HAL_GPIO_Init+0x1ee>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e000      	b.n	8000a62 <HAL_GPIO_Init+0x1ee>
 8000a60:	2300      	movs	r3, #0
 8000a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a64:	f002 0203 	and.w	r2, r2, #3
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	4093      	lsls	r3, r2
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a72:	492f      	ldr	r1, [pc, #188]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	3302      	adds	r3, #2
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d006      	beq.n	8000a9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000a8e:	689a      	ldr	r2, [r3, #8]
 8000a90:	492c      	ldr	r1, [pc, #176]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	608b      	str	r3, [r1, #8]
 8000a98:	e006      	b.n	8000aa8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	4928      	ldr	r1, [pc, #160]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d006      	beq.n	8000ac2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000ab6:	68da      	ldr	r2, [r3, #12]
 8000ab8:	4922      	ldr	r1, [pc, #136]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	60cb      	str	r3, [r1, #12]
 8000ac0:	e006      	b.n	8000ad0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000ac4:	68da      	ldr	r2, [r3, #12]
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	491e      	ldr	r1, [pc, #120]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000acc:	4013      	ands	r3, r2
 8000ace:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d006      	beq.n	8000aea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	4918      	ldr	r1, [pc, #96]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	604b      	str	r3, [r1, #4]
 8000ae8:	e006      	b.n	8000af8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	4914      	ldr	r1, [pc, #80]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000af4:	4013      	ands	r3, r2
 8000af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d021      	beq.n	8000b48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	490e      	ldr	r1, [pc, #56]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	600b      	str	r3, [r1, #0]
 8000b10:	e021      	b.n	8000b56 <HAL_GPIO_Init+0x2e2>
 8000b12:	bf00      	nop
 8000b14:	10320000 	.word	0x10320000
 8000b18:	10310000 	.word	0x10310000
 8000b1c:	10220000 	.word	0x10220000
 8000b20:	10210000 	.word	0x10210000
 8000b24:	10120000 	.word	0x10120000
 8000b28:	10110000 	.word	0x10110000
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010000 	.word	0x40010000
 8000b34:	40010800 	.word	0x40010800
 8000b38:	40010c00 	.word	0x40010c00
 8000b3c:	40011000 	.word	0x40011000
 8000b40:	40011400 	.word	0x40011400
 8000b44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_GPIO_Init+0x304>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	4909      	ldr	r1, [pc, #36]	; (8000b78 <HAL_GPIO_Init+0x304>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	3301      	adds	r3, #1
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	fa22 f303 	lsr.w	r3, r2, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f47f ae8e 	bne.w	8000888 <HAL_GPIO_Init+0x14>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	372c      	adds	r7, #44	; 0x2c
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	40010400 	.word	0x40010400

08000b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e272      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f000 8087 	beq.w	8000caa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b9c:	4b92      	ldr	r3, [pc, #584]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f003 030c 	and.w	r3, r3, #12
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	d00c      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ba8:	4b8f      	ldr	r3, [pc, #572]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 030c 	and.w	r3, r3, #12
 8000bb0:	2b08      	cmp	r3, #8
 8000bb2:	d112      	bne.n	8000bda <HAL_RCC_OscConfig+0x5e>
 8000bb4:	4b8c      	ldr	r3, [pc, #560]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc0:	d10b      	bne.n	8000bda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bc2:	4b89      	ldr	r3, [pc, #548]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d06c      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x12c>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d168      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e24c      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be2:	d106      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x76>
 8000be4:	4b80      	ldr	r3, [pc, #512]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a7f      	ldr	r2, [pc, #508]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	e02e      	b.n	8000c50 <HAL_RCC_OscConfig+0xd4>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10c      	bne.n	8000c14 <HAL_RCC_OscConfig+0x98>
 8000bfa:	4b7b      	ldr	r3, [pc, #492]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a7a      	ldr	r2, [pc, #488]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	4b78      	ldr	r3, [pc, #480]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a77      	ldr	r2, [pc, #476]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e01d      	b.n	8000c50 <HAL_RCC_OscConfig+0xd4>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c1c:	d10c      	bne.n	8000c38 <HAL_RCC_OscConfig+0xbc>
 8000c1e:	4b72      	ldr	r3, [pc, #456]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a71      	ldr	r2, [pc, #452]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	4b6f      	ldr	r3, [pc, #444]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a6e      	ldr	r2, [pc, #440]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	e00b      	b.n	8000c50 <HAL_RCC_OscConfig+0xd4>
 8000c38:	4b6b      	ldr	r3, [pc, #428]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a6a      	ldr	r2, [pc, #424]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	4b68      	ldr	r3, [pc, #416]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a67      	ldr	r2, [pc, #412]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d013      	beq.n	8000c80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c58:	f7ff fd22 	bl	80006a0 <HAL_GetTick>
 8000c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5e:	e008      	b.n	8000c72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c60:	f7ff fd1e 	bl	80006a0 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b64      	cmp	r3, #100	; 0x64
 8000c6c:	d901      	bls.n	8000c72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e200      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c72:	4b5d      	ldr	r3, [pc, #372]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0f0      	beq.n	8000c60 <HAL_RCC_OscConfig+0xe4>
 8000c7e:	e014      	b.n	8000caa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c80:	f7ff fd0e 	bl	80006a0 <HAL_GetTick>
 8000c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c86:	e008      	b.n	8000c9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c88:	f7ff fd0a 	bl	80006a0 <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b64      	cmp	r3, #100	; 0x64
 8000c94:	d901      	bls.n	8000c9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c96:	2303      	movs	r3, #3
 8000c98:	e1ec      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9a:	4b53      	ldr	r3, [pc, #332]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f0      	bne.n	8000c88 <HAL_RCC_OscConfig+0x10c>
 8000ca6:	e000      	b.n	8000caa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d063      	beq.n	8000d7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cb6:	4b4c      	ldr	r3, [pc, #304]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 030c 	and.w	r3, r3, #12
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00b      	beq.n	8000cda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cc2:	4b49      	ldr	r3, [pc, #292]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 030c 	and.w	r3, r3, #12
 8000cca:	2b08      	cmp	r3, #8
 8000ccc:	d11c      	bne.n	8000d08 <HAL_RCC_OscConfig+0x18c>
 8000cce:	4b46      	ldr	r3, [pc, #280]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d116      	bne.n	8000d08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cda:	4b43      	ldr	r3, [pc, #268]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d005      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x176>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d001      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e1c0      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf2:	4b3d      	ldr	r3, [pc, #244]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	4939      	ldr	r1, [pc, #228]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	4313      	orrs	r3, r2
 8000d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d06:	e03a      	b.n	8000d7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	691b      	ldr	r3, [r3, #16]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d020      	beq.n	8000d52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d10:	4b36      	ldr	r3, [pc, #216]	; (8000dec <HAL_RCC_OscConfig+0x270>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d16:	f7ff fcc3 	bl	80006a0 <HAL_GetTick>
 8000d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1c:	e008      	b.n	8000d30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d1e:	f7ff fcbf 	bl	80006a0 <HAL_GetTick>
 8000d22:	4602      	mov	r2, r0
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d901      	bls.n	8000d30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e1a1      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d30:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0f0      	beq.n	8000d1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	4927      	ldr	r1, [pc, #156]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	600b      	str	r3, [r1, #0]
 8000d50:	e015      	b.n	8000d7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d52:	4b26      	ldr	r3, [pc, #152]	; (8000dec <HAL_RCC_OscConfig+0x270>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d58:	f7ff fca2 	bl	80006a0 <HAL_GetTick>
 8000d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5e:	e008      	b.n	8000d72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d60:	f7ff fc9e 	bl	80006a0 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e180      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d72:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1f0      	bne.n	8000d60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d03a      	beq.n	8000e00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d019      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <HAL_RCC_OscConfig+0x274>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d98:	f7ff fc82 	bl	80006a0 <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000da0:	f7ff fc7e 	bl	80006a0 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e160      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f0      	beq.n	8000da0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f000 fafe 	bl	80013c0 <RCC_Delay>
 8000dc4:	e01c      	b.n	8000e00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <HAL_RCC_OscConfig+0x274>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dcc:	f7ff fc68 	bl	80006a0 <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd2:	e00f      	b.n	8000df4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dd4:	f7ff fc64 	bl	80006a0 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d908      	bls.n	8000df4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e146      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000
 8000dec:	42420000 	.word	0x42420000
 8000df0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df4:	4b92      	ldr	r3, [pc, #584]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1e9      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 80a6 	beq.w	8000f5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e12:	4b8b      	ldr	r3, [pc, #556]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10d      	bne.n	8000e3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	4b88      	ldr	r3, [pc, #544]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	4a87      	ldr	r2, [pc, #540]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e28:	61d3      	str	r3, [r2, #28]
 8000e2a:	4b85      	ldr	r3, [pc, #532]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e36:	2301      	movs	r3, #1
 8000e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3a:	4b82      	ldr	r3, [pc, #520]	; (8001044 <HAL_RCC_OscConfig+0x4c8>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d118      	bne.n	8000e78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e46:	4b7f      	ldr	r3, [pc, #508]	; (8001044 <HAL_RCC_OscConfig+0x4c8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a7e      	ldr	r2, [pc, #504]	; (8001044 <HAL_RCC_OscConfig+0x4c8>)
 8000e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e52:	f7ff fc25 	bl	80006a0 <HAL_GetTick>
 8000e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e5a:	f7ff fc21 	bl	80006a0 <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b64      	cmp	r3, #100	; 0x64
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e103      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6c:	4b75      	ldr	r3, [pc, #468]	; (8001044 <HAL_RCC_OscConfig+0x4c8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f0      	beq.n	8000e5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d106      	bne.n	8000e8e <HAL_RCC_OscConfig+0x312>
 8000e80:	4b6f      	ldr	r3, [pc, #444]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	4a6e      	ldr	r2, [pc, #440]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6213      	str	r3, [r2, #32]
 8000e8c:	e02d      	b.n	8000eea <HAL_RCC_OscConfig+0x36e>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10c      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x334>
 8000e96:	4b6a      	ldr	r3, [pc, #424]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000e98:	6a1b      	ldr	r3, [r3, #32]
 8000e9a:	4a69      	ldr	r2, [pc, #420]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000e9c:	f023 0301 	bic.w	r3, r3, #1
 8000ea0:	6213      	str	r3, [r2, #32]
 8000ea2:	4b67      	ldr	r3, [pc, #412]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	4a66      	ldr	r2, [pc, #408]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000ea8:	f023 0304 	bic.w	r3, r3, #4
 8000eac:	6213      	str	r3, [r2, #32]
 8000eae:	e01c      	b.n	8000eea <HAL_RCC_OscConfig+0x36e>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	2b05      	cmp	r3, #5
 8000eb6:	d10c      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x356>
 8000eb8:	4b61      	ldr	r3, [pc, #388]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	4a60      	ldr	r2, [pc, #384]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	6213      	str	r3, [r2, #32]
 8000ec4:	4b5e      	ldr	r3, [pc, #376]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4a5d      	ldr	r2, [pc, #372]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6213      	str	r3, [r2, #32]
 8000ed0:	e00b      	b.n	8000eea <HAL_RCC_OscConfig+0x36e>
 8000ed2:	4b5b      	ldr	r3, [pc, #364]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	6a1b      	ldr	r3, [r3, #32]
 8000ed6:	4a5a      	ldr	r2, [pc, #360]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	f023 0301 	bic.w	r3, r3, #1
 8000edc:	6213      	str	r3, [r2, #32]
 8000ede:	4b58      	ldr	r3, [pc, #352]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	4a57      	ldr	r2, [pc, #348]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	f023 0304 	bic.w	r3, r3, #4
 8000ee8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d015      	beq.n	8000f1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef2:	f7ff fbd5 	bl	80006a0 <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef8:	e00a      	b.n	8000f10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000efa:	f7ff fbd1 	bl	80006a0 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e0b1      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f10:	4b4b      	ldr	r3, [pc, #300]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0ee      	beq.n	8000efa <HAL_RCC_OscConfig+0x37e>
 8000f1c:	e014      	b.n	8000f48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1e:	f7ff fbbf 	bl	80006a0 <HAL_GetTick>
 8000f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f24:	e00a      	b.n	8000f3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f26:	f7ff fbbb 	bl	80006a0 <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e09b      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f3c:	4b40      	ldr	r3, [pc, #256]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1ee      	bne.n	8000f26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f48:	7dfb      	ldrb	r3, [r7, #23]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d105      	bne.n	8000f5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f4e:	4b3c      	ldr	r3, [pc, #240]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a3b      	ldr	r2, [pc, #236]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 8087 	beq.w	8001072 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f64:	4b36      	ldr	r3, [pc, #216]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 030c 	and.w	r3, r3, #12
 8000f6c:	2b08      	cmp	r3, #8
 8000f6e:	d061      	beq.n	8001034 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d146      	bne.n	8001006 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f78:	4b33      	ldr	r3, [pc, #204]	; (8001048 <HAL_RCC_OscConfig+0x4cc>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fb8f 	bl	80006a0 <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f84:	e008      	b.n	8000f98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f86:	f7ff fb8b 	bl	80006a0 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e06d      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f98:	4b29      	ldr	r3, [pc, #164]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1f0      	bne.n	8000f86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fac:	d108      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fae:	4b24      	ldr	r3, [pc, #144]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	4921      	ldr	r1, [pc, #132]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a19      	ldr	r1, [r3, #32]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	430b      	orrs	r3, r1
 8000fd2:	491b      	ldr	r1, [pc, #108]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <HAL_RCC_OscConfig+0x4cc>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fde:	f7ff fb5f 	bl	80006a0 <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe6:	f7ff fb5b 	bl	80006a0 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e03d      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f0      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x46a>
 8001004:	e035      	b.n	8001072 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <HAL_RCC_OscConfig+0x4cc>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fb48 	bl	80006a0 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001014:	f7ff fb44 	bl	80006a0 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e026      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f0      	bne.n	8001014 <HAL_RCC_OscConfig+0x498>
 8001032:	e01e      	b.n	8001072 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d107      	bne.n	800104c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e019      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>
 8001040:	40021000 	.word	0x40021000
 8001044:	40007000 	.word	0x40007000
 8001048:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_RCC_OscConfig+0x500>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	429a      	cmp	r2, r3
 800105e:	d106      	bne.n	800106e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800106a:	429a      	cmp	r2, r3
 800106c:	d001      	beq.n	8001072 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e0d0      	b.n	8001236 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001094:	4b6a      	ldr	r3, [pc, #424]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d910      	bls.n	80010c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a2:	4b67      	ldr	r3, [pc, #412]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 0207 	bic.w	r2, r3, #7
 80010aa:	4965      	ldr	r1, [pc, #404]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010b2:	4b63      	ldr	r3, [pc, #396]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d001      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e0b8      	b.n	8001236 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d020      	beq.n	8001112 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010dc:	4b59      	ldr	r3, [pc, #356]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4a58      	ldr	r2, [pc, #352]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 80010e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d005      	beq.n	8001100 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010f4:	4b53      	ldr	r3, [pc, #332]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4a52      	ldr	r2, [pc, #328]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 80010fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001100:	4b50      	ldr	r3, [pc, #320]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	494d      	ldr	r1, [pc, #308]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	4313      	orrs	r3, r2
 8001110:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d040      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d107      	bne.n	8001136 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001126:	4b47      	ldr	r3, [pc, #284]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d115      	bne.n	800115e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e07f      	b.n	8001236 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d107      	bne.n	800114e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800113e:	4b41      	ldr	r3, [pc, #260]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d109      	bne.n	800115e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e073      	b.n	8001236 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114e:	4b3d      	ldr	r3, [pc, #244]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e06b      	b.n	8001236 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800115e:	4b39      	ldr	r3, [pc, #228]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f023 0203 	bic.w	r2, r3, #3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4936      	ldr	r1, [pc, #216]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	4313      	orrs	r3, r2
 800116e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001170:	f7ff fa96 	bl	80006a0 <HAL_GetTick>
 8001174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001176:	e00a      	b.n	800118e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001178:	f7ff fa92 	bl	80006a0 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	f241 3288 	movw	r2, #5000	; 0x1388
 8001186:	4293      	cmp	r3, r2
 8001188:	d901      	bls.n	800118e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e053      	b.n	8001236 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 020c 	and.w	r2, r3, #12
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	429a      	cmp	r2, r3
 800119e:	d1eb      	bne.n	8001178 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d210      	bcs.n	80011d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ae:	4b24      	ldr	r3, [pc, #144]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f023 0207 	bic.w	r2, r3, #7
 80011b6:	4922      	ldr	r1, [pc, #136]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d001      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e032      	b.n	8001236 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d008      	beq.n	80011ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4916      	ldr	r1, [pc, #88]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d009      	beq.n	800120e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	490e      	ldr	r1, [pc, #56]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	4313      	orrs	r3, r2
 800120c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800120e:	f000 f821 	bl	8001254 <HAL_RCC_GetSysClockFreq>
 8001212:	4602      	mov	r2, r0
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	490a      	ldr	r1, [pc, #40]	; (8001248 <HAL_RCC_ClockConfig+0x1c8>)
 8001220:	5ccb      	ldrb	r3, [r1, r3]
 8001222:	fa22 f303 	lsr.w	r3, r2, r3
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_RCC_ClockConfig+0x1cc>)
 8001228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_RCC_ClockConfig+0x1d0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f946 	bl	80004c0 <HAL_InitTick>

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40022000 	.word	0x40022000
 8001244:	40021000 	.word	0x40021000
 8001248:	08005bd4 	.word	0x08005bd4
 800124c:	20000000 	.word	0x20000000
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b04      	cmp	r3, #4
 800127c:	d002      	beq.n	8001284 <HAL_RCC_GetSysClockFreq+0x30>
 800127e:	2b08      	cmp	r3, #8
 8001280:	d003      	beq.n	800128a <HAL_RCC_GetSysClockFreq+0x36>
 8001282:	e027      	b.n	80012d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HAL_RCC_GetSysClockFreq+0x98>)
 8001286:	613b      	str	r3, [r7, #16]
      break;
 8001288:	e027      	b.n	80012da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	0c9b      	lsrs	r3, r3, #18
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001294:	5cd3      	ldrb	r3, [r2, r3]
 8001296:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d010      	beq.n	80012c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	0c5b      	lsrs	r3, r3, #17
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012ae:	5cd3      	ldrb	r3, [r2, r3]
 80012b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_RCC_GetSysClockFreq+0x98>)
 80012b6:	fb03 f202 	mul.w	r2, r3, r2
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	e004      	b.n	80012ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012c8:	fb02 f303 	mul.w	r3, r2, r3
 80012cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	613b      	str	r3, [r7, #16]
      break;
 80012d2:	e002      	b.n	80012da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_RCC_GetSysClockFreq+0x98>)
 80012d6:	613b      	str	r3, [r7, #16]
      break;
 80012d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012da:	693b      	ldr	r3, [r7, #16]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	371c      	adds	r7, #28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000
 80012ec:	007a1200 	.word	0x007a1200
 80012f0:	08005bec 	.word	0x08005bec
 80012f4:	08005bfc 	.word	0x08005bfc
 80012f8:	003d0900 	.word	0x003d0900

080012fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001300:	4b02      	ldr	r3, [pc, #8]	; (800130c <HAL_RCC_GetHCLKFreq+0x10>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	20000000 	.word	0x20000000

08001310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001314:	f7ff fff2 	bl	80012fc <HAL_RCC_GetHCLKFreq>
 8001318:	4602      	mov	r2, r0
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	0a1b      	lsrs	r3, r3, #8
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	4903      	ldr	r1, [pc, #12]	; (8001334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001326:	5ccb      	ldrb	r3, [r1, r3]
 8001328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800132c:	4618      	mov	r0, r3
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40021000 	.word	0x40021000
 8001334:	08005be4 	.word	0x08005be4

08001338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800133c:	f7ff ffde 	bl	80012fc <HAL_RCC_GetHCLKFreq>
 8001340:	4602      	mov	r2, r0
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	0adb      	lsrs	r3, r3, #11
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	4903      	ldr	r1, [pc, #12]	; (800135c <HAL_RCC_GetPCLK2Freq+0x24>)
 800134e:	5ccb      	ldrb	r3, [r1, r3]
 8001350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001354:	4618      	mov	r0, r3
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000
 800135c:	08005be4 	.word	0x08005be4

08001360 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	220f      	movs	r2, #15
 800136e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_RCC_GetClockConfig+0x58>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0203 	and.w	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_RCC_GetClockConfig+0x58>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_RCC_GetClockConfig+0x58>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HAL_RCC_GetClockConfig+0x58>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	08db      	lsrs	r3, r3, #3
 800139a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_RCC_GetClockConfig+0x5c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0207 	and.w	r2, r3, #7
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40022000 	.word	0x40022000

080013c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <RCC_Delay+0x34>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <RCC_Delay+0x38>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0a5b      	lsrs	r3, r3, #9
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	fb02 f303 	mul.w	r3, r2, r3
 80013da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013dc:	bf00      	nop
  }
  while (Delay --);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1e5a      	subs	r2, r3, #1
 80013e2:	60fa      	str	r2, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f9      	bne.n	80013dc <RCC_Delay+0x1c>
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	20000000 	.word	0x20000000
 80013f8:	10624dd3 	.word	0x10624dd3

080013fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e041      	b.n	8001492 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d106      	bne.n	8001428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f839 	bl	800149a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2202      	movs	r2, #2
 800142c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3304      	adds	r3, #4
 8001438:	4619      	mov	r1, r3
 800143a:	4610      	mov	r0, r2
 800143c:	f000 f9b4 	bl	80017a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d001      	beq.n	80014c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e03a      	b.n	800153a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2202      	movs	r2, #2
 80014c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0201 	orr.w	r2, r2, #1
 80014da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a18      	ldr	r2, [pc, #96]	; (8001544 <HAL_TIM_Base_Start_IT+0x98>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00e      	beq.n	8001504 <HAL_TIM_Base_Start_IT+0x58>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ee:	d009      	beq.n	8001504 <HAL_TIM_Base_Start_IT+0x58>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a14      	ldr	r2, [pc, #80]	; (8001548 <HAL_TIM_Base_Start_IT+0x9c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d004      	beq.n	8001504 <HAL_TIM_Base_Start_IT+0x58>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a13      	ldr	r2, [pc, #76]	; (800154c <HAL_TIM_Base_Start_IT+0xa0>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d111      	bne.n	8001528 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b06      	cmp	r3, #6
 8001514:	d010      	beq.n	8001538 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f042 0201 	orr.w	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001526:	e007      	b.n	8001538 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0201 	orr.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40012c00 	.word	0x40012c00
 8001548:	40000400 	.word	0x40000400
 800154c:	40000800 	.word	0x40000800

08001550 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b02      	cmp	r3, #2
 8001564:	d122      	bne.n	80015ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b02      	cmp	r3, #2
 8001572:	d11b      	bne.n	80015ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f06f 0202 	mvn.w	r2, #2
 800157c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f8ed 	bl	8001772 <HAL_TIM_IC_CaptureCallback>
 8001598:	e005      	b.n	80015a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f8e0 	bl	8001760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f8ef 	bl	8001784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d122      	bne.n	8001600 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d11b      	bne.n	8001600 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f06f 0204 	mvn.w	r2, #4
 80015d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2202      	movs	r2, #2
 80015d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f8c3 	bl	8001772 <HAL_TIM_IC_CaptureCallback>
 80015ec:	e005      	b.n	80015fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f8b6 	bl	8001760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f8c5 	bl	8001784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b08      	cmp	r3, #8
 800160c:	d122      	bne.n	8001654 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b08      	cmp	r3, #8
 800161a:	d11b      	bne.n	8001654 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f06f 0208 	mvn.w	r2, #8
 8001624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2204      	movs	r2, #4
 800162a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f899 	bl	8001772 <HAL_TIM_IC_CaptureCallback>
 8001640:	e005      	b.n	800164e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f88c 	bl	8001760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f89b 	bl	8001784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b10      	cmp	r3, #16
 8001660:	d122      	bne.n	80016a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f003 0310 	and.w	r3, r3, #16
 800166c:	2b10      	cmp	r3, #16
 800166e:	d11b      	bne.n	80016a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f06f 0210 	mvn.w	r2, #16
 8001678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2208      	movs	r2, #8
 800167e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f86f 	bl	8001772 <HAL_TIM_IC_CaptureCallback>
 8001694:	e005      	b.n	80016a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f862 	bl	8001760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f871 	bl	8001784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d10e      	bne.n	80016d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d107      	bne.n	80016d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f06f 0201 	mvn.w	r2, #1
 80016cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7fe fe72 	bl	80003b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016de:	2b80      	cmp	r3, #128	; 0x80
 80016e0:	d10e      	bne.n	8001700 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ec:	2b80      	cmp	r3, #128	; 0x80
 80016ee:	d107      	bne.n	8001700 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f8bf 	bl	800187e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170a:	2b40      	cmp	r3, #64	; 0x40
 800170c:	d10e      	bne.n	800172c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001718:	2b40      	cmp	r3, #64	; 0x40
 800171a:	d107      	bne.n	800172c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f835 	bl	8001796 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	f003 0320 	and.w	r3, r3, #32
 8001736:	2b20      	cmp	r3, #32
 8001738:	d10e      	bne.n	8001758 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f003 0320 	and.w	r3, r3, #32
 8001744:	2b20      	cmp	r3, #32
 8001746:	d107      	bne.n	8001758 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f06f 0220 	mvn.w	r2, #32
 8001750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f88a 	bl	800186c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a29      	ldr	r2, [pc, #164]	; (8001860 <TIM_Base_SetConfig+0xb8>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d00b      	beq.n	80017d8 <TIM_Base_SetConfig+0x30>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c6:	d007      	beq.n	80017d8 <TIM_Base_SetConfig+0x30>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a26      	ldr	r2, [pc, #152]	; (8001864 <TIM_Base_SetConfig+0xbc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d003      	beq.n	80017d8 <TIM_Base_SetConfig+0x30>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a25      	ldr	r2, [pc, #148]	; (8001868 <TIM_Base_SetConfig+0xc0>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d108      	bne.n	80017ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a1c      	ldr	r2, [pc, #112]	; (8001860 <TIM_Base_SetConfig+0xb8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d00b      	beq.n	800180a <TIM_Base_SetConfig+0x62>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f8:	d007      	beq.n	800180a <TIM_Base_SetConfig+0x62>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a19      	ldr	r2, [pc, #100]	; (8001864 <TIM_Base_SetConfig+0xbc>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d003      	beq.n	800180a <TIM_Base_SetConfig+0x62>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a18      	ldr	r2, [pc, #96]	; (8001868 <TIM_Base_SetConfig+0xc0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d108      	bne.n	800181c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4313      	orrs	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	4313      	orrs	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a07      	ldr	r2, [pc, #28]	; (8001860 <TIM_Base_SetConfig+0xb8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d103      	bne.n	8001850 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	615a      	str	r2, [r3, #20]
}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	40012c00 	.word	0x40012c00
 8001864:	40000400 	.word	0x40000400
 8001868:	40000800 	.word	0x40000800

0800186c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e033      	b.n	800190a <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d106      	bne.n	80018bc <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7fe fdb6 	bl	8000428 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2202      	movs	r2, #2
 80018c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f90b 	bl	8001ae0 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691a      	ldr	r2, [r3, #16]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018e8:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018f8:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b08a      	sub	sp, #40	; 0x28
 8001916:	af02      	add	r7, sp, #8
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	4613      	mov	r3, r2
 8001920:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d17c      	bne.n	8001a28 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_USART_Transmit+0x28>
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e075      	b.n	8001a2a <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_USART_Transmit+0x3a>
 8001948:	2302      	movs	r3, #2
 800194a:	e06e      	b.n	8001a2a <HAL_USART_Transmit+0x118>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2212      	movs	r2, #18
 800195e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001962:	f7fe fe9d 	bl	80006a0 <HAL_GetTick>
 8001966:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	88fa      	ldrh	r2, [r7, #6]
 800196c:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	88fa      	ldrh	r2, [r7, #6]
 8001972:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800197c:	d108      	bne.n	8001990 <HAL_USART_Transmit+0x7e>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d104      	bne.n	8001990 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	e003      	b.n	8001998 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8001998:	e02a      	b.n	80019f0 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	2200      	movs	r2, #0
 80019a2:	2180      	movs	r1, #128	; 0x80
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 f844 	bl	8001a32 <USART_WaitOnFlagUntilTimeout>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e03a      	b.n	8001a2a <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10b      	bne.n	80019d2 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019c8:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	3302      	adds	r3, #2
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	e007      	b.n	80019e2 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	781a      	ldrb	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	3301      	adds	r3, #1
 80019e0:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	3b01      	subs	r3, #1
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1cf      	bne.n	800199a <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2200      	movs	r2, #0
 8001a02:	2140      	movs	r1, #64	; 0x40
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 f814 	bl	8001a32 <USART_WaitOnFlagUntilTimeout>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e00a      	b.n	8001a2a <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	e000      	b.n	8001a2a <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8001a28:	2302      	movs	r3, #2
  }
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3720      	adds	r7, #32
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001a42:	e038      	b.n	8001ab6 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4a:	d034      	beq.n	8001ab6 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d007      	beq.n	8001a62 <USART_WaitOnFlagUntilTimeout+0x30>
 8001a52:	f7fe fe25 	bl	80006a0 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d229      	bcs.n	8001ab6 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a70:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0220 	bic.w	r2, r2, #32
 8001a80:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a90:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0201 	bic.w	r2, r2, #1
 8001aa0:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e00f      	b.n	8001ad6 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	bf0c      	ite	eq
 8001ac6:	2301      	moveq	r3, #1
 8001ac8:	2300      	movne	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d0b7      	beq.n	8001a44 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 020c 	bic.w	r2, r2, #12
 8001afa:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001b0a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001b14:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001b20:	431a      	orrs	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b2a:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001b42:	f023 030c 	bic.w	r3, r3, #12
 8001b46:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001b74:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a53      	ldr	r2, [pc, #332]	; (8001cc8 <USART_SetConfig+0x1e8>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d14f      	bne.n	8001c20 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b80:	f7ff fbda 	bl	8001338 <HAL_RCC_GetPCLK2Freq>
 8001b84:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009a      	lsls	r2, r3, #2
 8001b90:	441a      	add	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9c:	4a4b      	ldr	r2, [pc, #300]	; (8001ccc <USART_SetConfig+0x1ec>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	095b      	lsrs	r3, r3, #5
 8001ba4:	0119      	lsls	r1, r3, #4
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	009a      	lsls	r2, r3, #2
 8001bb0:	441a      	add	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bbc:	4b43      	ldr	r3, [pc, #268]	; (8001ccc <USART_SetConfig+0x1ec>)
 8001bbe:	fba3 0302 	umull	r0, r3, r3, r2
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2064      	movs	r0, #100	; 0x64
 8001bc6:	fb00 f303 	mul.w	r3, r0, r3
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	3332      	adds	r3, #50	; 0x32
 8001bd0:	4a3e      	ldr	r2, [pc, #248]	; (8001ccc <USART_SetConfig+0x1ec>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8001bde:	4419      	add	r1, r3
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	009a      	lsls	r2, r3, #2
 8001bea:	441a      	add	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bf6:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <USART_SetConfig+0x1ec>)
 8001bf8:	fba3 0302 	umull	r0, r3, r3, r2
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	2064      	movs	r0, #100	; 0x64
 8001c00:	fb00 f303 	mul.w	r3, r0, r3
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	3332      	adds	r3, #50	; 0x32
 8001c0a:	4a30      	ldr	r2, [pc, #192]	; (8001ccc <USART_SetConfig+0x1ec>)
 8001c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c10:	095b      	lsrs	r3, r3, #5
 8001c12:	f003 020f 	and.w	r2, r3, #15
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	440a      	add	r2, r1
 8001c1c:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8001c1e:	e04e      	b.n	8001cbe <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c20:	f7ff fb76 	bl	8001310 <HAL_RCC_GetPCLK1Freq>
 8001c24:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009a      	lsls	r2, r3, #2
 8001c30:	441a      	add	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	4a23      	ldr	r2, [pc, #140]	; (8001ccc <USART_SetConfig+0x1ec>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	0119      	lsls	r1, r3, #4
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009a      	lsls	r2, r3, #2
 8001c50:	441a      	add	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <USART_SetConfig+0x1ec>)
 8001c5e:	fba3 0302 	umull	r0, r3, r3, r2
 8001c62:	095b      	lsrs	r3, r3, #5
 8001c64:	2064      	movs	r0, #100	; 0x64
 8001c66:	fb00 f303 	mul.w	r3, r0, r3
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	3332      	adds	r3, #50	; 0x32
 8001c70:	4a16      	ldr	r2, [pc, #88]	; (8001ccc <USART_SetConfig+0x1ec>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8001c7e:	4419      	add	r1, r3
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	009a      	lsls	r2, r3, #2
 8001c8a:	441a      	add	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <USART_SetConfig+0x1ec>)
 8001c98:	fba3 0302 	umull	r0, r3, r3, r2
 8001c9c:	095b      	lsrs	r3, r3, #5
 8001c9e:	2064      	movs	r0, #100	; 0x64
 8001ca0:	fb00 f303 	mul.w	r3, r0, r3
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	3332      	adds	r3, #50	; 0x32
 8001caa:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <USART_SetConfig+0x1ec>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	095b      	lsrs	r3, r3, #5
 8001cb2:	f003 020f 	and.w	r2, r3, #15
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	440a      	add	r2, r1
 8001cbc:	609a      	str	r2, [r3, #8]
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	51eb851f 	.word	0x51eb851f

08001cd0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001cd4:	4803      	ldr	r0, [pc, #12]	; (8001ce4 <_cbSendSystemDesc+0x14>)
 8001cd6:	f001 f9e7 	bl	80030a8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001cda:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <_cbSendSystemDesc+0x18>)
 8001cdc:	f001 f9e4 	bl	80030a8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	08005b04 	.word	0x08005b04
 8001ce8:	08005b38 	.word	0x08005b38

08001cec <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <SEGGER_SYSVIEW_Conf+0x20>)
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <SEGGER_SYSVIEW_Conf+0x20>)
 8001cf6:	6819      	ldr	r1, [r3, #0]
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SEGGER_SYSVIEW_Conf+0x24>)
 8001cfa:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <SEGGER_SYSVIEW_Conf+0x28>)
 8001cfc:	f000 fd54 	bl	80027a8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001d00:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001d04:	f000 fd94 	bl	8002830 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	08001cd1 	.word	0x08001cd1
 8001d14:	08005c00 	.word	0x08005c00

08001d18 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	e033      	b.n	8001d8c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001d24:	491e      	ldr	r1, [pc, #120]	; (8001da0 <_cbSendTaskList+0x88>)
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	491a      	ldr	r1, [pc, #104]	; (8001da0 <_cbSendTaskList+0x88>)
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	3304      	adds	r3, #4
 8001d44:	6819      	ldr	r1, [r3, #0]
 8001d46:	4c16      	ldr	r4, [pc, #88]	; (8001da0 <_cbSendTaskList+0x88>)
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4423      	add	r3, r4
 8001d54:	3308      	adds	r3, #8
 8001d56:	681c      	ldr	r4, [r3, #0]
 8001d58:	4d11      	ldr	r5, [pc, #68]	; (8001da0 <_cbSendTaskList+0x88>)
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	442b      	add	r3, r5
 8001d66:	330c      	adds	r3, #12
 8001d68:	681d      	ldr	r5, [r3, #0]
 8001d6a:	4e0d      	ldr	r6, [pc, #52]	; (8001da0 <_cbSendTaskList+0x88>)
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4433      	add	r3, r6
 8001d78:	3310      	adds	r3, #16
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	462b      	mov	r3, r5
 8001d80:	4622      	mov	r2, r4
 8001d82:	f000 f8bd 	bl	8001f00 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <_cbSendTaskList+0x8c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d3c6      	bcc.n	8001d24 <_cbSendTaskList+0xc>
  }
}
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da0:	200000c0 	.word	0x200000c0
 8001da4:	20000160 	.word	0x20000160

08001da8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001db0:	f002 fb0c 	bl	80043cc <xTaskGetTickCountFromISR>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2200      	movs	r2, #0
 8001db8:	469a      	mov	sl, r3
 8001dba:	4693      	mov	fp, r2
 8001dbc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001dc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	f04f 0a00 	mov.w	sl, #0
 8001dcc:	f04f 0b00 	mov.w	fp, #0
 8001dd0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001dd4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001dd8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001ddc:	4652      	mov	r2, sl
 8001dde:	465b      	mov	r3, fp
 8001de0:	1a14      	subs	r4, r2, r0
 8001de2:	eb63 0501 	sbc.w	r5, r3, r1
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	00ab      	lsls	r3, r5, #2
 8001df0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001df4:	00a2      	lsls	r2, r4, #2
 8001df6:	4614      	mov	r4, r2
 8001df8:	461d      	mov	r5, r3
 8001dfa:	eb14 0800 	adds.w	r8, r4, r0
 8001dfe:	eb45 0901 	adc.w	r9, r5, r1
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e16:	4690      	mov	r8, r2
 8001e18:	4699      	mov	r9, r3
 8001e1a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001e30 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001e3e:	2205      	movs	r2, #5
 8001e40:	492b      	ldr	r1, [pc, #172]	; (8001ef0 <SYSVIEW_AddTask+0xc0>)
 8001e42:	68b8      	ldr	r0, [r7, #8]
 8001e44:	f003 fde4 	bl	8005a10 <memcmp>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d04b      	beq.n	8001ee6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001e4e:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <SYSVIEW_AddTask+0xc4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b07      	cmp	r3, #7
 8001e54:	d903      	bls.n	8001e5e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001e56:	4828      	ldr	r0, [pc, #160]	; (8001ef8 <SYSVIEW_AddTask+0xc8>)
 8001e58:	f001 fbce 	bl	80035f8 <SEGGER_SYSVIEW_Warn>
    return;
 8001e5c:	e044      	b.n	8001ee8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001e5e:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <SYSVIEW_AddTask+0xc4>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4926      	ldr	r1, [pc, #152]	; (8001efc <SYSVIEW_AddTask+0xcc>)
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001e72:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <SYSVIEW_AddTask+0xc4>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4921      	ldr	r1, [pc, #132]	; (8001efc <SYSVIEW_AddTask+0xcc>)
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3304      	adds	r3, #4
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001e88:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <SYSVIEW_AddTask+0xc4>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	491b      	ldr	r1, [pc, #108]	; (8001efc <SYSVIEW_AddTask+0xcc>)
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	3308      	adds	r3, #8
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001e9e:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <SYSVIEW_AddTask+0xc4>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4916      	ldr	r1, [pc, #88]	; (8001efc <SYSVIEW_AddTask+0xcc>)
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	330c      	adds	r3, #12
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <SYSVIEW_AddTask+0xc4>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4910      	ldr	r1, [pc, #64]	; (8001efc <SYSVIEW_AddTask+0xcc>)
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	3310      	adds	r3, #16
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <SYSVIEW_AddTask+0xc4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	4a08      	ldr	r2, [pc, #32]	; (8001ef4 <SYSVIEW_AddTask+0xc4>)
 8001ed2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f80e 	bl	8001f00 <SYSVIEW_SendTaskInfo>
 8001ee4:	e000      	b.n	8001ee8 <SYSVIEW_AddTask+0xb8>
    return;
 8001ee6:	bf00      	nop

}
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	08005b48 	.word	0x08005b48
 8001ef4:	20000160 	.word	0x20000160
 8001ef8:	08005b50 	.word	0x08005b50
 8001efc:	200000c0 	.word	0x200000c0

08001f00 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	2214      	movs	r2, #20
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 fd8a 	bl	8005a30 <memset>
  TaskInfo.TaskID     = TaskID;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 ffbf 	bl	8002eb8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001f3a:	bf00      	nop
 8001f3c:	3728      	adds	r7, #40	; 0x28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001f4a:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <_DoInit+0x9c>)
 8001f4c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8001f4e:	22a8      	movs	r2, #168	; 0xa8
 8001f50:	2100      	movs	r1, #0
 8001f52:	6838      	ldr	r0, [r7, #0]
 8001f54:	f003 fd6c 	bl	8005a30 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2203      	movs	r2, #3
 8001f62:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	4a1f      	ldr	r2, [pc, #124]	; (8001fe4 <_DoInit+0xa0>)
 8001f68:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	4a1e      	ldr	r2, [pc, #120]	; (8001fe8 <_DoInit+0xa4>)
 8001f6e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f76:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2200      	movs	r2, #0
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2200      	movs	r2, #0
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <_DoInit+0xa0>)
 8001f8e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4a16      	ldr	r2, [pc, #88]	; (8001fec <_DoInit+0xa8>)
 8001f94:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2210      	movs	r2, #16
 8001f9a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2200      	movs	r2, #0
 8001fac:	675a      	str	r2, [r3, #116]	; 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	e00c      	b.n	8001fce <_DoInit+0x8a>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f1c3 030f 	rsb	r3, r3, #15
 8001fba:	4a0d      	ldr	r2, [pc, #52]	; (8001ff0 <_DoInit+0xac>)
 8001fbc:	5cd1      	ldrb	r1, [r2, r3]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	460a      	mov	r2, r1
 8001fc6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b0f      	cmp	r3, #15
 8001fd2:	d9ef      	bls.n	8001fb4 <_DoInit+0x70>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000164 	.word	0x20000164
 8001fe4:	08005ba0 	.word	0x08005ba0
 8001fe8:	2000020c 	.word	0x2000020c
 8001fec:	2000060c 	.word	0x2000060c
 8001ff0:	08005c08 	.word	0x08005c08

08001ff4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08c      	sub	sp, #48	; 0x30
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002000:	4b3e      	ldr	r3, [pc, #248]	; (80020fc <SEGGER_RTT_ReadNoLock+0x108>)
 8002002:	623b      	str	r3, [r7, #32]
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b53      	cmp	r3, #83	; 0x53
 800200c:	d001      	beq.n	8002012 <SEGGER_RTT_ReadNoLock+0x1e>
 800200e:	f7ff ff99 	bl	8001f44 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	3360      	adds	r3, #96	; 0x60
 800201e:	4a37      	ldr	r2, [pc, #220]	; (80020fc <SEGGER_RTT_ReadNoLock+0x108>)
 8002020:	4413      	add	r3, r2
 8002022:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002034:	2300      	movs	r3, #0
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	429a      	cmp	r2, r3
 800203e:	d92b      	bls.n	8002098 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4293      	cmp	r3, r2
 8002050:	bf28      	it	cs
 8002052:	4613      	movcs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205c:	4413      	add	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	6939      	ldr	r1, [r7, #16]
 8002064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002066:	f003 fd0f 	bl	8005a88 <memcpy>
    NumBytesRead += NumBytesRem;
 800206a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	4413      	add	r3, r2
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	4413      	add	r3, r2
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	4413      	add	r3, r2
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002090:	429a      	cmp	r2, r3
 8002092:	d101      	bne.n	8002098 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002094:	2300      	movs	r3, #0
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4293      	cmp	r3, r2
 80020a6:	bf28      	it	cs
 80020a8:	4613      	movcs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d019      	beq.n	80020e6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b8:	4413      	add	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	6939      	ldr	r1, [r7, #16]
 80020c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020c2:	f003 fce1 	bl	8005a88 <memcpy>
    NumBytesRead += NumBytesRem;
 80020c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	4413      	add	r3, r2
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80020ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	4413      	add	r3, r2
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80020de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	4413      	add	r3, r2
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020f0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80020f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3730      	adds	r7, #48	; 0x30
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000164 	.word	0x20000164

08002100 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800210e:	4b3c      	ldr	r3, [pc, #240]	; (8002200 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b53      	cmp	r3, #83	; 0x53
 800211a:	d001      	beq.n	8002120 <SEGGER_RTT_AllocUpBuffer+0x20>
 800211c:	f7ff ff12 	bl	8001f44 <_DoInit>
  SEGGER_RTT_LOCK();
 8002120:	f3ef 8311 	mrs	r3, BASEPRI
 8002124:	f04f 0120 	mov.w	r1, #32
 8002128:	f381 8811 	msr	BASEPRI, r1
 800212c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800212e:	4b34      	ldr	r3, [pc, #208]	; (8002200 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8002130:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8002136:	6939      	ldr	r1, [r7, #16]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	440b      	add	r3, r1
 8002146:	3304      	adds	r3, #4
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3301      	adds	r3, #1
 8002152:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	429a      	cmp	r2, r3
 800215c:	dbeb      	blt.n	8002136 <SEGGER_RTT_AllocUpBuffer+0x36>
 800215e:	e000      	b.n	8002162 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002160:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	429a      	cmp	r2, r3
 800216a:	da3d      	bge.n	80021e8 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800216c:	6939      	ldr	r1, [r7, #16]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002180:	6939      	ldr	r1, [r7, #16]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	4613      	mov	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4413      	add	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	440b      	add	r3, r1
 8002190:	3304      	adds	r3, #4
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002196:	6939      	ldr	r1, [r7, #16]
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	3320      	adds	r3, #32
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80021aa:	6939      	ldr	r1, [r7, #16]
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	440b      	add	r3, r1
 80021b8:	3328      	adds	r3, #40	; 0x28
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80021be:	6939      	ldr	r1, [r7, #16]
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	440b      	add	r3, r1
 80021cc:	3324      	adds	r3, #36	; 0x24
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80021d2:	6939      	ldr	r1, [r7, #16]
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	4613      	mov	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	332c      	adds	r3, #44	; 0x2c
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e002      	b.n	80021ee <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 80021e8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ec:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80021f4:	69fb      	ldr	r3, [r7, #28]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000164 	.word	0x20000164

08002204 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8002212:	4b20      	ldr	r3, [pc, #128]	; (8002294 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8002214:	623b      	str	r3, [r7, #32]
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b53      	cmp	r3, #83	; 0x53
 800221e:	d001      	beq.n	8002224 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002220:	f7ff fe90 	bl	8001f44 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8002226:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d82a      	bhi.n	8002284 <SEGGER_RTT_ConfigDownBuffer+0x80>
    SEGGER_RTT_LOCK();
 800222e:	f3ef 8311 	mrs	r3, BASEPRI
 8002232:	f04f 0120 	mov.w	r1, #32
 8002236:	f381 8811 	msr	BASEPRI, r1
 800223a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	3360      	adds	r3, #96	; 0x60
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	4413      	add	r3, r2
 800224c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00e      	beq.n	8002272 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2200      	movs	r2, #0
 8002270:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002276:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	e002      	b.n	800228a <SEGGER_RTT_ConfigDownBuffer+0x86>
  } else {
    r = -1;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800228c:	4618      	mov	r0, r3
 800228e:	3728      	adds	r7, #40	; 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000164 	.word	0x20000164

08002298 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	60fa      	str	r2, [r7, #12]
 80022ae:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b80      	cmp	r3, #128	; 0x80
 80022b4:	d90a      	bls.n	80022cc <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80022ba:	e007      	b.n	80022cc <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	1c53      	adds	r3, r2, #1
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1c59      	adds	r1, r3, #1
 80022c6:	60f9      	str	r1, [r7, #12]
 80022c8:	7812      	ldrb	r2, [r2, #0]
 80022ca:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	1e5a      	subs	r2, r3, #1
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <_EncodeStr+0x46>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1ee      	bne.n	80022bc <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	371c      	adds	r7, #28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3307      	adds	r3, #7
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002312:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <_HandleIncomingPacket+0xd8>)
 8002314:	7e1b      	ldrb	r3, [r3, #24]
 8002316:	4618      	mov	r0, r3
 8002318:	1cfb      	adds	r3, r7, #3
 800231a:	2201      	movs	r2, #1
 800231c:	4619      	mov	r1, r3
 800231e:	f7ff fe69 	bl	8001ff4 <SEGGER_RTT_ReadNoLock>
 8002322:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d057      	beq.n	80023da <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	2b80      	cmp	r3, #128	; 0x80
 800232e:	d031      	beq.n	8002394 <_HandleIncomingPacket+0x88>
 8002330:	2b80      	cmp	r3, #128	; 0x80
 8002332:	dc40      	bgt.n	80023b6 <_HandleIncomingPacket+0xaa>
 8002334:	2b07      	cmp	r3, #7
 8002336:	dc15      	bgt.n	8002364 <_HandleIncomingPacket+0x58>
 8002338:	2b00      	cmp	r3, #0
 800233a:	dd3c      	ble.n	80023b6 <_HandleIncomingPacket+0xaa>
 800233c:	3b01      	subs	r3, #1
 800233e:	2b06      	cmp	r3, #6
 8002340:	d839      	bhi.n	80023b6 <_HandleIncomingPacket+0xaa>
 8002342:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <_HandleIncomingPacket+0x3c>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	0800236b 	.word	0x0800236b
 800234c:	08002371 	.word	0x08002371
 8002350:	08002377 	.word	0x08002377
 8002354:	0800237d 	.word	0x0800237d
 8002358:	08002383 	.word	0x08002383
 800235c:	08002389 	.word	0x08002389
 8002360:	0800238f 	.word	0x0800238f
 8002364:	2b7f      	cmp	r3, #127	; 0x7f
 8002366:	d033      	beq.n	80023d0 <_HandleIncomingPacket+0xc4>
 8002368:	e025      	b.n	80023b6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800236a:	f000 fc2b 	bl	8002bc4 <SEGGER_SYSVIEW_Start>
      break;
 800236e:	e034      	b.n	80023da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002370:	f000 fce2 	bl	8002d38 <SEGGER_SYSVIEW_Stop>
      break;
 8002374:	e031      	b.n	80023da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002376:	f000 febb 	bl	80030f0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800237a:	e02e      	b.n	80023da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800237c:	f000 fe80 	bl	8003080 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002380:	e02b      	b.n	80023da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002382:	f000 fcff 	bl	8002d84 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002386:	e028      	b.n	80023da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002388:	f001 f8f8 	bl	800357c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800238c:	e025      	b.n	80023da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800238e:	f001 f8d7 	bl	8003540 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002392:	e022      	b.n	80023da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <_HandleIncomingPacket+0xd8>)
 8002396:	7e1b      	ldrb	r3, [r3, #24]
 8002398:	4618      	mov	r0, r3
 800239a:	1cfb      	adds	r3, r7, #3
 800239c:	2201      	movs	r2, #1
 800239e:	4619      	mov	r1, r3
 80023a0:	f7ff fe28 	bl	8001ff4 <SEGGER_RTT_ReadNoLock>
 80023a4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d013      	beq.n	80023d4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f001 f83c 	bl	800342c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80023b4:	e00e      	b.n	80023d4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	da0c      	bge.n	80023d8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <_HandleIncomingPacket+0xd8>)
 80023c0:	7e1b      	ldrb	r3, [r3, #24]
 80023c2:	4618      	mov	r0, r3
 80023c4:	1cfb      	adds	r3, r7, #3
 80023c6:	2201      	movs	r2, #1
 80023c8:	4619      	mov	r1, r3
 80023ca:	f7ff fe13 	bl	8001ff4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80023ce:	e003      	b.n	80023d8 <_HandleIncomingPacket+0xcc>
      break;
 80023d0:	bf00      	nop
 80023d2:	e002      	b.n	80023da <_HandleIncomingPacket+0xce>
      break;
 80023d4:	bf00      	nop
 80023d6:	e000      	b.n	80023da <_HandleIncomingPacket+0xce>
      break;
 80023d8:	bf00      	nop
    }
  }
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20001624 	.word	0x20001624

080023e8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08c      	sub	sp, #48	; 0x30
 80023ec:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80023ee:	2301      	movs	r3, #1
 80023f0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	3301      	adds	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fc:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <_TrySendOverflowPacket+0xdc>)
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
 8002402:	e00b      	b.n	800241c <_TrySendOverflowPacket+0x34>
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002406:	b2da      	uxtb	r2, r3
 8002408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240a:	1c59      	adds	r1, r3, #1
 800240c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800240e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	09db      	lsrs	r3, r3, #7
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	2b7f      	cmp	r3, #127	; 0x7f
 8002420:	d8f0      	bhi.n	8002404 <_TrySendOverflowPacket+0x1c>
 8002422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002430:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002432:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <_TrySendOverflowPacket+0xe0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002438:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <_TrySendOverflowPacket+0xdc>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	623b      	str	r3, [r7, #32]
 800244a:	e00b      	b.n	8002464 <_TrySendOverflowPacket+0x7c>
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	1c59      	adds	r1, r3, #1
 8002454:	6279      	str	r1, [r7, #36]	; 0x24
 8002456:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	09db      	lsrs	r3, r3, #7
 8002462:	623b      	str	r3, [r7, #32]
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	2b7f      	cmp	r3, #127	; 0x7f
 8002468:	d8f0      	bhi.n	800244c <_TrySendOverflowPacket+0x64>
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	627a      	str	r2, [r7, #36]	; 0x24
 8002470:	6a3a      	ldr	r2, [r7, #32]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <_TrySendOverflowPacket+0xdc>)
 800247c:	785b      	ldrb	r3, [r3, #1]
 800247e:	4618      	mov	r0, r3
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	461a      	mov	r2, r3
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	4619      	mov	r1, r3
 800248c:	f7fd fe60 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002490:	4603      	mov	r3, r0
 8002492:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <_TrySendOverflowPacket+0xdc>)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <_TrySendOverflowPacket+0xdc>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <_TrySendOverflowPacket+0xdc>)
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	e004      	b.n	80024b8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <_TrySendOverflowPacket+0xdc>)
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	3301      	adds	r3, #1
 80024b4:	4a03      	ldr	r2, [pc, #12]	; (80024c4 <_TrySendOverflowPacket+0xdc>)
 80024b6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80024b8:	693b      	ldr	r3, [r7, #16]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3730      	adds	r7, #48	; 0x30
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20001624 	.word	0x20001624
 80024c8:	e0001004 	.word	0xe0001004

080024cc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80024d8:	4b98      	ldr	r3, [pc, #608]	; (800273c <_SendPacket+0x270>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d010      	beq.n	8002502 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80024e0:	4b96      	ldr	r3, [pc, #600]	; (800273c <_SendPacket+0x270>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 812d 	beq.w	8002744 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80024ea:	4b94      	ldr	r3, [pc, #592]	; (800273c <_SendPacket+0x270>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d109      	bne.n	8002506 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80024f2:	f7ff ff79 	bl	80023e8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80024f6:	4b91      	ldr	r3, [pc, #580]	; (800273c <_SendPacket+0x270>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	f040 8124 	bne.w	8002748 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8002500:	e001      	b.n	8002506 <_SendPacket+0x3a>
    goto Send;
 8002502:	bf00      	nop
 8002504:	e000      	b.n	8002508 <_SendPacket+0x3c>
Send:
 8002506:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b1f      	cmp	r3, #31
 800250c:	d809      	bhi.n	8002522 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800250e:	4b8b      	ldr	r3, [pc, #556]	; (800273c <_SendPacket+0x270>)
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	f040 8115 	bne.w	800274c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b17      	cmp	r3, #23
 8002526:	d807      	bhi.n	8002538 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3b01      	subs	r3, #1
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	e0c4      	b.n	80026c2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b7f      	cmp	r3, #127	; 0x7f
 8002544:	d912      	bls.n	800256c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	09da      	lsrs	r2, r3, #7
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3b01      	subs	r3, #1
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	3a01      	subs	r2, #1
 800255e:	60fa      	str	r2, [r7, #12]
 8002560:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002564:	b2da      	uxtb	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e006      	b.n	800257a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3b01      	subs	r3, #1
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b7e      	cmp	r3, #126	; 0x7e
 800257e:	d807      	bhi.n	8002590 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3b01      	subs	r3, #1
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	e098      	b.n	80026c2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002596:	d212      	bcs.n	80025be <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	09da      	lsrs	r2, r3, #7
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3b01      	subs	r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	3a01      	subs	r2, #1
 80025b0:	60fa      	str	r2, [r7, #12]
 80025b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	e081      	b.n	80026c2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025c4:	d21d      	bcs.n	8002602 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	0b9a      	lsrs	r2, r3, #14
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	09db      	lsrs	r3, r3, #7
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	3a01      	subs	r2, #1
 80025e0:	60fa      	str	r2, [r7, #12]
 80025e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	3a01      	subs	r2, #1
 80025f4:	60fa      	str	r2, [r7, #12]
 80025f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e05f      	b.n	80026c2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002608:	d228      	bcs.n	800265c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	0d5a      	lsrs	r2, r3, #21
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	3b01      	subs	r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	0b9b      	lsrs	r3, r3, #14
 800261e:	b2db      	uxtb	r3, r3
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	3a01      	subs	r2, #1
 8002624:	60fa      	str	r2, [r7, #12]
 8002626:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800262a:	b2da      	uxtb	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	09db      	lsrs	r3, r3, #7
 8002634:	b2db      	uxtb	r3, r3
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	3a01      	subs	r2, #1
 800263a:	60fa      	str	r2, [r7, #12]
 800263c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002640:	b2da      	uxtb	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	3a01      	subs	r2, #1
 800264e:	60fa      	str	r2, [r7, #12]
 8002650:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002654:	b2da      	uxtb	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e032      	b.n	80026c2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	0f1a      	lsrs	r2, r3, #28
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	3b01      	subs	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	0d5b      	lsrs	r3, r3, #21
 8002670:	b2db      	uxtb	r3, r3
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	3a01      	subs	r2, #1
 8002676:	60fa      	str	r2, [r7, #12]
 8002678:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800267c:	b2da      	uxtb	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	0b9b      	lsrs	r3, r3, #14
 8002686:	b2db      	uxtb	r3, r3
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	3a01      	subs	r2, #1
 800268c:	60fa      	str	r2, [r7, #12]
 800268e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002692:	b2da      	uxtb	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	09db      	lsrs	r3, r3, #7
 800269c:	b2db      	uxtb	r3, r3
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	3a01      	subs	r2, #1
 80026a2:	60fa      	str	r2, [r7, #12]
 80026a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	3a01      	subs	r2, #1
 80026b6:	60fa      	str	r2, [r7, #12]
 80026b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80026c2:	4b1f      	ldr	r3, [pc, #124]	; (8002740 <_SendPacket+0x274>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80026c8:	4b1c      	ldr	r3, [pc, #112]	; (800273c <_SendPacket+0x270>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	623b      	str	r3, [r7, #32]
 80026da:	e00b      	b.n	80026f4 <_SendPacket+0x228>
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	1c59      	adds	r1, r3, #1
 80026e4:	6279      	str	r1, [r7, #36]	; 0x24
 80026e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	09db      	lsrs	r3, r3, #7
 80026f2:	623b      	str	r3, [r7, #32]
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	2b7f      	cmp	r3, #127	; 0x7f
 80026f8:	d8f0      	bhi.n	80026dc <_SendPacket+0x210>
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	627a      	str	r2, [r7, #36]	; 0x24
 8002700:	6a3a      	ldr	r2, [r7, #32]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <_SendPacket+0x270>)
 800270c:	785b      	ldrb	r3, [r3, #1]
 800270e:	4618      	mov	r0, r3
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	461a      	mov	r2, r3
 8002718:	68f9      	ldr	r1, [r7, #12]
 800271a:	f7fd fd19 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800271e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <_SendPacket+0x270>)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	60d3      	str	r3, [r2, #12]
 800272c:	e00f      	b.n	800274e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800272e:	4b03      	ldr	r3, [pc, #12]	; (800273c <_SendPacket+0x270>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	3301      	adds	r3, #1
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b01      	ldr	r3, [pc, #4]	; (800273c <_SendPacket+0x270>)
 8002738:	701a      	strb	r2, [r3, #0]
 800273a:	e008      	b.n	800274e <_SendPacket+0x282>
 800273c:	20001624 	.word	0x20001624
 8002740:	e0001004 	.word	0xe0001004
    goto SendDone;
 8002744:	bf00      	nop
 8002746:	e002      	b.n	800274e <_SendPacket+0x282>
      goto SendDone;
 8002748:	bf00      	nop
 800274a:	e000      	b.n	800274e <_SendPacket+0x282>
      goto SendDone;
 800274c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800274e:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <_SendPacket+0x2d4>)
 8002750:	7e1b      	ldrb	r3, [r3, #24]
 8002752:	4619      	mov	r1, r3
 8002754:	4a13      	ldr	r2, [pc, #76]	; (80027a4 <_SendPacket+0x2d8>)
 8002756:	460b      	mov	r3, r1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	440b      	add	r3, r1
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	336c      	adds	r3, #108	; 0x6c
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <_SendPacket+0x2d4>)
 8002766:	7e1b      	ldrb	r3, [r3, #24]
 8002768:	4618      	mov	r0, r3
 800276a:	490e      	ldr	r1, [pc, #56]	; (80027a4 <_SendPacket+0x2d8>)
 800276c:	4603      	mov	r3, r0
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4403      	add	r3, r0
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	440b      	add	r3, r1
 8002776:	3370      	adds	r3, #112	; 0x70
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d00b      	beq.n	8002796 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <_SendPacket+0x2d4>)
 8002780:	789b      	ldrb	r3, [r3, #2]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d107      	bne.n	8002796 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <_SendPacket+0x2d4>)
 8002788:	2201      	movs	r2, #1
 800278a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800278c:	f7ff fdbe 	bl	800230c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <_SendPacket+0x2d4>)
 8002792:	2200      	movs	r2, #0
 8002794:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002796:	bf00      	nop
 8002798:	3728      	adds	r7, #40	; 0x28
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20001624 	.word	0x20001624
 80027a4:	20000164 	.word	0x20000164

080027a8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80027b6:	2300      	movs	r3, #0
 80027b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027bc:	4917      	ldr	r1, [pc, #92]	; (800281c <SEGGER_SYSVIEW_Init+0x74>)
 80027be:	4818      	ldr	r0, [pc, #96]	; (8002820 <SEGGER_SYSVIEW_Init+0x78>)
 80027c0:	f7ff fc9e 	bl	8002100 <SEGGER_RTT_AllocUpBuffer>
 80027c4:	4603      	mov	r3, r0
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	4b16      	ldr	r3, [pc, #88]	; (8002824 <SEGGER_SYSVIEW_Init+0x7c>)
 80027ca:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <SEGGER_SYSVIEW_Init+0x7c>)
 80027ce:	785a      	ldrb	r2, [r3, #1]
 80027d0:	4b14      	ldr	r3, [pc, #80]	; (8002824 <SEGGER_SYSVIEW_Init+0x7c>)
 80027d2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <SEGGER_SYSVIEW_Init+0x7c>)
 80027d6:	7e1b      	ldrb	r3, [r3, #24]
 80027d8:	4618      	mov	r0, r3
 80027da:	2300      	movs	r3, #0
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2308      	movs	r3, #8
 80027e0:	4a11      	ldr	r2, [pc, #68]	; (8002828 <SEGGER_SYSVIEW_Init+0x80>)
 80027e2:	490f      	ldr	r1, [pc, #60]	; (8002820 <SEGGER_SYSVIEW_Init+0x78>)
 80027e4:	f7ff fd0e 	bl	8002204 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <SEGGER_SYSVIEW_Init+0x7c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80027ee:	4b0f      	ldr	r3, [pc, #60]	; (800282c <SEGGER_SYSVIEW_Init+0x84>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <SEGGER_SYSVIEW_Init+0x7c>)
 80027f4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80027f6:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <SEGGER_SYSVIEW_Init+0x7c>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80027fc:	4a09      	ldr	r2, [pc, #36]	; (8002824 <SEGGER_SYSVIEW_Init+0x7c>)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002802:	4a08      	ldr	r2, [pc, #32]	; (8002824 <SEGGER_SYSVIEW_Init+0x7c>)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8002808:	4a06      	ldr	r2, [pc, #24]	; (8002824 <SEGGER_SYSVIEW_Init+0x7c>)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800280e:	4b05      	ldr	r3, [pc, #20]	; (8002824 <SEGGER_SYSVIEW_Init+0x7c>)
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002814:	bf00      	nop
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	2000061c 	.word	0x2000061c
 8002820:	08005bb4 	.word	0x08005bb4
 8002824:	20001624 	.word	0x20001624
 8002828:	2000161c 	.word	0x2000161c
 800282c:	e0001004 	.word	0xe0001004

08002830 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002838:	4a03      	ldr	r2, [pc, #12]	; (8002848 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6113      	str	r3, [r2, #16]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	20001624 	.word	0x20001624

0800284c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002854:	f3ef 8311 	mrs	r3, BASEPRI
 8002858:	f04f 0120 	mov.w	r1, #32
 800285c:	f381 8811 	msr	BASEPRI, r1
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	4808      	ldr	r0, [pc, #32]	; (8002884 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002864:	f7ff fd47 	bl	80022f6 <_PreparePacket>
 8002868:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	68b8      	ldr	r0, [r7, #8]
 8002870:	f7ff fe2c 	bl	80024cc <_SendPacket>
  RECORD_END();
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f383 8811 	msr	BASEPRI, r3
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20001654 	.word	0x20001654

08002888 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002892:	f3ef 8311 	mrs	r3, BASEPRI
 8002896:	f04f 0120 	mov.w	r1, #32
 800289a:	f381 8811 	msr	BASEPRI, r1
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	4816      	ldr	r0, [pc, #88]	; (80028fc <SEGGER_SYSVIEW_RecordU32+0x74>)
 80028a2:	f7ff fd28 	bl	80022f6 <_PreparePacket>
 80028a6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	e00b      	b.n	80028ce <SEGGER_SYSVIEW_RecordU32+0x46>
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	1c59      	adds	r1, r3, #1
 80028be:	61f9      	str	r1, [r7, #28]
 80028c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	09db      	lsrs	r3, r3, #7
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b7f      	cmp	r3, #127	; 0x7f
 80028d2:	d8f0      	bhi.n	80028b6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	61fa      	str	r2, [r7, #28]
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	68f9      	ldr	r1, [r7, #12]
 80028e8:	6938      	ldr	r0, [r7, #16]
 80028ea:	f7ff fdef 	bl	80024cc <_SendPacket>
  RECORD_END();
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f383 8811 	msr	BASEPRI, r3
}
 80028f4:	bf00      	nop
 80028f6:	3720      	adds	r7, #32
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20001654 	.word	0x20001654

08002900 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b08c      	sub	sp, #48	; 0x30
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800290c:	f3ef 8311 	mrs	r3, BASEPRI
 8002910:	f04f 0120 	mov.w	r1, #32
 8002914:	f381 8811 	msr	BASEPRI, r1
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	4825      	ldr	r0, [pc, #148]	; (80029b0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800291c:	f7ff fceb 	bl	80022f6 <_PreparePacket>
 8002920:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
 800292e:	e00b      	b.n	8002948 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	b2da      	uxtb	r2, r3
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002936:	1c59      	adds	r1, r3, #1
 8002938:	62f9      	str	r1, [r7, #44]	; 0x2c
 800293a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	09db      	lsrs	r3, r3, #7
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	2b7f      	cmp	r3, #127	; 0x7f
 800294c:	d8f0      	bhi.n	8002930 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	623b      	str	r3, [r7, #32]
 8002966:	e00b      	b.n	8002980 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	b2da      	uxtb	r2, r3
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	1c59      	adds	r1, r3, #1
 8002970:	6279      	str	r1, [r7, #36]	; 0x24
 8002972:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	09db      	lsrs	r3, r3, #7
 800297e:	623b      	str	r3, [r7, #32]
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	2b7f      	cmp	r3, #127	; 0x7f
 8002984:	d8f0      	bhi.n	8002968 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	627a      	str	r2, [r7, #36]	; 0x24
 800298c:	6a3a      	ldr	r2, [r7, #32]
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	6979      	ldr	r1, [r7, #20]
 800299a:	69b8      	ldr	r0, [r7, #24]
 800299c:	f7ff fd96 	bl	80024cc <_SendPacket>
  RECORD_END();
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f383 8811 	msr	BASEPRI, r3
}
 80029a6:	bf00      	nop
 80029a8:	3730      	adds	r7, #48	; 0x30
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20001654 	.word	0x20001654

080029b4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08e      	sub	sp, #56	; 0x38
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80029c2:	f3ef 8311 	mrs	r3, BASEPRI
 80029c6:	f04f 0120 	mov.w	r1, #32
 80029ca:	f381 8811 	msr	BASEPRI, r1
 80029ce:	61fb      	str	r3, [r7, #28]
 80029d0:	4832      	ldr	r0, [pc, #200]	; (8002a9c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80029d2:	f7ff fc90 	bl	80022f6 <_PreparePacket>
 80029d6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	637b      	str	r3, [r7, #52]	; 0x34
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	633b      	str	r3, [r7, #48]	; 0x30
 80029e4:	e00b      	b.n	80029fe <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ec:	1c59      	adds	r1, r3, #1
 80029ee:	6379      	str	r1, [r7, #52]	; 0x34
 80029f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	701a      	strb	r2, [r3, #0]
 80029f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fa:	09db      	lsrs	r3, r3, #7
 80029fc:	633b      	str	r3, [r7, #48]	; 0x30
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	2b7f      	cmp	r3, #127	; 0x7f
 8002a02:	d8f0      	bhi.n	80029e6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8002a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	637a      	str	r2, [r7, #52]	; 0x34
 8002a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]
 8002a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a1c:	e00b      	b.n	8002a36 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	1c59      	adds	r1, r3, #1
 8002a26:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002a28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a32:	09db      	lsrs	r3, r3, #7
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	2b7f      	cmp	r3, #127	; 0x7f
 8002a3a:	d8f0      	bhi.n	8002a1e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8002a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]
 8002a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	623b      	str	r3, [r7, #32]
 8002a54:	e00b      	b.n	8002a6e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	1c59      	adds	r1, r3, #1
 8002a5e:	6279      	str	r1, [r7, #36]	; 0x24
 8002a60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	09db      	lsrs	r3, r3, #7
 8002a6c:	623b      	str	r3, [r7, #32]
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	2b7f      	cmp	r3, #127	; 0x7f
 8002a72:	d8f0      	bhi.n	8002a56 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	627a      	str	r2, [r7, #36]	; 0x24
 8002a7a:	6a3a      	ldr	r2, [r7, #32]
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	6979      	ldr	r1, [r7, #20]
 8002a88:	69b8      	ldr	r0, [r7, #24]
 8002a8a:	f7ff fd1f 	bl	80024cc <_SendPacket>
  RECORD_END();
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f383 8811 	msr	BASEPRI, r3
}
 8002a94:	bf00      	nop
 8002a96:	3738      	adds	r7, #56	; 0x38
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20001654 	.word	0x20001654

08002aa0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b090      	sub	sp, #64	; 0x40
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002aae:	f3ef 8311 	mrs	r3, BASEPRI
 8002ab2:	f04f 0120 	mov.w	r1, #32
 8002ab6:	f381 8811 	msr	BASEPRI, r1
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	4840      	ldr	r0, [pc, #256]	; (8002bc0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8002abe:	f7ff fc1a 	bl	80022f6 <_PreparePacket>
 8002ac2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ad0:	e00b      	b.n	8002aea <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8002ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad8:	1c59      	adds	r1, r3, #1
 8002ada:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002adc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	701a      	strb	r2, [r3, #0]
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae6:	09db      	lsrs	r3, r3, #7
 8002ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aec:	2b7f      	cmp	r3, #127	; 0x7f
 8002aee:	d8f0      	bhi.n	8002ad2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8002af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002af6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002afe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	637b      	str	r3, [r7, #52]	; 0x34
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
 8002b08:	e00b      	b.n	8002b22 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b10:	1c59      	adds	r1, r3, #1
 8002b12:	6379      	str	r1, [r7, #52]	; 0x34
 8002b14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	09db      	lsrs	r3, r3, #7
 8002b20:	633b      	str	r3, [r7, #48]	; 0x30
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	2b7f      	cmp	r3, #127	; 0x7f
 8002b26:	d8f0      	bhi.n	8002b0a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8002b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	637a      	str	r2, [r7, #52]	; 0x34
 8002b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b40:	e00b      	b.n	8002b5a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	1c59      	adds	r1, r3, #1
 8002b4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002b4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b56:	09db      	lsrs	r3, r3, #7
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8002b5e:	d8f0      	bhi.n	8002b42 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8002b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	701a      	strb	r2, [r3, #0]
 8002b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
 8002b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b76:	623b      	str	r3, [r7, #32]
 8002b78:	e00b      	b.n	8002b92 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	1c59      	adds	r1, r3, #1
 8002b82:	6279      	str	r1, [r7, #36]	; 0x24
 8002b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	701a      	strb	r2, [r3, #0]
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	09db      	lsrs	r3, r3, #7
 8002b90:	623b      	str	r3, [r7, #32]
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	2b7f      	cmp	r3, #127	; 0x7f
 8002b96:	d8f0      	bhi.n	8002b7a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	627a      	str	r2, [r7, #36]	; 0x24
 8002b9e:	6a3a      	ldr	r2, [r7, #32]
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	6979      	ldr	r1, [r7, #20]
 8002bac:	69b8      	ldr	r0, [r7, #24]
 8002bae:	f7ff fc8d 	bl	80024cc <_SendPacket>
  RECORD_END();
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f383 8811 	msr	BASEPRI, r3
}
 8002bb8:	bf00      	nop
 8002bba:	3740      	adds	r7, #64	; 0x40
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20001654 	.word	0x20001654

08002bc4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08c      	sub	sp, #48	; 0x30
 8002bc8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8002bca:	4b58      	ldr	r3, [pc, #352]	; (8002d2c <SEGGER_SYSVIEW_Start+0x168>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002bd0:	f3ef 8311 	mrs	r3, BASEPRI
 8002bd4:	f04f 0120 	mov.w	r1, #32
 8002bd8:	f381 8811 	msr	BASEPRI, r1
 8002bdc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002bde:	4b53      	ldr	r3, [pc, #332]	; (8002d2c <SEGGER_SYSVIEW_Start+0x168>)
 8002be0:	785b      	ldrb	r3, [r3, #1]
 8002be2:	220a      	movs	r2, #10
 8002be4:	4952      	ldr	r1, [pc, #328]	; (8002d30 <SEGGER_SYSVIEW_Start+0x16c>)
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fab2 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002bf2:	200a      	movs	r0, #10
 8002bf4:	f7ff fe2a 	bl	800284c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002bf8:	f3ef 8311 	mrs	r3, BASEPRI
 8002bfc:	f04f 0120 	mov.w	r1, #32
 8002c00:	f381 8811 	msr	BASEPRI, r1
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	484b      	ldr	r0, [pc, #300]	; (8002d34 <SEGGER_SYSVIEW_Start+0x170>)
 8002c08:	f7ff fb75 	bl	80022f6 <_PreparePacket>
 8002c0c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c16:	4b45      	ldr	r3, [pc, #276]	; (8002d2c <SEGGER_SYSVIEW_Start+0x168>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c1c:	e00b      	b.n	8002c36 <SEGGER_SYSVIEW_Start+0x72>
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	1c59      	adds	r1, r3, #1
 8002c26:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c32:	09db      	lsrs	r3, r3, #7
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	2b7f      	cmp	r3, #127	; 0x7f
 8002c3a:	d8f0      	bhi.n	8002c1e <SEGGER_SYSVIEW_Start+0x5a>
 8002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c50:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <SEGGER_SYSVIEW_Start+0x168>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	623b      	str	r3, [r7, #32]
 8002c56:	e00b      	b.n	8002c70 <SEGGER_SYSVIEW_Start+0xac>
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	1c59      	adds	r1, r3, #1
 8002c60:	6279      	str	r1, [r7, #36]	; 0x24
 8002c62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	09db      	lsrs	r3, r3, #7
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	2b7f      	cmp	r3, #127	; 0x7f
 8002c74:	d8f0      	bhi.n	8002c58 <SEGGER_SYSVIEW_Start+0x94>
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	627a      	str	r2, [r7, #36]	; 0x24
 8002c7c:	6a3a      	ldr	r2, [r7, #32]
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	4b28      	ldr	r3, [pc, #160]	; (8002d2c <SEGGER_SYSVIEW_Start+0x168>)
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	61bb      	str	r3, [r7, #24]
 8002c90:	e00b      	b.n	8002caa <SEGGER_SYSVIEW_Start+0xe6>
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	1c59      	adds	r1, r3, #1
 8002c9a:	61f9      	str	r1, [r7, #28]
 8002c9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	09db      	lsrs	r3, r3, #7
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b7f      	cmp	r3, #127	; 0x7f
 8002cae:	d8f0      	bhi.n	8002c92 <SEGGER_SYSVIEW_Start+0xce>
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	61fa      	str	r2, [r7, #28]
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	e00b      	b.n	8002ce2 <SEGGER_SYSVIEW_Start+0x11e>
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	1c59      	adds	r1, r3, #1
 8002cd2:	6179      	str	r1, [r7, #20]
 8002cd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	701a      	strb	r2, [r3, #0]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	09db      	lsrs	r3, r3, #7
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ce6:	d8f0      	bhi.n	8002cca <SEGGER_SYSVIEW_Start+0x106>
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	617a      	str	r2, [r7, #20]
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002cf8:	2218      	movs	r2, #24
 8002cfa:	6839      	ldr	r1, [r7, #0]
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff fbe5 	bl	80024cc <_SendPacket>
      RECORD_END();
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002d08:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <SEGGER_SYSVIEW_Start+0x168>)
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <SEGGER_SYSVIEW_Start+0x168>)
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002d16:	f000 f9eb 	bl	80030f0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002d1a:	f000 f9b1 	bl	8003080 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002d1e:	f000 fc2d 	bl	800357c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8002d22:	bf00      	nop
 8002d24:	3730      	adds	r7, #48	; 0x30
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20001624 	.word	0x20001624
 8002d30:	08005c1c 	.word	0x08005c1c
 8002d34:	20001654 	.word	0x20001654

08002d38 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8002d42:	f04f 0120 	mov.w	r1, #32
 8002d46:	f381 8811 	msr	BASEPRI, r1
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	480b      	ldr	r0, [pc, #44]	; (8002d7c <SEGGER_SYSVIEW_Stop+0x44>)
 8002d4e:	f7ff fad2 	bl	80022f6 <_PreparePacket>
 8002d52:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <SEGGER_SYSVIEW_Stop+0x48>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d007      	beq.n	8002d6c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002d5c:	220b      	movs	r2, #11
 8002d5e:	6839      	ldr	r1, [r7, #0]
 8002d60:	6838      	ldr	r0, [r7, #0]
 8002d62:	f7ff fbb3 	bl	80024cc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <SEGGER_SYSVIEW_Stop+0x48>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f383 8811 	msr	BASEPRI, r3
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20001654 	.word	0x20001654
 8002d80:	20001624 	.word	0x20001624

08002d84 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08c      	sub	sp, #48	; 0x30
 8002d88:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002d8a:	f3ef 8311 	mrs	r3, BASEPRI
 8002d8e:	f04f 0120 	mov.w	r1, #32
 8002d92:	f381 8811 	msr	BASEPRI, r1
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	4845      	ldr	r0, [pc, #276]	; (8002eb0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002d9a:	f7ff faac 	bl	80022f6 <_PreparePacket>
 8002d9e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da8:	4b42      	ldr	r3, [pc, #264]	; (8002eb4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dae:	e00b      	b.n	8002dc8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db6:	1c59      	adds	r1, r3, #1
 8002db8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002dba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc4:	09db      	lsrs	r3, r3, #7
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	2b7f      	cmp	r3, #127	; 0x7f
 8002dcc:	d8f0      	bhi.n	8002db0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
 8002de2:	4b34      	ldr	r3, [pc, #208]	; (8002eb4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	623b      	str	r3, [r7, #32]
 8002de8:	e00b      	b.n	8002e02 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	1c59      	adds	r1, r3, #1
 8002df2:	6279      	str	r1, [r7, #36]	; 0x24
 8002df4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	701a      	strb	r2, [r3, #0]
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	09db      	lsrs	r3, r3, #7
 8002e00:	623b      	str	r3, [r7, #32]
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	2b7f      	cmp	r3, #127	; 0x7f
 8002e06:	d8f0      	bhi.n	8002dea <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	627a      	str	r2, [r7, #36]	; 0x24
 8002e0e:	6a3a      	ldr	r2, [r7, #32]
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	e00b      	b.n	8002e3c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	1c59      	adds	r1, r3, #1
 8002e2c:	61f9      	str	r1, [r7, #28]
 8002e2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	701a      	strb	r2, [r3, #0]
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	09db      	lsrs	r3, r3, #7
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8002e40:	d8f0      	bhi.n	8002e24 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	61fa      	str	r2, [r7, #28]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	e00b      	b.n	8002e74 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	1c59      	adds	r1, r3, #1
 8002e64:	6179      	str	r1, [r7, #20]
 8002e66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	09db      	lsrs	r3, r3, #7
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	2b7f      	cmp	r3, #127	; 0x7f
 8002e78:	d8f0      	bhi.n	8002e5c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	617a      	str	r2, [r7, #20]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002e8a:	2218      	movs	r2, #24
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	68b8      	ldr	r0, [r7, #8]
 8002e90:	f7ff fb1c 	bl	80024cc <_SendPacket>
  RECORD_END();
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	4798      	blx	r3
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	3730      	adds	r7, #48	; 0x30
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20001654 	.word	0x20001654
 8002eb4:	20001624 	.word	0x20001624

08002eb8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b092      	sub	sp, #72	; 0x48
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8002ec4:	f04f 0120 	mov.w	r1, #32
 8002ec8:	f381 8811 	msr	BASEPRI, r1
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	486a      	ldr	r0, [pc, #424]	; (8003078 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8002ed0:	f7ff fa11 	bl	80022f6 <_PreparePacket>
 8002ed4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b66      	ldr	r3, [pc, #408]	; (800307c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8002eea:	e00b      	b.n	8002f04 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8002eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef2:	1c59      	adds	r1, r3, #1
 8002ef4:	6479      	str	r1, [r7, #68]	; 0x44
 8002ef6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f00:	09db      	lsrs	r3, r3, #7
 8002f02:	643b      	str	r3, [r7, #64]	; 0x40
 8002f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f06:	2b7f      	cmp	r3, #127	; 0x7f
 8002f08:	d8f0      	bhi.n	8002eec <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8002f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	647a      	str	r2, [r7, #68]	; 0x44
 8002f10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]
 8002f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f24:	e00b      	b.n	8002f3e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2c:	1c59      	adds	r1, r3, #1
 8002f2e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002f30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3a:	09db      	lsrs	r3, r3, #7
 8002f3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f40:	2b7f      	cmp	r3, #127	; 0x7f
 8002f42:	d8f0      	bhi.n	8002f26 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8002f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f52:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f7ff f99b 	bl	8002298 <_EncodeStr>
 8002f62:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002f64:	2209      	movs	r2, #9
 8002f66:	68f9      	ldr	r1, [r7, #12]
 8002f68:	6938      	ldr	r0, [r7, #16]
 8002f6a:	f7ff faaf 	bl	80024cc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4b40      	ldr	r3, [pc, #256]	; (800307c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	633b      	str	r3, [r7, #48]	; 0x30
 8002f82:	e00b      	b.n	8002f9c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8a:	1c59      	adds	r1, r3, #1
 8002f8c:	6379      	str	r1, [r7, #52]	; 0x34
 8002f8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	09db      	lsrs	r3, r3, #7
 8002f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8002fa0:	d8f0      	bhi.n	8002f84 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	637a      	str	r2, [r7, #52]	; 0x34
 8002fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]
 8002fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fbc:	e00b      	b.n	8002fd6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	1c59      	adds	r1, r3, #1
 8002fc6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002fc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	701a      	strb	r2, [r3, #0]
 8002fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd2:	09db      	lsrs	r3, r3, #7
 8002fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd8:	2b7f      	cmp	r3, #127	; 0x7f
 8002fda:	d8f0      	bhi.n	8002fbe <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	701a      	strb	r2, [r3, #0]
 8002fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	623b      	str	r3, [r7, #32]
 8002ff6:	e00b      	b.n	8003010 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	1c59      	adds	r1, r3, #1
 8003000:	6279      	str	r1, [r7, #36]	; 0x24
 8003002:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	09db      	lsrs	r3, r3, #7
 800300e:	623b      	str	r3, [r7, #32]
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	2b7f      	cmp	r3, #127	; 0x7f
 8003014:	d8f0      	bhi.n	8002ff8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	627a      	str	r2, [r7, #36]	; 0x24
 800301c:	6a3a      	ldr	r2, [r7, #32]
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	e00b      	b.n	8003048 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	1c59      	adds	r1, r3, #1
 8003038:	61f9      	str	r1, [r7, #28]
 800303a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	09db      	lsrs	r3, r3, #7
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2b7f      	cmp	r3, #127	; 0x7f
 800304c:	d8f0      	bhi.n	8003030 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	61fa      	str	r2, [r7, #28]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800305e:	2215      	movs	r2, #21
 8003060:	68f9      	ldr	r1, [r7, #12]
 8003062:	6938      	ldr	r0, [r7, #16]
 8003064:	f7ff fa32 	bl	80024cc <_SendPacket>
  RECORD_END();
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f383 8811 	msr	BASEPRI, r3
}
 800306e:	bf00      	nop
 8003070:	3748      	adds	r7, #72	; 0x48
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20001654 	.word	0x20001654
 800307c:	20001624 	.word	0x20001624

08003080 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003084:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800308c:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003096:	4b03      	ldr	r3, [pc, #12]	; (80030a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4798      	blx	r3
  }
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20001624 	.word	0x20001624

080030a8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80030b0:	f3ef 8311 	mrs	r3, BASEPRI
 80030b4:	f04f 0120 	mov.w	r1, #32
 80030b8:	f381 8811 	msr	BASEPRI, r1
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	480b      	ldr	r0, [pc, #44]	; (80030ec <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80030c0:	f7ff f919 	bl	80022f6 <_PreparePacket>
 80030c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80030c6:	2280      	movs	r2, #128	; 0x80
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	6938      	ldr	r0, [r7, #16]
 80030cc:	f7ff f8e4 	bl	8002298 <_EncodeStr>
 80030d0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80030d2:	220e      	movs	r2, #14
 80030d4:	68f9      	ldr	r1, [r7, #12]
 80030d6:	6938      	ldr	r0, [r7, #16]
 80030d8:	f7ff f9f8 	bl	80024cc <_SendPacket>
  RECORD_END();
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f383 8811 	msr	BASEPRI, r3
}
 80030e2:	bf00      	nop
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20001654 	.word	0x20001654

080030f0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d01a      	beq.n	8003134 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80030fe:	4b13      	ldr	r3, [pc, #76]	; (800314c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d015      	beq.n	8003134 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003108:	4b10      	ldr	r3, [pc, #64]	; (800314c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4798      	blx	r3
 8003110:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003114:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003116:	e9d7 0100 	ldrd	r0, r1, [r7]
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	000a      	movs	r2, r1
 8003124:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003126:	4613      	mov	r3, r2
 8003128:	461a      	mov	r2, r3
 800312a:	4621      	mov	r1, r4
 800312c:	200d      	movs	r0, #13
 800312e:	f7ff fbe7 	bl	8002900 <SEGGER_SYSVIEW_RecordU32x2>
 8003132:	e006      	b.n	8003142 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4619      	mov	r1, r3
 800313a:	200c      	movs	r0, #12
 800313c:	f7ff fba4 	bl	8002888 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bd90      	pop	{r4, r7, pc}
 800314a:	bf00      	nop
 800314c:	20001624 	.word	0x20001624
 8003150:	e0001004 	.word	0xe0001004

08003154 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800315a:	f3ef 8311 	mrs	r3, BASEPRI
 800315e:	f04f 0120 	mov.w	r1, #32
 8003162:	f381 8811 	msr	BASEPRI, r1
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	4819      	ldr	r0, [pc, #100]	; (80031d0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800316a:	f7ff f8c4 	bl	80022f6 <_PreparePacket>
 800316e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003174:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	e00b      	b.n	80031a0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	b2da      	uxtb	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	1c59      	adds	r1, r3, #1
 8003190:	6179      	str	r1, [r7, #20]
 8003192:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	09db      	lsrs	r3, r3, #7
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	2b7f      	cmp	r3, #127	; 0x7f
 80031a4:	d8f0      	bhi.n	8003188 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	617a      	str	r2, [r7, #20]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80031b6:	2202      	movs	r2, #2
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	68b8      	ldr	r0, [r7, #8]
 80031bc:	f7ff f986 	bl	80024cc <_SendPacket>
  RECORD_END();
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f383 8811 	msr	BASEPRI, r3
}
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20001654 	.word	0x20001654
 80031d4:	e000ed04 	.word	0xe000ed04

080031d8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80031de:	f3ef 8311 	mrs	r3, BASEPRI
 80031e2:	f04f 0120 	mov.w	r1, #32
 80031e6:	f381 8811 	msr	BASEPRI, r1
 80031ea:	607b      	str	r3, [r7, #4]
 80031ec:	4807      	ldr	r0, [pc, #28]	; (800320c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80031ee:	f7ff f882 	bl	80022f6 <_PreparePacket>
 80031f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80031f4:	2203      	movs	r2, #3
 80031f6:	6839      	ldr	r1, [r7, #0]
 80031f8:	6838      	ldr	r0, [r7, #0]
 80031fa:	f7ff f967 	bl	80024cc <_SendPacket>
  RECORD_END();
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f383 8811 	msr	BASEPRI, r3
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20001654 	.word	0x20001654

08003210 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003216:	f3ef 8311 	mrs	r3, BASEPRI
 800321a:	f04f 0120 	mov.w	r1, #32
 800321e:	f381 8811 	msr	BASEPRI, r1
 8003222:	607b      	str	r3, [r7, #4]
 8003224:	4807      	ldr	r0, [pc, #28]	; (8003244 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003226:	f7ff f866 	bl	80022f6 <_PreparePacket>
 800322a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800322c:	2212      	movs	r2, #18
 800322e:	6839      	ldr	r1, [r7, #0]
 8003230:	6838      	ldr	r0, [r7, #0]
 8003232:	f7ff f94b 	bl	80024cc <_SendPacket>
  RECORD_END();
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f383 8811 	msr	BASEPRI, r3
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20001654 	.word	0x20001654

08003248 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800324e:	f3ef 8311 	mrs	r3, BASEPRI
 8003252:	f04f 0120 	mov.w	r1, #32
 8003256:	f381 8811 	msr	BASEPRI, r1
 800325a:	607b      	str	r3, [r7, #4]
 800325c:	4807      	ldr	r0, [pc, #28]	; (800327c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800325e:	f7ff f84a 	bl	80022f6 <_PreparePacket>
 8003262:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003264:	2211      	movs	r2, #17
 8003266:	6839      	ldr	r1, [r7, #0]
 8003268:	6838      	ldr	r0, [r7, #0]
 800326a:	f7ff f92f 	bl	80024cc <_SendPacket>
  RECORD_END();
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f383 8811 	msr	BASEPRI, r3
}
 8003274:	bf00      	nop
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20001654 	.word	0x20001654

08003280 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003288:	f3ef 8311 	mrs	r3, BASEPRI
 800328c:	f04f 0120 	mov.w	r1, #32
 8003290:	f381 8811 	msr	BASEPRI, r1
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	4819      	ldr	r0, [pc, #100]	; (80032fc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8003298:	f7ff f82d 	bl	80022f6 <_PreparePacket>
 800329c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80032a2:	4b17      	ldr	r3, [pc, #92]	; (8003300 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	61bb      	str	r3, [r7, #24]
 80032b4:	e00b      	b.n	80032ce <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	1c59      	adds	r1, r3, #1
 80032be:	61f9      	str	r1, [r7, #28]
 80032c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	09db      	lsrs	r3, r3, #7
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b7f      	cmp	r3, #127	; 0x7f
 80032d2:	d8f0      	bhi.n	80032b6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	61fa      	str	r2, [r7, #28]
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80032e4:	2208      	movs	r2, #8
 80032e6:	68f9      	ldr	r1, [r7, #12]
 80032e8:	6938      	ldr	r0, [r7, #16]
 80032ea:	f7ff f8ef 	bl	80024cc <_SendPacket>
  RECORD_END();
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f383 8811 	msr	BASEPRI, r3
}
 80032f4:	bf00      	nop
 80032f6:	3720      	adds	r7, #32
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20001654 	.word	0x20001654
 8003300:	20001624 	.word	0x20001624

08003304 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800330c:	f3ef 8311 	mrs	r3, BASEPRI
 8003310:	f04f 0120 	mov.w	r1, #32
 8003314:	f381 8811 	msr	BASEPRI, r1
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	4819      	ldr	r0, [pc, #100]	; (8003380 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800331c:	f7fe ffeb 	bl	80022f6 <_PreparePacket>
 8003320:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003326:	4b17      	ldr	r3, [pc, #92]	; (8003384 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	61bb      	str	r3, [r7, #24]
 8003338:	e00b      	b.n	8003352 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	b2da      	uxtb	r2, r3
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	1c59      	adds	r1, r3, #1
 8003342:	61f9      	str	r1, [r7, #28]
 8003344:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	701a      	strb	r2, [r3, #0]
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	09db      	lsrs	r3, r3, #7
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2b7f      	cmp	r3, #127	; 0x7f
 8003356:	d8f0      	bhi.n	800333a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	61fa      	str	r2, [r7, #28]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	701a      	strb	r2, [r3, #0]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003368:	2204      	movs	r2, #4
 800336a:	68f9      	ldr	r1, [r7, #12]
 800336c:	6938      	ldr	r0, [r7, #16]
 800336e:	f7ff f8ad 	bl	80024cc <_SendPacket>
  RECORD_END();
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f383 8811 	msr	BASEPRI, r3
}
 8003378:	bf00      	nop
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20001654 	.word	0x20001654
 8003384:	20001624 	.word	0x20001624

08003388 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003390:	f3ef 8311 	mrs	r3, BASEPRI
 8003394:	f04f 0120 	mov.w	r1, #32
 8003398:	f381 8811 	msr	BASEPRI, r1
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	4819      	ldr	r0, [pc, #100]	; (8003404 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80033a0:	f7fe ffa9 	bl	80022f6 <_PreparePacket>
 80033a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80033aa:	4b17      	ldr	r3, [pc, #92]	; (8003408 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	e00b      	b.n	80033d6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	1c59      	adds	r1, r3, #1
 80033c6:	61f9      	str	r1, [r7, #28]
 80033c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	09db      	lsrs	r3, r3, #7
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	2b7f      	cmp	r3, #127	; 0x7f
 80033da:	d8f0      	bhi.n	80033be <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	61fa      	str	r2, [r7, #28]
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	701a      	strb	r2, [r3, #0]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80033ec:	2206      	movs	r2, #6
 80033ee:	68f9      	ldr	r1, [r7, #12]
 80033f0:	6938      	ldr	r0, [r7, #16]
 80033f2:	f7ff f86b 	bl	80024cc <_SendPacket>
  RECORD_END();
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f383 8811 	msr	BASEPRI, r3
}
 80033fc:	bf00      	nop
 80033fe:	3720      	adds	r7, #32
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20001654 	.word	0x20001654
 8003408:	20001624 	.word	0x20001624

0800340c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8003414:	4b04      	ldr	r3, [pc, #16]	; (8003428 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	1ad3      	subs	r3, r2, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20001624 	.word	0x20001624

0800342c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b08c      	sub	sp, #48	; 0x30
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003436:	4b40      	ldr	r3, [pc, #256]	; (8003538 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d077      	beq.n	800352e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800343e:	4b3e      	ldr	r3, [pc, #248]	; (8003538 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003444:	2300      	movs	r3, #0
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
 8003448:	e008      	b.n	800345c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003452:	2b00      	cmp	r3, #0
 8003454:	d007      	beq.n	8003466 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	3301      	adds	r3, #1
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003460:	429a      	cmp	r2, r3
 8003462:	d3f2      	bcc.n	800344a <SEGGER_SYSVIEW_SendModule+0x1e>
 8003464:	e000      	b.n	8003468 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003466:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d055      	beq.n	800351a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800346e:	f3ef 8311 	mrs	r3, BASEPRI
 8003472:	f04f 0120 	mov.w	r1, #32
 8003476:	f381 8811 	msr	BASEPRI, r1
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	482f      	ldr	r0, [pc, #188]	; (800353c <SEGGER_SYSVIEW_SendModule+0x110>)
 800347e:	f7fe ff3a 	bl	80022f6 <_PreparePacket>
 8003482:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	623b      	str	r3, [r7, #32]
 8003490:	e00b      	b.n	80034aa <SEGGER_SYSVIEW_SendModule+0x7e>
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	b2da      	uxtb	r2, r3
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	1c59      	adds	r1, r3, #1
 800349a:	6279      	str	r1, [r7, #36]	; 0x24
 800349c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	09db      	lsrs	r3, r3, #7
 80034a8:	623b      	str	r3, [r7, #32]
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	2b7f      	cmp	r3, #127	; 0x7f
 80034ae:	d8f0      	bhi.n	8003492 <SEGGER_SYSVIEW_SendModule+0x66>
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	627a      	str	r2, [r7, #36]	; 0x24
 80034b6:	6a3a      	ldr	r2, [r7, #32]
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	701a      	strb	r2, [r3, #0]
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	e00b      	b.n	80034e4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	1c59      	adds	r1, r3, #1
 80034d4:	61f9      	str	r1, [r7, #28]
 80034d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	09db      	lsrs	r3, r3, #7
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b7f      	cmp	r3, #127	; 0x7f
 80034e8:	d8f0      	bhi.n	80034cc <SEGGER_SYSVIEW_SendModule+0xa0>
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	61fa      	str	r2, [r7, #28]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2280      	movs	r2, #128	; 0x80
 8003500:	4619      	mov	r1, r3
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f7fe fec8 	bl	8002298 <_EncodeStr>
 8003508:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800350a:	2216      	movs	r2, #22
 800350c:	68f9      	ldr	r1, [r7, #12]
 800350e:	6938      	ldr	r0, [r7, #16]
 8003510:	f7fe ffdc 	bl	80024cc <_SendPacket>
      RECORD_END();
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d006      	beq.n	800352e <SEGGER_SYSVIEW_SendModule+0x102>
 8003520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4798      	blx	r3
    }
  }
}
 800352e:	bf00      	nop
 8003530:	3730      	adds	r7, #48	; 0x30
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	2000164c 	.word	0x2000164c
 800353c:	20001654 	.word	0x20001654

08003540 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00f      	beq.n	800356e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f2      	bne.n	8003554 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	2000164c 	.word	0x2000164c

0800357c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003582:	f3ef 8311 	mrs	r3, BASEPRI
 8003586:	f04f 0120 	mov.w	r1, #32
 800358a:	f381 8811 	msr	BASEPRI, r1
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	4817      	ldr	r0, [pc, #92]	; (80035f0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003592:	f7fe feb0 	bl	80022f6 <_PreparePacket>
 8003596:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	e00b      	b.n	80035c0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	1c59      	adds	r1, r3, #1
 80035b0:	6179      	str	r1, [r7, #20]
 80035b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	09db      	lsrs	r3, r3, #7
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b7f      	cmp	r3, #127	; 0x7f
 80035c4:	d8f0      	bhi.n	80035a8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	617a      	str	r2, [r7, #20]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80035d6:	221b      	movs	r2, #27
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	68b8      	ldr	r0, [r7, #8]
 80035dc:	f7fe ff76 	bl	80024cc <_SendPacket>
  RECORD_END();
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f383 8811 	msr	BASEPRI, r3
}
 80035e6:	bf00      	nop
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20001654 	.word	0x20001654
 80035f4:	20001650 	.word	0x20001650

080035f8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003600:	f3ef 8311 	mrs	r3, BASEPRI
 8003604:	f04f 0120 	mov.w	r1, #32
 8003608:	f381 8811 	msr	BASEPRI, r1
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	4827      	ldr	r0, [pc, #156]	; (80036ac <SEGGER_SYSVIEW_Warn+0xb4>)
 8003610:	f7fe fe71 	bl	80022f6 <_PreparePacket>
 8003614:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	6938      	ldr	r0, [r7, #16]
 800361c:	f7fe fe3c 	bl	8002298 <_EncodeStr>
 8003620:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
 8003626:	2301      	movs	r3, #1
 8003628:	623b      	str	r3, [r7, #32]
 800362a:	e00b      	b.n	8003644 <SEGGER_SYSVIEW_Warn+0x4c>
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	b2da      	uxtb	r2, r3
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	1c59      	adds	r1, r3, #1
 8003634:	6279      	str	r1, [r7, #36]	; 0x24
 8003636:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	09db      	lsrs	r3, r3, #7
 8003642:	623b      	str	r3, [r7, #32]
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	2b7f      	cmp	r3, #127	; 0x7f
 8003648:	d8f0      	bhi.n	800362c <SEGGER_SYSVIEW_Warn+0x34>
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	627a      	str	r2, [r7, #36]	; 0x24
 8003650:	6a3a      	ldr	r2, [r7, #32]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	2300      	movs	r3, #0
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	e00b      	b.n	800367c <SEGGER_SYSVIEW_Warn+0x84>
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	b2da      	uxtb	r2, r3
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	1c59      	adds	r1, r3, #1
 800366c:	61f9      	str	r1, [r7, #28]
 800366e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	09db      	lsrs	r3, r3, #7
 800367a:	61bb      	str	r3, [r7, #24]
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b7f      	cmp	r3, #127	; 0x7f
 8003680:	d8f0      	bhi.n	8003664 <SEGGER_SYSVIEW_Warn+0x6c>
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	61fa      	str	r2, [r7, #28]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003692:	221a      	movs	r2, #26
 8003694:	68f9      	ldr	r1, [r7, #12]
 8003696:	6938      	ldr	r0, [r7, #16]
 8003698:	f7fe ff18 	bl	80024cc <_SendPacket>
  RECORD_END();
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f383 8811 	msr	BASEPRI, r3
}
 80036a2:	bf00      	nop
 80036a4:	3728      	adds	r7, #40	; 0x28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20001654 	.word	0x20001654

080036b0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f103 0208 	add.w	r2, r3, #8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f04f 32ff 	mov.w	r2, #4294967295
 80036c8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f103 0208 	add.w	r2, r3, #8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f103 0208 	add.w	r2, r3, #8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr

080036ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr

08003706 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003706:	b480      	push	{r7}
 8003708:	b085      	sub	sp, #20
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371c:	d103      	bne.n	8003726 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e00c      	b.n	8003740 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3308      	adds	r3, #8
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	e002      	b.n	8003734 <vListInsert+0x2e>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	429a      	cmp	r2, r3
 800373e:	d2f6      	bcs.n	800372e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	601a      	str	r2, [r3, #0]
}
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr

08003776 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003776:	b480      	push	{r7}
 8003778:	b085      	sub	sp, #20
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6892      	ldr	r2, [r2, #8]
 800378c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6852      	ldr	r2, [r2, #4]
 8003796:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d103      	bne.n	80037aa <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	1e5a      	subs	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80037d2:	2301      	movs	r3, #1
 80037d4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80037f2:	bf00      	nop
 80037f4:	e7fe      	b.n	80037f4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d052      	beq.n	80038a2 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003800:	2b00      	cmp	r3, #0
 8003802:	d04e      	beq.n	80038a2 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380c:	2100      	movs	r1, #0
 800380e:	fba3 2302 	umull	r2, r3, r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d000      	beq.n	8003818 <xQueueGenericReset+0x50>
 8003816:	2101      	movs	r1, #1
 8003818:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800381a:	2b00      	cmp	r3, #0
 800381c:	d141      	bne.n	80038a2 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 800381e:	f001 fe25 	bl	800546c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382a:	6939      	ldr	r1, [r7, #16]
 800382c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	441a      	add	r2, r3
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2200      	movs	r2, #0
 800383c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	3b01      	subs	r3, #1
 8003850:	6939      	ldr	r1, [r7, #16]
 8003852:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	441a      	add	r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	22ff      	movs	r2, #255	; 0xff
 8003862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	22ff      	movs	r2, #255	; 0xff
 800386a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d109      	bne.n	8003888 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00f      	beq.n	800389c <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	3310      	adds	r3, #16
 8003880:	4618      	mov	r0, r3
 8003882:	f000 ff83 	bl	800478c <xTaskRemoveFromEventList>
 8003886:	e009      	b.n	800389c <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	3310      	adds	r3, #16
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff0f 	bl	80036b0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	3324      	adds	r3, #36	; 0x24
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff ff0a 	bl	80036b0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800389c:	f001 fe16 	bl	80054cc <vPortExitCritical>
 80038a0:	e001      	b.n	80038a6 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <xQueueGenericReset+0xfa>
        __asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	60bb      	str	r3, [r7, #8]
    }
 80038be:	bf00      	nop
 80038c0:	e7fe      	b.n	80038c0 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80038c2:	697b      	ldr	r3, [r7, #20]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	4613      	mov	r3, r2
 80038d8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d02e      	beq.n	8003942 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80038e4:	2100      	movs	r1, #0
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	fba3 2302 	umull	r2, r3, r3, r2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d000      	beq.n	80038f4 <xQueueGenericCreate+0x28>
 80038f2:	2101      	movs	r1, #1
 80038f4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d123      	bne.n	8003942 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003902:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003906:	d81c      	bhi.n	8003942 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	fb02 f303 	mul.w	r3, r2, r3
 8003910:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	3350      	adds	r3, #80	; 0x50
 8003916:	4618      	mov	r0, r3
 8003918:	f001 feb0 	bl	800567c <pvPortMalloc>
 800391c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01c      	beq.n	800395e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3350      	adds	r3, #80	; 0x50
 800392c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800392e:	79fa      	ldrb	r2, [r7, #7]
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f814 	bl	8003968 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003940:	e00d      	b.n	800395e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <xQueueGenericCreate+0x92>
        __asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	613b      	str	r3, [r7, #16]
    }
 800395a:	bf00      	nop
 800395c:	e7fe      	b.n	800395c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800395e:	69fb      	ldr	r3, [r7, #28]
    }
 8003960:	4618      	mov	r0, r3
 8003962:	3720      	adds	r7, #32
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d103      	bne.n	8003984 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e002      	b.n	800398a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003996:	2101      	movs	r1, #1
 8003998:	69b8      	ldr	r0, [r7, #24]
 800399a:	f7ff ff15 	bl	80037c8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	68f9      	ldr	r1, [r7, #12]
 80039ac:	2073      	movs	r0, #115	; 0x73
 80039ae:	f7ff f801 	bl	80029b4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b08f      	sub	sp, #60	; 0x3c
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80039c8:	2300      	movs	r3, #0
 80039ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <xQueueReceive+0x30>
        __asm volatile
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	623b      	str	r3, [r7, #32]
    }
 80039e8:	bf00      	nop
 80039ea:	e7fe      	b.n	80039ea <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <xQueueReceive+0x3e>
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <xQueueReceive+0x42>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <xQueueReceive+0x44>
 80039fe:	2300      	movs	r3, #0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <xQueueReceive+0x5e>
        __asm volatile
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	61fb      	str	r3, [r7, #28]
    }
 8003a16:	bf00      	nop
 8003a18:	e7fe      	b.n	8003a18 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a1a:	f001 f8c1 	bl	8004ba0 <xTaskGetSchedulerState>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d102      	bne.n	8003a2a <xQueueReceive+0x6e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <xQueueReceive+0x72>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <xQueueReceive+0x74>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <xQueueReceive+0x8e>
        __asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	61bb      	str	r3, [r7, #24]
    }
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003a4a:	f001 fd0f 	bl	800546c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d024      	beq.n	8003aa4 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a5e:	f000 f8b3 	bl	8003bc8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fcd1 	bl	800340c <SEGGER_SYSVIEW_ShrinkId>
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	f7ff fccd 	bl	800340c <SEGGER_SYSVIEW_ShrinkId>
 8003a72:	4602      	mov	r2, r0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2101      	movs	r1, #1
 8003a78:	9100      	str	r1, [sp, #0]
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	205c      	movs	r0, #92	; 0x5c
 8003a7e:	f7ff f80f 	bl	8002aa0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	1e5a      	subs	r2, r3, #1
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d004      	beq.n	8003a9c <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a94:	3310      	adds	r3, #16
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fe78 	bl	800478c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003a9c:	f001 fd16 	bl	80054cc <vPortExitCritical>
                return pdPASS;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e08a      	b.n	8003bba <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d113      	bne.n	8003ad2 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003aaa:	f001 fd0f 	bl	80054cc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff fcab 	bl	800340c <SEGGER_SYSVIEW_ShrinkId>
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f7ff fca7 	bl	800340c <SEGGER_SYSVIEW_ShrinkId>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	9100      	str	r1, [sp, #0]
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	205c      	movs	r0, #92	; 0x5c
 8003aca:	f7fe ffe9 	bl	8002aa0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e073      	b.n	8003bba <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d106      	bne.n	8003ae6 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003ad8:	f107 0310 	add.w	r3, r7, #16
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 ff2d 	bl	800493c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003ae6:	f001 fcf1 	bl	80054cc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003aea:	f000 fb61 	bl	80041b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003aee:	f001 fcbd 	bl	800546c <vPortEnterCritical>
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003af8:	b25b      	sxtb	r3, r3
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d103      	bne.n	8003b08 <xQueueReceive+0x14c>
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b0e:	b25b      	sxtb	r3, r3
 8003b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b14:	d103      	bne.n	8003b1e <xQueueReceive+0x162>
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b1e:	f001 fcd5 	bl	80054cc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b22:	1d3a      	adds	r2, r7, #4
 8003b24:	f107 0310 	add.w	r3, r7, #16
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 ff1c 	bl	8004968 <xTaskCheckForTimeOut>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d124      	bne.n	8003b80 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b38:	f000 f8be 	bl	8003cb8 <prvIsQueueEmpty>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d018      	beq.n	8003b74 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	3324      	adds	r3, #36	; 0x24
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	4611      	mov	r1, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fdb2 	bl	80046b4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b52:	f000 f85f 	bl	8003c14 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003b56:	f000 fb39 	bl	80041cc <xTaskResumeAll>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f47f af74 	bne.w	8003a4a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003b62:	4b18      	ldr	r3, [pc, #96]	; (8003bc4 <xQueueReceive+0x208>)
 8003b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	e76a      	b.n	8003a4a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b76:	f000 f84d 	bl	8003c14 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003b7a:	f000 fb27 	bl	80041cc <xTaskResumeAll>
 8003b7e:	e764      	b.n	8003a4a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b82:	f000 f847 	bl	8003c14 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003b86:	f000 fb21 	bl	80041cc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b8c:	f000 f894 	bl	8003cb8 <prvIsQueueEmpty>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f43f af59 	beq.w	8003a4a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff fc36 	bl	800340c <SEGGER_SYSVIEW_ShrinkId>
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	f7ff fc32 	bl	800340c <SEGGER_SYSVIEW_ShrinkId>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2101      	movs	r1, #1
 8003bae:	9100      	str	r1, [sp, #0]
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	205c      	movs	r0, #92	; 0x5c
 8003bb4:	f7fe ff74 	bl	8002aa0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003bb8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3734      	adds	r7, #52	; 0x34
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd90      	pop	{r4, r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	e000ed04 	.word	0xe000ed04

08003bc8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d018      	beq.n	8003c0c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	441a      	add	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d303      	bcc.n	8003bfc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68d9      	ldr	r1, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	461a      	mov	r2, r3
 8003c06:	6838      	ldr	r0, [r7, #0]
 8003c08:	f001 ff3e 	bl	8005a88 <memcpy>
    }
}
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003c1c:	f001 fc26 	bl	800546c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c26:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c28:	e011      	b.n	8003c4e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d012      	beq.n	8003c58 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3324      	adds	r3, #36	; 0x24
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fda8 	bl	800478c <xTaskRemoveFromEventList>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003c42:	f000 fef7 	bl	8004a34 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	dce9      	bgt.n	8003c2a <prvUnlockQueue+0x16>
 8003c56:	e000      	b.n	8003c5a <prvUnlockQueue+0x46>
                    break;
 8003c58:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	22ff      	movs	r2, #255	; 0xff
 8003c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003c62:	f001 fc33 	bl	80054cc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003c66:	f001 fc01 	bl	800546c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c70:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c72:	e011      	b.n	8003c98 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d012      	beq.n	8003ca2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3310      	adds	r3, #16
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fd83 	bl	800478c <xTaskRemoveFromEventList>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003c8c:	f000 fed2 	bl	8004a34 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003c90:	7bbb      	ldrb	r3, [r7, #14]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	dce9      	bgt.n	8003c74 <prvUnlockQueue+0x60>
 8003ca0:	e000      	b.n	8003ca4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003ca2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	22ff      	movs	r2, #255	; 0xff
 8003ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003cac:	f001 fc0e 	bl	80054cc <vPortExitCritical>
}
 8003cb0:	bf00      	nop
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003cc0:	f001 fbd4 	bl	800546c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d102      	bne.n	8003cd2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	e001      	b.n	8003cd6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003cd6:	f001 fbf9 	bl	80054cc <vPortExitCritical>

    return xReturn;
 8003cda:	68fb      	ldr	r3, [r7, #12]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <vQueueAddToRegistry+0x2a>
        __asm volatile
 8003cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	60fb      	str	r3, [r7, #12]
    }
 8003d0a:	bf00      	nop
 8003d0c:	e7fe      	b.n	8003d0c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d024      	beq.n	8003d5e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e01e      	b.n	8003d58 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003d1a:	4a1c      	ldr	r2, [pc, #112]	; (8003d8c <vQueueAddToRegistry+0xa8>)
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4413      	add	r3, r2
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d105      	bne.n	8003d36 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4a17      	ldr	r2, [pc, #92]	; (8003d8c <vQueueAddToRegistry+0xa8>)
 8003d30:	4413      	add	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
                    break;
 8003d34:	e013      	b.n	8003d5e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <vQueueAddToRegistry+0x6e>
 8003d3c:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <vQueueAddToRegistry+0xa8>)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d104      	bne.n	8003d52 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4a0f      	ldr	r2, [pc, #60]	; (8003d8c <vQueueAddToRegistry+0xa8>)
 8003d4e:	4413      	add	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	3301      	adds	r3, #1
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b07      	cmp	r3, #7
 8003d5c:	d9dd      	bls.n	8003d1a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00f      	beq.n	8003d84 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fb4a 	bl	800340c <SEGGER_SYSVIEW_ShrinkId>
 8003d78:	4601      	mov	r1, r0
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	2071      	movs	r0, #113	; 0x71
 8003d80:	f7fe fdbe 	bl	8002900 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8003d84:	bf00      	nop
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20001738 	.word	0x20001738

08003d90 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003da0:	f001 fb64 	bl	800546c <vPortEnterCritical>
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003daa:	b25b      	sxtb	r3, r3
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db0:	d103      	bne.n	8003dba <vQueueWaitForMessageRestricted+0x2a>
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dc0:	b25b      	sxtb	r3, r3
 8003dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc6:	d103      	bne.n	8003dd0 <vQueueWaitForMessageRestricted+0x40>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dd0:	f001 fb7c 	bl	80054cc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d106      	bne.n	8003dea <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	3324      	adds	r3, #36	; 0x24
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fc89 	bl	80046fc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003dea:	6978      	ldr	r0, [r7, #20]
 8003dec:	f7ff ff12 	bl	8003c14 <prvUnlockQueue>
    }
 8003df0:	bf00      	nop
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08c      	sub	sp, #48	; 0x30
 8003dfc:	af04      	add	r7, sp, #16
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e08:	88fb      	ldrh	r3, [r7, #6]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f001 fc35 	bl	800567c <pvPortMalloc>
 8003e12:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d013      	beq.n	8003e42 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e1a:	2058      	movs	r0, #88	; 0x58
 8003e1c:	f001 fc2e 	bl	800567c <pvPortMalloc>
 8003e20:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003e28:	2258      	movs	r2, #88	; 0x58
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	69f8      	ldr	r0, [r7, #28]
 8003e2e:	f001 fdff 	bl	8005a30 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
 8003e38:	e005      	b.n	8003e46 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003e3a:	6978      	ldr	r0, [r7, #20]
 8003e3c:	f001 fcd8 	bl	80057f0 <vPortFree>
 8003e40:	e001      	b.n	8003e46 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d013      	beq.n	8003e74 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e4c:	88fa      	ldrh	r2, [r7, #6]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	9303      	str	r3, [sp, #12]
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	9302      	str	r3, [sp, #8]
 8003e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68b9      	ldr	r1, [r7, #8]
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f80e 	bl	8003e84 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003e68:	69f8      	ldr	r0, [r7, #28]
 8003e6a:	f000 f899 	bl	8003fa0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	e002      	b.n	8003e7a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e74:	f04f 33ff 	mov.w	r3, #4294967295
 8003e78:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003e7a:	69bb      	ldr	r3, [r7, #24]
    }
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3720      	adds	r7, #32
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	21a5      	movs	r1, #165	; 0xa5
 8003e9e:	f001 fdc7 	bl	8005a30 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003eac:	3b01      	subs	r3, #1
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	f023 0307 	bic.w	r3, r3, #7
 8003eba:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <prvInitialiseNewTask+0x58>
        __asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	617b      	str	r3, [r7, #20]
    }
 8003ed8:	bf00      	nop
 8003eda:	e7fe      	b.n	8003eda <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d01e      	beq.n	8003f20 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	e012      	b.n	8003f0e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	7819      	ldrb	r1, [r3, #0]
 8003ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3334      	adds	r3, #52	; 0x34
 8003ef8:	460a      	mov	r2, r1
 8003efa:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	4413      	add	r3, r2
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d006      	beq.n	8003f16 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	2b09      	cmp	r3, #9
 8003f12:	d9e9      	bls.n	8003ee8 <prvInitialiseNewTask+0x64>
 8003f14:	e000      	b.n	8003f18 <prvInitialiseNewTask+0x94>
            {
                break;
 8003f16:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d90a      	bls.n	8003f3c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	613b      	str	r3, [r7, #16]
    }
 8003f38:	bf00      	nop
 8003f3a:	e7fe      	b.n	8003f3a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d901      	bls.n	8003f46 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f42:	2304      	movs	r3, #4
 8003f44:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f4a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f50:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f54:	3304      	adds	r3, #4
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff fbc9 	bl	80036ee <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	3318      	adds	r3, #24
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fbc4 	bl	80036ee <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f6a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6e:	f1c3 0205 	rsb	r2, r3, #5
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f7a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	68f9      	ldr	r1, [r7, #12]
 8003f80:	69b8      	ldr	r0, [r7, #24]
 8003f82:	f001 f92d 	bl	80051e0 <pxPortInitialiseStack>
 8003f86:	4602      	mov	r2, r0
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f96:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003f98:	bf00      	nop
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003fa0:	b5b0      	push	{r4, r5, r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003fa8:	f001 fa60 	bl	800546c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003fac:	4b49      	ldr	r3, [pc, #292]	; (80040d4 <prvAddNewTaskToReadyList+0x134>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	4a48      	ldr	r2, [pc, #288]	; (80040d4 <prvAddNewTaskToReadyList+0x134>)
 8003fb4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003fb6:	4b48      	ldr	r3, [pc, #288]	; (80040d8 <prvAddNewTaskToReadyList+0x138>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003fbe:	4a46      	ldr	r2, [pc, #280]	; (80040d8 <prvAddNewTaskToReadyList+0x138>)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fc4:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <prvAddNewTaskToReadyList+0x134>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d110      	bne.n	8003fee <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003fcc:	f000 fd50 	bl	8004a70 <prvInitialiseTaskLists>
 8003fd0:	e00d      	b.n	8003fee <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003fd2:	4b42      	ldr	r3, [pc, #264]	; (80040dc <prvAddNewTaskToReadyList+0x13c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fda:	4b3f      	ldr	r3, [pc, #252]	; (80040d8 <prvAddNewTaskToReadyList+0x138>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d802      	bhi.n	8003fee <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003fe8:	4a3b      	ldr	r2, [pc, #236]	; (80040d8 <prvAddNewTaskToReadyList+0x138>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003fee:	4b3c      	ldr	r3, [pc, #240]	; (80040e0 <prvAddNewTaskToReadyList+0x140>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	4a3a      	ldr	r2, [pc, #232]	; (80040e0 <prvAddNewTaskToReadyList+0x140>)
 8003ff6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ff8:	4b39      	ldr	r3, [pc, #228]	; (80040e0 <prvAddNewTaskToReadyList+0x140>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d016      	beq.n	8004034 <prvAddNewTaskToReadyList+0x94>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff f939 	bl	8003280 <SEGGER_SYSVIEW_OnTaskCreate>
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	461d      	mov	r5, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461c      	mov	r4, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	1ae3      	subs	r3, r4, r3
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	462b      	mov	r3, r5
 8004030:	f7fd fefe 	bl	8001e30 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff f9a6 	bl	8003388 <SEGGER_SYSVIEW_OnTaskStartReady>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	2201      	movs	r2, #1
 8004042:	409a      	lsls	r2, r3
 8004044:	4b27      	ldr	r3, [pc, #156]	; (80040e4 <prvAddNewTaskToReadyList+0x144>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4313      	orrs	r3, r2
 800404a:	4a26      	ldr	r2, [pc, #152]	; (80040e4 <prvAddNewTaskToReadyList+0x144>)
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004052:	4925      	ldr	r1, [pc, #148]	; (80040e8 <prvAddNewTaskToReadyList+0x148>)
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	3304      	adds	r3, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	609a      	str	r2, [r3, #8]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	60da      	str	r2, [r3, #12]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	3204      	adds	r2, #4
 800407a:	605a      	str	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	1d1a      	adds	r2, r3, #4
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <prvAddNewTaskToReadyList+0x148>)
 8004092:	441a      	add	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	615a      	str	r2, [r3, #20]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409c:	4912      	ldr	r1, [pc, #72]	; (80040e8 <prvAddNewTaskToReadyList+0x148>)
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	1c59      	adds	r1, r3, #1
 80040ac:	480e      	ldr	r0, [pc, #56]	; (80040e8 <prvAddNewTaskToReadyList+0x148>)
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4403      	add	r3, r0
 80040b8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80040ba:	f001 fa07 	bl	80054cc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80040be:	4b07      	ldr	r3, [pc, #28]	; (80040dc <prvAddNewTaskToReadyList+0x13c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040c6:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <prvAddNewTaskToReadyList+0x138>)
 80040c8:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bdb0      	pop	{r4, r5, r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20001850 	.word	0x20001850
 80040d8:	20001778 	.word	0x20001778
 80040dc:	2000185c 	.word	0x2000185c
 80040e0:	2000186c 	.word	0x2000186c
 80040e4:	20001858 	.word	0x20001858
 80040e8:	2000177c 	.word	0x2000177c

080040ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80040f2:	4b27      	ldr	r3, [pc, #156]	; (8004190 <vTaskStartScheduler+0xa4>)
 80040f4:	9301      	str	r3, [sp, #4]
 80040f6:	2300      	movs	r3, #0
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	2300      	movs	r3, #0
 80040fc:	2282      	movs	r2, #130	; 0x82
 80040fe:	4925      	ldr	r1, [pc, #148]	; (8004194 <vTaskStartScheduler+0xa8>)
 8004100:	4825      	ldr	r0, [pc, #148]	; (8004198 <vTaskStartScheduler+0xac>)
 8004102:	f7ff fe79 	bl	8003df8 <xTaskCreate>
 8004106:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d102      	bne.n	8004114 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800410e:	f000 fde5 	bl	8004cdc <xTimerCreateTimerTask>
 8004112:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d124      	bne.n	8004164 <vTaskStartScheduler+0x78>
        __asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	60bb      	str	r3, [r7, #8]
    }
 800412c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800412e:	4b1b      	ldr	r3, [pc, #108]	; (800419c <vTaskStartScheduler+0xb0>)
 8004130:	f04f 32ff 	mov.w	r2, #4294967295
 8004134:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004136:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <vTaskStartScheduler+0xb4>)
 8004138:	2201      	movs	r2, #1
 800413a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800413c:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <vTaskStartScheduler+0xb8>)
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8004142:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <vTaskStartScheduler+0xbc>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b12      	ldr	r3, [pc, #72]	; (8004190 <vTaskStartScheduler+0xa4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d102      	bne.n	8004154 <vTaskStartScheduler+0x68>
 800414e:	f7ff f87b 	bl	8003248 <SEGGER_SYSVIEW_OnIdle>
 8004152:	e004      	b.n	800415e <vTaskStartScheduler+0x72>
 8004154:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <vTaskStartScheduler+0xbc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff f8d3 	bl	8003304 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800415e:	f001 f8bd 	bl	80052dc <xPortStartScheduler>
 8004162:	e00e      	b.n	8004182 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d10a      	bne.n	8004182 <vTaskStartScheduler+0x96>
        __asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	607b      	str	r3, [r7, #4]
    }
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004182:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <vTaskStartScheduler+0xc0>)
 8004184:	681b      	ldr	r3, [r3, #0]
}
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20001874 	.word	0x20001874
 8004194:	08005bbc 	.word	0x08005bbc
 8004198:	08004a4d 	.word	0x08004a4d
 800419c:	20001870 	.word	0x20001870
 80041a0:	2000185c 	.word	0x2000185c
 80041a4:	20001854 	.word	0x20001854
 80041a8:	20001778 	.word	0x20001778
 80041ac:	2000000c 	.word	0x2000000c

080041b0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80041b4:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <vTaskSuspendAll+0x18>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3301      	adds	r3, #1
 80041ba:	4a03      	ldr	r2, [pc, #12]	; (80041c8 <vTaskSuspendAll+0x18>)
 80041bc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80041be:	bf00      	nop
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20001878 	.word	0x20001878

080041cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80041da:	4b6d      	ldr	r3, [pc, #436]	; (8004390 <xTaskResumeAll+0x1c4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <xTaskResumeAll+0x2c>
        __asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	607b      	str	r3, [r7, #4]
    }
 80041f4:	bf00      	nop
 80041f6:	e7fe      	b.n	80041f6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80041f8:	f001 f938 	bl	800546c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80041fc:	4b64      	ldr	r3, [pc, #400]	; (8004390 <xTaskResumeAll+0x1c4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3b01      	subs	r3, #1
 8004202:	4a63      	ldr	r2, [pc, #396]	; (8004390 <xTaskResumeAll+0x1c4>)
 8004204:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004206:	4b62      	ldr	r3, [pc, #392]	; (8004390 <xTaskResumeAll+0x1c4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f040 80b8 	bne.w	8004380 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004210:	4b60      	ldr	r3, [pc, #384]	; (8004394 <xTaskResumeAll+0x1c8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 80b3 	beq.w	8004380 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800421a:	e08e      	b.n	800433a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800421c:	4b5e      	ldr	r3, [pc, #376]	; (8004398 <xTaskResumeAll+0x1cc>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	6a12      	ldr	r2, [r2, #32]
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	69d2      	ldr	r2, [r2, #28]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	3318      	adds	r3, #24
 8004246:	429a      	cmp	r2, r3
 8004248:	d103      	bne.n	8004252 <xTaskResumeAll+0x86>
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	6a1a      	ldr	r2, [r3, #32]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	2200      	movs	r2, #0
 8004256:	629a      	str	r2, [r3, #40]	; 0x28
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	1e5a      	subs	r2, r3, #1
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	68d2      	ldr	r2, [r2, #12]
 8004270:	609a      	str	r2, [r3, #8]
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	6892      	ldr	r2, [r2, #8]
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	3304      	adds	r3, #4
 8004284:	429a      	cmp	r2, r3
 8004286:	d103      	bne.n	8004290 <xTaskResumeAll+0xc4>
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	605a      	str	r2, [r3, #4]
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	2200      	movs	r2, #0
 8004294:	615a      	str	r2, [r3, #20]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	1e5a      	subs	r2, r3, #1
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff f870 	bl	8003388 <SEGGER_SYSVIEW_OnTaskStartReady>
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	2201      	movs	r2, #1
 80042ae:	409a      	lsls	r2, r3
 80042b0:	4b3a      	ldr	r3, [pc, #232]	; (800439c <xTaskResumeAll+0x1d0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	4a39      	ldr	r2, [pc, #228]	; (800439c <xTaskResumeAll+0x1d0>)
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042be:	4938      	ldr	r1, [pc, #224]	; (80043a0 <xTaskResumeAll+0x1d4>)
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	3304      	adds	r3, #4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	609a      	str	r2, [r3, #8]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	60da      	str	r2, [r3, #12]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	3204      	adds	r2, #4
 80042e6:	605a      	str	r2, [r3, #4]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	1d1a      	adds	r2, r3, #4
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	609a      	str	r2, [r3, #8]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4a28      	ldr	r2, [pc, #160]	; (80043a0 <xTaskResumeAll+0x1d4>)
 80042fe:	441a      	add	r2, r3
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	615a      	str	r2, [r3, #20]
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004308:	4925      	ldr	r1, [pc, #148]	; (80043a0 <xTaskResumeAll+0x1d4>)
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	1c59      	adds	r1, r3, #1
 8004318:	4821      	ldr	r0, [pc, #132]	; (80043a0 <xTaskResumeAll+0x1d4>)
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4403      	add	r3, r0
 8004324:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432a:	4b1e      	ldr	r3, [pc, #120]	; (80043a4 <xTaskResumeAll+0x1d8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	429a      	cmp	r2, r3
 8004332:	d302      	bcc.n	800433a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8004334:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <xTaskResumeAll+0x1dc>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800433a:	4b17      	ldr	r3, [pc, #92]	; (8004398 <xTaskResumeAll+0x1cc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	f47f af6c 	bne.w	800421c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800434a:	f000 fc0f 	bl	8004b6c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800434e:	4b17      	ldr	r3, [pc, #92]	; (80043ac <xTaskResumeAll+0x1e0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d010      	beq.n	800437c <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800435a:	f000 f849 	bl	80043f0 <xTaskIncrementTick>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8004364:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <xTaskResumeAll+0x1dc>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	3b01      	subs	r3, #1
 800436e:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f1      	bne.n	800435a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8004376:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <xTaskResumeAll+0x1e0>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <xTaskResumeAll+0x1dc>)
 800437e:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004380:	f001 f8a4 	bl	80054cc <vPortExitCritical>

    return xAlreadyYielded;
 8004384:	697b      	ldr	r3, [r7, #20]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3720      	adds	r7, #32
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20001878 	.word	0x20001878
 8004394:	20001850 	.word	0x20001850
 8004398:	20001810 	.word	0x20001810
 800439c:	20001858 	.word	0x20001858
 80043a0:	2000177c 	.word	0x2000177c
 80043a4:	20001778 	.word	0x20001778
 80043a8:	20001864 	.word	0x20001864
 80043ac:	20001860 	.word	0x20001860

080043b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80043b6:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <xTaskGetTickCount+0x18>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80043bc:	687b      	ldr	r3, [r7, #4]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr
 80043c8:	20001854 	.word	0x20001854

080043cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043d2:	f001 f915 	bl	8005600 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80043d6:	2300      	movs	r3, #0
 80043d8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80043da:	4b04      	ldr	r3, [pc, #16]	; (80043ec <xTaskGetTickCountFromISR+0x20>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80043e0:	683b      	ldr	r3, [r7, #0]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20001854 	.word	0x20001854

080043f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08a      	sub	sp, #40	; 0x28
 80043f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043fa:	4b70      	ldr	r3, [pc, #448]	; (80045bc <xTaskIncrementTick+0x1cc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f040 80d1 	bne.w	80045a6 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004404:	4b6e      	ldr	r3, [pc, #440]	; (80045c0 <xTaskIncrementTick+0x1d0>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3301      	adds	r3, #1
 800440a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800440c:	4a6c      	ldr	r2, [pc, #432]	; (80045c0 <xTaskIncrementTick+0x1d0>)
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d120      	bne.n	800445a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004418:	4b6a      	ldr	r3, [pc, #424]	; (80045c4 <xTaskIncrementTick+0x1d4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <xTaskIncrementTick+0x48>
        __asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	607b      	str	r3, [r7, #4]
    }
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <xTaskIncrementTick+0x46>
 8004438:	4b62      	ldr	r3, [pc, #392]	; (80045c4 <xTaskIncrementTick+0x1d4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	4b62      	ldr	r3, [pc, #392]	; (80045c8 <xTaskIncrementTick+0x1d8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a60      	ldr	r2, [pc, #384]	; (80045c4 <xTaskIncrementTick+0x1d4>)
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	4a60      	ldr	r2, [pc, #384]	; (80045c8 <xTaskIncrementTick+0x1d8>)
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b5f      	ldr	r3, [pc, #380]	; (80045cc <xTaskIncrementTick+0x1dc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3301      	adds	r3, #1
 8004452:	4a5e      	ldr	r2, [pc, #376]	; (80045cc <xTaskIncrementTick+0x1dc>)
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	f000 fb89 	bl	8004b6c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800445a:	4b5d      	ldr	r3, [pc, #372]	; (80045d0 <xTaskIncrementTick+0x1e0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6a3a      	ldr	r2, [r7, #32]
 8004460:	429a      	cmp	r2, r3
 8004462:	f0c0 80a5 	bcc.w	80045b0 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004466:	4b57      	ldr	r3, [pc, #348]	; (80045c4 <xTaskIncrementTick+0x1d4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d104      	bne.n	800447a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004470:	4b57      	ldr	r3, [pc, #348]	; (80045d0 <xTaskIncrementTick+0x1e0>)
 8004472:	f04f 32ff 	mov.w	r2, #4294967295
 8004476:	601a      	str	r2, [r3, #0]
                    break;
 8004478:	e09a      	b.n	80045b0 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800447a:	4b52      	ldr	r3, [pc, #328]	; (80045c4 <xTaskIncrementTick+0x1d4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800448a:	6a3a      	ldr	r2, [r7, #32]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	429a      	cmp	r2, r3
 8004490:	d203      	bcs.n	800449a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004492:	4a4f      	ldr	r2, [pc, #316]	; (80045d0 <xTaskIncrementTick+0x1e0>)
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004498:	e08a      	b.n	80045b0 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	68d2      	ldr	r2, [r2, #12]
 80044a8:	609a      	str	r2, [r3, #8]
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	6892      	ldr	r2, [r2, #8]
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	3304      	adds	r3, #4
 80044bc:	429a      	cmp	r2, r3
 80044be:	d103      	bne.n	80044c8 <xTaskIncrementTick+0xd8>
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	605a      	str	r2, [r3, #4]
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2200      	movs	r2, #0
 80044cc:	615a      	str	r2, [r3, #20]
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	1e5a      	subs	r2, r3, #1
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01e      	beq.n	800451e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	6a12      	ldr	r2, [r2, #32]
 80044ee:	609a      	str	r2, [r3, #8]
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	69d2      	ldr	r2, [r2, #28]
 80044f8:	605a      	str	r2, [r3, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	3318      	adds	r3, #24
 8004502:	429a      	cmp	r2, r3
 8004504:	d103      	bne.n	800450e <xTaskIncrementTick+0x11e>
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2200      	movs	r2, #0
 8004512:	629a      	str	r2, [r3, #40]	; 0x28
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	1e5a      	subs	r2, r3, #1
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	4618      	mov	r0, r3
 8004522:	f7fe ff31 	bl	8003388 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	2201      	movs	r2, #1
 800452c:	409a      	lsls	r2, r3
 800452e:	4b29      	ldr	r3, [pc, #164]	; (80045d4 <xTaskIncrementTick+0x1e4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4313      	orrs	r3, r2
 8004534:	4a27      	ldr	r2, [pc, #156]	; (80045d4 <xTaskIncrementTick+0x1e4>)
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453c:	4926      	ldr	r1, [pc, #152]	; (80045d8 <xTaskIncrementTick+0x1e8>)
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	3304      	adds	r3, #4
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	60da      	str	r2, [r3, #12]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	3204      	adds	r2, #4
 8004564:	605a      	str	r2, [r3, #4]
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	1d1a      	adds	r2, r3, #4
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	609a      	str	r2, [r3, #8]
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4a17      	ldr	r2, [pc, #92]	; (80045d8 <xTaskIncrementTick+0x1e8>)
 800457c:	441a      	add	r2, r3
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	615a      	str	r2, [r3, #20]
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004586:	4914      	ldr	r1, [pc, #80]	; (80045d8 <xTaskIncrementTick+0x1e8>)
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	1c59      	adds	r1, r3, #1
 8004596:	4810      	ldr	r0, [pc, #64]	; (80045d8 <xTaskIncrementTick+0x1e8>)
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4403      	add	r3, r0
 80045a2:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045a4:	e75f      	b.n	8004466 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80045a6:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <xTaskIncrementTick+0x1ec>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3301      	adds	r3, #1
 80045ac:	4a0b      	ldr	r2, [pc, #44]	; (80045dc <xTaskIncrementTick+0x1ec>)
 80045ae:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3728      	adds	r7, #40	; 0x28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20001878 	.word	0x20001878
 80045c0:	20001854 	.word	0x20001854
 80045c4:	20001808 	.word	0x20001808
 80045c8:	2000180c 	.word	0x2000180c
 80045cc:	20001868 	.word	0x20001868
 80045d0:	20001870 	.word	0x20001870
 80045d4:	20001858 	.word	0x20001858
 80045d8:	2000177c 	.word	0x2000177c
 80045dc:	20001860 	.word	0x20001860

080045e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045e6:	4b2d      	ldr	r3, [pc, #180]	; (800469c <vTaskSwitchContext+0xbc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80045ee:	4b2c      	ldr	r3, [pc, #176]	; (80046a0 <vTaskSwitchContext+0xc0>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80045f4:	e04d      	b.n	8004692 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80045f6:	4b2a      	ldr	r3, [pc, #168]	; (80046a0 <vTaskSwitchContext+0xc0>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045fc:	4b29      	ldr	r3, [pc, #164]	; (80046a4 <vTaskSwitchContext+0xc4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	fab3 f383 	clz	r3, r3
 8004608:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800460a:	7afb      	ldrb	r3, [r7, #11]
 800460c:	f1c3 031f 	rsb	r3, r3, #31
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	4925      	ldr	r1, [pc, #148]	; (80046a8 <vTaskSwitchContext+0xc8>)
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10a      	bne.n	800463c <vTaskSwitchContext+0x5c>
        __asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	607b      	str	r3, [r7, #4]
    }
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <vTaskSwitchContext+0x5a>
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <vTaskSwitchContext+0xc8>)
 8004648:	4413      	add	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	3308      	adds	r3, #8
 800465e:	429a      	cmp	r2, r3
 8004660:	d104      	bne.n	800466c <vTaskSwitchContext+0x8c>
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	4a0e      	ldr	r2, [pc, #56]	; (80046ac <vTaskSwitchContext+0xcc>)
 8004674:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <vTaskSwitchContext+0xcc>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <vTaskSwitchContext+0xd0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d102      	bne.n	8004688 <vTaskSwitchContext+0xa8>
 8004682:	f7fe fde1 	bl	8003248 <SEGGER_SYSVIEW_OnIdle>
}
 8004686:	e004      	b.n	8004692 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8004688:	4b08      	ldr	r3, [pc, #32]	; (80046ac <vTaskSwitchContext+0xcc>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f7fe fe39 	bl	8003304 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004692:	bf00      	nop
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20001878 	.word	0x20001878
 80046a0:	20001864 	.word	0x20001864
 80046a4:	20001858 	.word	0x20001858
 80046a8:	2000177c 	.word	0x2000177c
 80046ac:	20001778 	.word	0x20001778
 80046b0:	20001874 	.word	0x20001874

080046b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	60fb      	str	r3, [r7, #12]
    }
 80046d6:	bf00      	nop
 80046d8:	e7fe      	b.n	80046d8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046da:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <vTaskPlaceOnEventList+0x44>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3318      	adds	r3, #24
 80046e0:	4619      	mov	r1, r3
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff f80f 	bl	8003706 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046e8:	2101      	movs	r1, #1
 80046ea:	6838      	ldr	r0, [r7, #0]
 80046ec:	f000 fa76 	bl	8004bdc <prvAddCurrentTaskToDelayedList>
}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	20001778 	.word	0x20001778

080046fc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	613b      	str	r3, [r7, #16]
    }
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	4b17      	ldr	r3, [pc, #92]	; (8004788 <vTaskPlaceOnEventListRestricted+0x8c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	61da      	str	r2, [r3, #28]
 8004732:	4b15      	ldr	r3, [pc, #84]	; (8004788 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	6892      	ldr	r2, [r2, #8]
 800473a:	621a      	str	r2, [r3, #32]
 800473c:	4b12      	ldr	r3, [pc, #72]	; (8004788 <vTaskPlaceOnEventListRestricted+0x8c>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	3218      	adds	r2, #24
 8004746:	605a      	str	r2, [r3, #4]
 8004748:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <vTaskPlaceOnEventListRestricted+0x8c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f103 0218 	add.w	r2, r3, #24
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	609a      	str	r2, [r3, #8]
 8004754:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800476c:	f04f 33ff 	mov.w	r3, #4294967295
 8004770:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004772:	2024      	movs	r0, #36	; 0x24
 8004774:	f7fe f86a 	bl	800284c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	68b8      	ldr	r0, [r7, #8]
 800477c:	f000 fa2e 	bl	8004bdc <prvAddCurrentTaskToDelayedList>
    }
 8004780:	bf00      	nop
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20001778 	.word	0x20001778

0800478c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	; 0x28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	60fb      	str	r3, [r7, #12]
    }
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	61fb      	str	r3, [r7, #28]
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	6a3a      	ldr	r2, [r7, #32]
 80047c4:	6a12      	ldr	r2, [r2, #32]
 80047c6:	609a      	str	r2, [r3, #8]
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	6a3a      	ldr	r2, [r7, #32]
 80047ce:	69d2      	ldr	r2, [r2, #28]
 80047d0:	605a      	str	r2, [r3, #4]
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	3318      	adds	r3, #24
 80047da:	429a      	cmp	r2, r3
 80047dc:	d103      	bne.n	80047e6 <xTaskRemoveFromEventList+0x5a>
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	6a1a      	ldr	r2, [r3, #32]
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	2200      	movs	r2, #0
 80047ea:	629a      	str	r2, [r3, #40]	; 0x28
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	1e5a      	subs	r2, r3, #1
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047f6:	4b4b      	ldr	r3, [pc, #300]	; (8004924 <xTaskRemoveFromEventList+0x198>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d162      	bne.n	80048c4 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	6a3a      	ldr	r2, [r7, #32]
 800480a:	68d2      	ldr	r2, [r2, #12]
 800480c:	609a      	str	r2, [r3, #8]
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	6a3a      	ldr	r2, [r7, #32]
 8004814:	6892      	ldr	r2, [r2, #8]
 8004816:	605a      	str	r2, [r3, #4]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	3304      	adds	r3, #4
 8004820:	429a      	cmp	r2, r3
 8004822:	d103      	bne.n	800482c <xTaskRemoveFromEventList+0xa0>
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	605a      	str	r2, [r3, #4]
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	2200      	movs	r2, #0
 8004830:	615a      	str	r2, [r3, #20]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	1e5a      	subs	r2, r3, #1
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe fda2 	bl	8003388 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	2201      	movs	r2, #1
 800484a:	409a      	lsls	r2, r3
 800484c:	4b36      	ldr	r3, [pc, #216]	; (8004928 <xTaskRemoveFromEventList+0x19c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4313      	orrs	r3, r2
 8004852:	4a35      	ldr	r2, [pc, #212]	; (8004928 <xTaskRemoveFromEventList+0x19c>)
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485a:	4934      	ldr	r1, [pc, #208]	; (800492c <xTaskRemoveFromEventList+0x1a0>)
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	3304      	adds	r3, #4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	609a      	str	r2, [r3, #8]
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	60da      	str	r2, [r3, #12]
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	6a3a      	ldr	r2, [r7, #32]
 8004880:	3204      	adds	r2, #4
 8004882:	605a      	str	r2, [r3, #4]
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	1d1a      	adds	r2, r3, #4
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	609a      	str	r2, [r3, #8]
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4a24      	ldr	r2, [pc, #144]	; (800492c <xTaskRemoveFromEventList+0x1a0>)
 800489a:	441a      	add	r2, r3
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	615a      	str	r2, [r3, #20]
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a4:	4921      	ldr	r1, [pc, #132]	; (800492c <xTaskRemoveFromEventList+0x1a0>)
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	440b      	add	r3, r1
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	1c59      	adds	r1, r3, #1
 80048b4:	481d      	ldr	r0, [pc, #116]	; (800492c <xTaskRemoveFromEventList+0x1a0>)
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4403      	add	r3, r0
 80048c0:	6019      	str	r1, [r3, #0]
 80048c2:	e01b      	b.n	80048fc <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048c4:	4b1a      	ldr	r3, [pc, #104]	; (8004930 <xTaskRemoveFromEventList+0x1a4>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	61da      	str	r2, [r3, #28]
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	621a      	str	r2, [r3, #32]
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	6a3a      	ldr	r2, [r7, #32]
 80048de:	3218      	adds	r2, #24
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	f103 0218 	add.w	r2, r3, #24
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	4a10      	ldr	r2, [pc, #64]	; (8004930 <xTaskRemoveFromEventList+0x1a4>)
 80048f0:	629a      	str	r2, [r3, #40]	; 0x28
 80048f2:	4b0f      	ldr	r3, [pc, #60]	; (8004930 <xTaskRemoveFromEventList+0x1a4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3301      	adds	r3, #1
 80048f8:	4a0d      	ldr	r2, [pc, #52]	; (8004930 <xTaskRemoveFromEventList+0x1a4>)
 80048fa:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <xTaskRemoveFromEventList+0x1a8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	429a      	cmp	r2, r3
 8004908:	d905      	bls.n	8004916 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800490a:	2301      	movs	r3, #1
 800490c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <xTaskRemoveFromEventList+0x1ac>)
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e001      	b.n	800491a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8004916:	2300      	movs	r3, #0
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800491c:	4618      	mov	r0, r3
 800491e:	3728      	adds	r7, #40	; 0x28
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	20001878 	.word	0x20001878
 8004928:	20001858 	.word	0x20001858
 800492c:	2000177c 	.word	0x2000177c
 8004930:	20001810 	.word	0x20001810
 8004934:	20001778 	.word	0x20001778
 8004938:	20001864 	.word	0x20001864

0800493c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004944:	4b06      	ldr	r3, [pc, #24]	; (8004960 <vTaskInternalSetTimeOutState+0x24>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <vTaskInternalSetTimeOutState+0x28>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	605a      	str	r2, [r3, #4]
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	20001868 	.word	0x20001868
 8004964:	20001854 	.word	0x20001854

08004968 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10a      	bne.n	800498e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	613b      	str	r3, [r7, #16]
    }
 800498a:	bf00      	nop
 800498c:	e7fe      	b.n	800498c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	60fb      	str	r3, [r7, #12]
    }
 80049a6:	bf00      	nop
 80049a8:	e7fe      	b.n	80049a8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80049aa:	f000 fd5f 	bl	800546c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80049ae:	4b1f      	ldr	r3, [pc, #124]	; (8004a2c <xTaskCheckForTimeOut+0xc4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c6:	d102      	bne.n	80049ce <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80049c8:	2300      	movs	r3, #0
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	e026      	b.n	8004a1c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	4b17      	ldr	r3, [pc, #92]	; (8004a30 <xTaskCheckForTimeOut+0xc8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d00a      	beq.n	80049f0 <xTaskCheckForTimeOut+0x88>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d305      	bcc.n	80049f0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80049e4:	2301      	movs	r3, #1
 80049e6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	e015      	b.n	8004a1c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d20b      	bcs.n	8004a12 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	1ad2      	subs	r2, r2, r3
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff ff98 	bl	800493c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	e004      	b.n	8004a1c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004a1c:	f000 fd56 	bl	80054cc <vPortExitCritical>

    return xReturn;
 8004a20:	69fb      	ldr	r3, [r7, #28]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3720      	adds	r7, #32
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20001854 	.word	0x20001854
 8004a30:	20001868 	.word	0x20001868

08004a34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004a38:	4b03      	ldr	r3, [pc, #12]	; (8004a48 <vTaskMissedYield+0x14>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
}
 8004a3e:	bf00      	nop
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	20001864 	.word	0x20001864

08004a4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004a54:	f000 f84c 	bl	8004af0 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8004a58:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <prvIdleTask+0x20>)
 8004a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004a68:	e7f4      	b.n	8004a54 <prvIdleTask+0x8>
 8004a6a:	bf00      	nop
 8004a6c:	e000ed04 	.word	0xe000ed04

08004a70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a76:	2300      	movs	r3, #0
 8004a78:	607b      	str	r3, [r7, #4]
 8004a7a:	e00c      	b.n	8004a96 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4a12      	ldr	r2, [pc, #72]	; (8004ad0 <prvInitialiseTaskLists+0x60>)
 8004a88:	4413      	add	r3, r2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe fe10 	bl	80036b0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3301      	adds	r3, #1
 8004a94:	607b      	str	r3, [r7, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d9ef      	bls.n	8004a7c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004a9c:	480d      	ldr	r0, [pc, #52]	; (8004ad4 <prvInitialiseTaskLists+0x64>)
 8004a9e:	f7fe fe07 	bl	80036b0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004aa2:	480d      	ldr	r0, [pc, #52]	; (8004ad8 <prvInitialiseTaskLists+0x68>)
 8004aa4:	f7fe fe04 	bl	80036b0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004aa8:	480c      	ldr	r0, [pc, #48]	; (8004adc <prvInitialiseTaskLists+0x6c>)
 8004aaa:	f7fe fe01 	bl	80036b0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004aae:	480c      	ldr	r0, [pc, #48]	; (8004ae0 <prvInitialiseTaskLists+0x70>)
 8004ab0:	f7fe fdfe 	bl	80036b0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004ab4:	480b      	ldr	r0, [pc, #44]	; (8004ae4 <prvInitialiseTaskLists+0x74>)
 8004ab6:	f7fe fdfb 	bl	80036b0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004aba:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <prvInitialiseTaskLists+0x78>)
 8004abc:	4a05      	ldr	r2, [pc, #20]	; (8004ad4 <prvInitialiseTaskLists+0x64>)
 8004abe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <prvInitialiseTaskLists+0x7c>)
 8004ac2:	4a05      	ldr	r2, [pc, #20]	; (8004ad8 <prvInitialiseTaskLists+0x68>)
 8004ac4:	601a      	str	r2, [r3, #0]
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	2000177c 	.word	0x2000177c
 8004ad4:	200017e0 	.word	0x200017e0
 8004ad8:	200017f4 	.word	0x200017f4
 8004adc:	20001810 	.word	0x20001810
 8004ae0:	20001824 	.word	0x20001824
 8004ae4:	2000183c 	.word	0x2000183c
 8004ae8:	20001808 	.word	0x20001808
 8004aec:	2000180c 	.word	0x2000180c

08004af0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004af6:	e019      	b.n	8004b2c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8004af8:	f000 fcb8 	bl	800546c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004afc:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <prvCheckTasksWaitingTermination+0x50>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fe fe34 	bl	8003776 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <prvCheckTasksWaitingTermination+0x54>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	4a0b      	ldr	r2, [pc, #44]	; (8004b44 <prvCheckTasksWaitingTermination+0x54>)
 8004b16:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004b18:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <prvCheckTasksWaitingTermination+0x58>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <prvCheckTasksWaitingTermination+0x58>)
 8004b20:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8004b22:	f000 fcd3 	bl	80054cc <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f810 	bl	8004b4c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <prvCheckTasksWaitingTermination+0x58>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e1      	bne.n	8004af8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20001824 	.word	0x20001824
 8004b44:	20001850 	.word	0x20001850
 8004b48:	20001838 	.word	0x20001838

08004b4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fe49 	bl	80057f0 <vPortFree>
            vPortFree( pxTCB );
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fe46 	bl	80057f0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004b64:	bf00      	nop
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <prvResetNextTaskUnblockTime+0x2c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d104      	bne.n	8004b84 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004b7a:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <prvResetNextTaskUnblockTime+0x30>)
 8004b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b80:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004b82:	e005      	b.n	8004b90 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b84:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <prvResetNextTaskUnblockTime+0x2c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a03      	ldr	r2, [pc, #12]	; (8004b9c <prvResetNextTaskUnblockTime+0x30>)
 8004b8e:	6013      	str	r3, [r2, #0]
}
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr
 8004b98:	20001808 	.word	0x20001808
 8004b9c:	20001870 	.word	0x20001870

08004ba0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <xTaskGetSchedulerState+0x34>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d102      	bne.n	8004bb4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	607b      	str	r3, [r7, #4]
 8004bb2:	e008      	b.n	8004bc6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bb4:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <xTaskGetSchedulerState+0x38>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d102      	bne.n	8004bc2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	607b      	str	r3, [r7, #4]
 8004bc0:	e001      	b.n	8004bc6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004bc6:	687b      	ldr	r3, [r7, #4]
    }
 8004bc8:	4618      	mov	r0, r3
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	2000185c 	.word	0x2000185c
 8004bd8:	20001878 	.word	0x20001878

08004bdc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004be6:	4b36      	ldr	r3, [pc, #216]	; (8004cc0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bec:	4b35      	ldr	r3, [pc, #212]	; (8004cc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe fdbf 	bl	8003776 <uxListRemove>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10b      	bne.n	8004c16 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004bfe:	4b31      	ldr	r3, [pc, #196]	; (8004cc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	2201      	movs	r2, #1
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43da      	mvns	r2, r3
 8004c0c:	4b2e      	ldr	r3, [pc, #184]	; (8004cc8 <prvAddCurrentTaskToDelayedList+0xec>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4013      	ands	r3, r2
 8004c12:	4a2d      	ldr	r2, [pc, #180]	; (8004cc8 <prvAddCurrentTaskToDelayedList+0xec>)
 8004c14:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d124      	bne.n	8004c68 <prvAddCurrentTaskToDelayedList+0x8c>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d021      	beq.n	8004c68 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c24:	4b29      	ldr	r3, [pc, #164]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	4b26      	ldr	r3, [pc, #152]	; (8004cc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	609a      	str	r2, [r3, #8]
 8004c32:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	6892      	ldr	r2, [r2, #8]
 8004c3a:	60da      	str	r2, [r3, #12]
 8004c3c:	4b21      	ldr	r3, [pc, #132]	; (8004cc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	3204      	adds	r2, #4
 8004c46:	605a      	str	r2, [r3, #4]
 8004c48:	4b1e      	ldr	r3, [pc, #120]	; (8004cc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	1d1a      	adds	r2, r3, #4
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	609a      	str	r2, [r3, #8]
 8004c52:	4b1c      	ldr	r3, [pc, #112]	; (8004cc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1d      	ldr	r2, [pc, #116]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004c58:	615a      	str	r2, [r3, #20]
 8004c5a:	4b1c      	ldr	r3, [pc, #112]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	4a1a      	ldr	r2, [pc, #104]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004c66:	e026      	b.n	8004cb6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c70:	4b14      	ldr	r3, [pc, #80]	; (8004cc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d209      	bcs.n	8004c94 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c80:	4b13      	ldr	r3, [pc, #76]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	4b0f      	ldr	r3, [pc, #60]	; (8004cc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	f7fe fd3a 	bl	8003706 <vListInsert>
}
 8004c92:	e010      	b.n	8004cb6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c94:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f7fe fd30 	bl	8003706 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d202      	bcs.n	8004cb6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004cb0:	4a09      	ldr	r2, [pc, #36]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6013      	str	r3, [r2, #0]
}
 8004cb6:	bf00      	nop
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20001854 	.word	0x20001854
 8004cc4:	20001778 	.word	0x20001778
 8004cc8:	20001858 	.word	0x20001858
 8004ccc:	2000183c 	.word	0x2000183c
 8004cd0:	2000180c 	.word	0x2000180c
 8004cd4:	20001808 	.word	0x20001808
 8004cd8:	20001870 	.word	0x20001870

08004cdc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004ce6:	f000 fa45 	bl	8005174 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004cea:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <xTimerCreateTimerTask+0x54>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004cf2:	4b10      	ldr	r3, [pc, #64]	; (8004d34 <xTimerCreateTimerTask+0x58>)
 8004cf4:	9301      	str	r3, [sp, #4]
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d00:	490d      	ldr	r1, [pc, #52]	; (8004d38 <xTimerCreateTimerTask+0x5c>)
 8004d02:	480e      	ldr	r0, [pc, #56]	; (8004d3c <xTimerCreateTimerTask+0x60>)
 8004d04:	f7ff f878 	bl	8003df8 <xTaskCreate>
 8004d08:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	603b      	str	r3, [r7, #0]
    }
 8004d22:	bf00      	nop
 8004d24:	e7fe      	b.n	8004d24 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004d26:	687b      	ldr	r3, [r7, #4]
    }
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	200018ac 	.word	0x200018ac
 8004d34:	200018b0 	.word	0x200018b0
 8004d38:	08005bc4 	.word	0x08005bc4
 8004d3c:	08004de5 	.word	0x08004de5

08004d40 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004d4c:	e008      	b.n	8004d60 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	4413      	add	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	699a      	ldr	r2, [r3, #24]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	18d1      	adds	r1, r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 f8db 	bl	8004f28 <prvInsertTimerInActiveList>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1ea      	bne.n	8004d4e <prvReloadTimer+0xe>
        }
    }
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d8e:	4b14      	ldr	r3, [pc, #80]	; (8004de0 <prvProcessExpiredTimer+0x5c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fe fcea 	bl	8003776 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f7ff ffc3 	bl	8004d40 <prvReloadTimer>
 8004dba:	e008      	b.n	8004dce <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	4798      	blx	r3
    }
 8004dd6:	bf00      	nop
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	200018a4 	.word	0x200018a4

08004de4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dec:	f107 0308 	add.w	r3, r7, #8
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 f857 	bl	8004ea4 <prvGetNextExpireTime>
 8004df6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f803 	bl	8004e08 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004e02:	f000 f8d3 	bl	8004fac <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e06:	e7f1      	b.n	8004dec <prvTimerTask+0x8>

08004e08 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004e12:	f7ff f9cd 	bl	80041b0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e16:	f107 0308 	add.w	r3, r7, #8
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 f864 	bl	8004ee8 <prvSampleTimeNow>
 8004e20:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d130      	bne.n	8004e8a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <prvProcessTimerOrBlockTask+0x3c>
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d806      	bhi.n	8004e44 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004e36:	f7ff f9c9 	bl	80041cc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7ff ffa1 	bl	8004d84 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004e42:	e024      	b.n	8004e8e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d008      	beq.n	8004e5c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e4a:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <prvProcessTimerOrBlockTask+0x90>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <prvProcessTimerOrBlockTask+0x50>
 8004e54:	2301      	movs	r3, #1
 8004e56:	e000      	b.n	8004e5a <prvProcessTimerOrBlockTask+0x52>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e5c:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <prvProcessTimerOrBlockTask+0x94>)
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	f7fe ff91 	bl	8003d90 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004e6e:	f7ff f9ad 	bl	80041cc <xTaskResumeAll>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10a      	bne.n	8004e8e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004e78:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <prvProcessTimerOrBlockTask+0x98>)
 8004e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	f3bf 8f6f 	isb	sy
    }
 8004e88:	e001      	b.n	8004e8e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004e8a:	f7ff f99f 	bl	80041cc <xTaskResumeAll>
    }
 8004e8e:	bf00      	nop
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	200018a8 	.word	0x200018a8
 8004e9c:	200018ac 	.word	0x200018ac
 8004ea0:	e000ed04 	.word	0xe000ed04

08004ea4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004eac:	4b0d      	ldr	r3, [pc, #52]	; (8004ee4 <prvGetNextExpireTime+0x40>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <prvGetNextExpireTime+0x16>
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	e000      	b.n	8004ebc <prvGetNextExpireTime+0x18>
 8004eba:	2200      	movs	r2, #0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d105      	bne.n	8004ed4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ec8:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <prvGetNextExpireTime+0x40>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	e001      	b.n	8004ed8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
    }
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr
 8004ee4:	200018a4 	.word	0x200018a4

08004ee8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004ef0:	f7ff fa5e 	bl	80043b0 <xTaskGetTickCount>
 8004ef4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <prvSampleTimeNow+0x3c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d205      	bcs.n	8004f0c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004f00:	f000 f912 	bl	8005128 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	e002      	b.n	8004f12 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004f12:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <prvSampleTimeNow+0x3c>)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004f18:	68fb      	ldr	r3, [r7, #12]
    }
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	200018b4 	.word	0x200018b4

08004f28 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d812      	bhi.n	8004f74 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	1ad2      	subs	r2, r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d302      	bcc.n	8004f62 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e01b      	b.n	8004f9a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f62:	4b10      	ldr	r3, [pc, #64]	; (8004fa4 <prvInsertTimerInActiveList+0x7c>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f7fe fbca 	bl	8003706 <vListInsert>
 8004f72:	e012      	b.n	8004f9a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d206      	bcs.n	8004f8a <prvInsertTimerInActiveList+0x62>
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d302      	bcc.n	8004f8a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004f84:	2301      	movs	r3, #1
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e007      	b.n	8004f9a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f8a:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <prvInsertTimerInActiveList+0x80>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4619      	mov	r1, r3
 8004f94:	4610      	mov	r0, r2
 8004f96:	f7fe fbb6 	bl	8003706 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004f9a:	697b      	ldr	r3, [r7, #20]
    }
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	200018a8 	.word	0x200018a8
 8004fa8:	200018a4 	.word	0x200018a4

08004fac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fb2:	e0a6      	b.n	8005102 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f2c0 80a3 	blt.w	8005102 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d004      	beq.n	8004fd2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fe fbd2 	bl	8003776 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fd2:	1d3b      	adds	r3, r7, #4
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ff87 	bl	8004ee8 <prvSampleTimeNow>
 8004fda:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	f200 808d 	bhi.w	8005100 <prvProcessReceivedCommands+0x154>
 8004fe6:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <prvProcessReceivedCommands+0x40>)
 8004fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fec:	08005011 	.word	0x08005011
 8004ff0:	08005011 	.word	0x08005011
 8004ff4:	08005079 	.word	0x08005079
 8004ff8:	0800508d 	.word	0x0800508d
 8004ffc:	080050d7 	.word	0x080050d7
 8005000:	08005011 	.word	0x08005011
 8005004:	08005011 	.word	0x08005011
 8005008:	08005079 	.word	0x08005079
 800500c:	0800508d 	.word	0x0800508d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	b2da      	uxtb	r2, r3
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	18d1      	adds	r1, r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	69f8      	ldr	r0, [r7, #28]
 8005030:	f7ff ff7a 	bl	8004f28 <prvInsertTimerInActiveList>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d063      	beq.n	8005102 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d009      	beq.n	800505c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	4413      	add	r3, r2
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4619      	mov	r1, r3
 8005054:	69f8      	ldr	r0, [r7, #28]
 8005056:	f7ff fe73 	bl	8004d40 <prvReloadTimer>
 800505a:	e008      	b.n	800506e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005062:	f023 0301 	bic.w	r3, r3, #1
 8005066:	b2da      	uxtb	r2, r3
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	69f8      	ldr	r0, [r7, #28]
 8005074:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005076:	e044      	b.n	8005102 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	b2da      	uxtb	r2, r3
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800508a:	e03a      	b.n	8005102 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	b2da      	uxtb	r2, r3
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	617b      	str	r3, [r7, #20]
    }
 80050be:	bf00      	nop
 80050c0:	e7fe      	b.n	80050c0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	18d1      	adds	r1, r2, r3
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	69f8      	ldr	r0, [r7, #28]
 80050d0:	f7ff ff2a 	bl	8004f28 <prvInsertTimerInActiveList>
                        break;
 80050d4:	e015      	b.n	8005102 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d103      	bne.n	80050ec <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80050e4:	69f8      	ldr	r0, [r7, #28]
 80050e6:	f000 fb83 	bl	80057f0 <vPortFree>
 80050ea:	e00a      	b.n	8005102 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050f2:	f023 0301 	bic.w	r3, r3, #1
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80050fe:	e000      	b.n	8005102 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005100:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005102:	4b08      	ldr	r3, [pc, #32]	; (8005124 <prvProcessReceivedCommands+0x178>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f107 0108 	add.w	r1, r7, #8
 800510a:	2200      	movs	r2, #0
 800510c:	4618      	mov	r0, r3
 800510e:	f7fe fc55 	bl	80039bc <xQueueReceive>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	f47f af4d 	bne.w	8004fb4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800511a:	bf00      	nop
 800511c:	bf00      	nop
 800511e:	3720      	adds	r7, #32
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	200018ac 	.word	0x200018ac

08005128 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800512e:	e009      	b.n	8005144 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005130:	4b0e      	ldr	r3, [pc, #56]	; (800516c <prvSwitchTimerLists+0x44>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800513a:	f04f 31ff 	mov.w	r1, #4294967295
 800513e:	6838      	ldr	r0, [r7, #0]
 8005140:	f7ff fe20 	bl	8004d84 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005144:	4b09      	ldr	r3, [pc, #36]	; (800516c <prvSwitchTimerLists+0x44>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f0      	bne.n	8005130 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800514e:	4b07      	ldr	r3, [pc, #28]	; (800516c <prvSwitchTimerLists+0x44>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005154:	4b06      	ldr	r3, [pc, #24]	; (8005170 <prvSwitchTimerLists+0x48>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a04      	ldr	r2, [pc, #16]	; (800516c <prvSwitchTimerLists+0x44>)
 800515a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800515c:	4a04      	ldr	r2, [pc, #16]	; (8005170 <prvSwitchTimerLists+0x48>)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6013      	str	r3, [r2, #0]
    }
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	200018a4 	.word	0x200018a4
 8005170:	200018a8 	.word	0x200018a8

08005174 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005178:	f000 f978 	bl	800546c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800517c:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <prvCheckForValidListAndQueue+0x54>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d11d      	bne.n	80051c0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005184:	4811      	ldr	r0, [pc, #68]	; (80051cc <prvCheckForValidListAndQueue+0x58>)
 8005186:	f7fe fa93 	bl	80036b0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800518a:	4811      	ldr	r0, [pc, #68]	; (80051d0 <prvCheckForValidListAndQueue+0x5c>)
 800518c:	f7fe fa90 	bl	80036b0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005190:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <prvCheckForValidListAndQueue+0x60>)
 8005192:	4a0e      	ldr	r2, [pc, #56]	; (80051cc <prvCheckForValidListAndQueue+0x58>)
 8005194:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005196:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <prvCheckForValidListAndQueue+0x64>)
 8005198:	4a0d      	ldr	r2, [pc, #52]	; (80051d0 <prvCheckForValidListAndQueue+0x5c>)
 800519a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800519c:	2200      	movs	r2, #0
 800519e:	210c      	movs	r1, #12
 80051a0:	200a      	movs	r0, #10
 80051a2:	f7fe fb93 	bl	80038cc <xQueueGenericCreate>
 80051a6:	4603      	mov	r3, r0
 80051a8:	4a07      	ldr	r2, [pc, #28]	; (80051c8 <prvCheckForValidListAndQueue+0x54>)
 80051aa:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <prvCheckForValidListAndQueue+0x54>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051b4:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <prvCheckForValidListAndQueue+0x54>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4908      	ldr	r1, [pc, #32]	; (80051dc <prvCheckForValidListAndQueue+0x68>)
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe fd92 	bl	8003ce4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80051c0:	f000 f984 	bl	80054cc <vPortExitCritical>
    }
 80051c4:	bf00      	nop
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	200018ac 	.word	0x200018ac
 80051cc:	2000187c 	.word	0x2000187c
 80051d0:	20001890 	.word	0x20001890
 80051d4:	200018a4 	.word	0x200018a4
 80051d8:	200018a8 	.word	0x200018a8
 80051dc:	08005bcc 	.word	0x08005bcc

080051e0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3b04      	subs	r3, #4
 80051f0:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3b04      	subs	r3, #4
 80051fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f023 0201 	bic.w	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3b04      	subs	r3, #4
 800520e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005210:	4a08      	ldr	r2, [pc, #32]	; (8005234 <pxPortInitialiseStack+0x54>)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3b14      	subs	r3, #20
 800521a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3b20      	subs	r3, #32
 8005226:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005228:	68fb      	ldr	r3, [r7, #12]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr
 8005234:	08005239 	.word	0x08005239

08005238 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800523e:	2300      	movs	r3, #0
 8005240:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005242:	4b12      	ldr	r3, [pc, #72]	; (800528c <prvTaskExitError+0x54>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524a:	d00a      	beq.n	8005262 <prvTaskExitError+0x2a>
        __asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	60fb      	str	r3, [r7, #12]
    }
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <prvTaskExitError+0x28>
        __asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	60bb      	str	r3, [r7, #8]
    }
 8005274:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005276:	bf00      	nop
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0fc      	beq.n	8005278 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800527e:	bf00      	nop
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	bc80      	pop	{r7}
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	20000010 	.word	0x20000010

08005290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005290:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <pxCurrentTCBConst2>)
 8005292:	6819      	ldr	r1, [r3, #0]
 8005294:	6808      	ldr	r0, [r1, #0]
 8005296:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800529a:	f380 8809 	msr	PSP, r0
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f04f 0000 	mov.w	r0, #0
 80052a6:	f380 8811 	msr	BASEPRI, r0
 80052aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80052ae:	4770      	bx	lr

080052b0 <pxCurrentTCBConst2>:
 80052b0:	20001778 	.word	0x20001778
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop

080052b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80052b8:	4806      	ldr	r0, [pc, #24]	; (80052d4 <prvPortStartFirstTask+0x1c>)
 80052ba:	6800      	ldr	r0, [r0, #0]
 80052bc:	6800      	ldr	r0, [r0, #0]
 80052be:	f380 8808 	msr	MSP, r0
 80052c2:	b662      	cpsie	i
 80052c4:	b661      	cpsie	f
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	df00      	svc	0
 80052d0:	bf00      	nop
 80052d2:	0000      	.short	0x0000
 80052d4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop

080052dc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052e2:	4b32      	ldr	r3, [pc, #200]	; (80053ac <xPortStartScheduler+0xd0>)
 80052e4:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	22ff      	movs	r2, #255	; 0xff
 80052f2:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005304:	b2da      	uxtb	r2, r3
 8005306:	4b2a      	ldr	r3, [pc, #168]	; (80053b0 <xPortStartScheduler+0xd4>)
 8005308:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800530a:	4b2a      	ldr	r3, [pc, #168]	; (80053b4 <xPortStartScheduler+0xd8>)
 800530c:	2207      	movs	r2, #7
 800530e:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005310:	e009      	b.n	8005326 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8005312:	4b28      	ldr	r3, [pc, #160]	; (80053b4 <xPortStartScheduler+0xd8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3b01      	subs	r3, #1
 8005318:	4a26      	ldr	r2, [pc, #152]	; (80053b4 <xPortStartScheduler+0xd8>)
 800531a:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	b2db      	uxtb	r3, r3
 8005324:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005326:	78fb      	ldrb	r3, [r7, #3]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532e:	2b80      	cmp	r3, #128	; 0x80
 8005330:	d0ef      	beq.n	8005312 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005332:	4b20      	ldr	r3, [pc, #128]	; (80053b4 <xPortStartScheduler+0xd8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f1c3 0307 	rsb	r3, r3, #7
 800533a:	2b04      	cmp	r3, #4
 800533c:	d00a      	beq.n	8005354 <xPortStartScheduler+0x78>
        __asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	60bb      	str	r3, [r7, #8]
    }
 8005350:	bf00      	nop
 8005352:	e7fe      	b.n	8005352 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005354:	4b17      	ldr	r3, [pc, #92]	; (80053b4 <xPortStartScheduler+0xd8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	4a16      	ldr	r2, [pc, #88]	; (80053b4 <xPortStartScheduler+0xd8>)
 800535c:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800535e:	4b15      	ldr	r3, [pc, #84]	; (80053b4 <xPortStartScheduler+0xd8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005366:	4a13      	ldr	r2, [pc, #76]	; (80053b4 <xPortStartScheduler+0xd8>)
 8005368:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	b2da      	uxtb	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005372:	4b11      	ldr	r3, [pc, #68]	; (80053b8 <xPortStartScheduler+0xdc>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a10      	ldr	r2, [pc, #64]	; (80053b8 <xPortStartScheduler+0xdc>)
 8005378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800537c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800537e:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <xPortStartScheduler+0xdc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a0d      	ldr	r2, [pc, #52]	; (80053b8 <xPortStartScheduler+0xdc>)
 8005384:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005388:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800538a:	f000 f917 	bl	80055bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800538e:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <xPortStartScheduler+0xe0>)
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005394:	f7ff ff90 	bl	80052b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005398:	f7ff f922 	bl	80045e0 <vTaskSwitchContext>
    prvTaskExitError();
 800539c:	f7ff ff4c 	bl	8005238 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	e000e400 	.word	0xe000e400
 80053b0:	200018b8 	.word	0x200018b8
 80053b4:	200018bc 	.word	0x200018bc
 80053b8:	e000ed20 	.word	0xe000ed20
 80053bc:	20000010 	.word	0x20000010

080053c0 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
//    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053c6:	4b26      	ldr	r3, [pc, #152]	; (8005460 <vInitPrioGroupValue+0xa0>)
 80053c8:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	22ff      	movs	r2, #255	; 0xff
 80053d6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	4b1e      	ldr	r3, [pc, #120]	; (8005464 <vInitPrioGroupValue+0xa4>)
 80053ec:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053ee:	4b1e      	ldr	r3, [pc, #120]	; (8005468 <vInitPrioGroupValue+0xa8>)
 80053f0:	2207      	movs	r2, #7
 80053f2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053f4:	e009      	b.n	800540a <vInitPrioGroupValue+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80053f6:	4b1c      	ldr	r3, [pc, #112]	; (8005468 <vInitPrioGroupValue+0xa8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	4a1a      	ldr	r2, [pc, #104]	; (8005468 <vInitPrioGroupValue+0xa8>)
 80053fe:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	b2db      	uxtb	r3, r3
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	b2db      	uxtb	r3, r3
 8005408:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800540a:	78fb      	ldrb	r3, [r7, #3]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005412:	2b80      	cmp	r3, #128	; 0x80
 8005414:	d0ef      	beq.n	80053f6 <vInitPrioGroupValue+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005416:	4b14      	ldr	r3, [pc, #80]	; (8005468 <vInitPrioGroupValue+0xa8>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f1c3 0307 	rsb	r3, r3, #7
 800541e:	2b04      	cmp	r3, #4
 8005420:	d00a      	beq.n	8005438 <vInitPrioGroupValue+0x78>
        __asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	60bb      	str	r3, [r7, #8]
    }
 8005434:	bf00      	nop
 8005436:	e7fe      	b.n	8005436 <vInitPrioGroupValue+0x76>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <vInitPrioGroupValue+0xa8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	4a0a      	ldr	r2, [pc, #40]	; (8005468 <vInitPrioGroupValue+0xa8>)
 8005440:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005442:	4b09      	ldr	r3, [pc, #36]	; (8005468 <vInitPrioGroupValue+0xa8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800544a:	4a07      	ldr	r2, [pc, #28]	; (8005468 <vInitPrioGroupValue+0xa8>)
 800544c:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	b2da      	uxtb	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8005456:	bf00      	nop
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr
 8005460:	e000e400 	.word	0xe000e400
 8005464:	200018b8 	.word	0x200018b8
 8005468:	200018bc 	.word	0x200018bc

0800546c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
        __asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	607b      	str	r3, [r7, #4]
    }
 8005484:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005486:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <vPortEnterCritical+0x58>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3301      	adds	r3, #1
 800548c:	4a0d      	ldr	r2, [pc, #52]	; (80054c4 <vPortEnterCritical+0x58>)
 800548e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005490:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <vPortEnterCritical+0x58>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d10f      	bne.n	80054b8 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005498:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <vPortEnterCritical+0x5c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <vPortEnterCritical+0x4c>
        __asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	603b      	str	r3, [r7, #0]
    }
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <vPortEnterCritical+0x4a>
    }
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20000010 	.word	0x20000010
 80054c8:	e000ed04 	.word	0xe000ed04

080054cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80054d2:	4b11      	ldr	r3, [pc, #68]	; (8005518 <vPortExitCritical+0x4c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10a      	bne.n	80054f0 <vPortExitCritical+0x24>
        __asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	607b      	str	r3, [r7, #4]
    }
 80054ec:	bf00      	nop
 80054ee:	e7fe      	b.n	80054ee <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80054f0:	4b09      	ldr	r3, [pc, #36]	; (8005518 <vPortExitCritical+0x4c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	4a08      	ldr	r2, [pc, #32]	; (8005518 <vPortExitCritical+0x4c>)
 80054f8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80054fa:	4b07      	ldr	r3, [pc, #28]	; (8005518 <vPortExitCritical+0x4c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d105      	bne.n	800550e <vPortExitCritical+0x42>
 8005502:	2300      	movs	r3, #0
 8005504:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800550c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr
 8005518:	20000010 	.word	0x20000010
 800551c:	00000000 	.word	0x00000000

08005520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005520:	f3ef 8009 	mrs	r0, PSP
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	4b0d      	ldr	r3, [pc, #52]	; (8005560 <pxCurrentTCBConst>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005530:	6010      	str	r0, [r2, #0]
 8005532:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005536:	f04f 0050 	mov.w	r0, #80	; 0x50
 800553a:	f380 8811 	msr	BASEPRI, r0
 800553e:	f7ff f84f 	bl	80045e0 <vTaskSwitchContext>
 8005542:	f04f 0000 	mov.w	r0, #0
 8005546:	f380 8811 	msr	BASEPRI, r0
 800554a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	6808      	ldr	r0, [r1, #0]
 8005552:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005556:	f380 8809 	msr	PSP, r0
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	4770      	bx	lr

08005560 <pxCurrentTCBConst>:
 8005560:	20001778 	.word	0x20001778
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop

08005568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
        __asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	607b      	str	r3, [r7, #4]
    }
 8005580:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005582:	f7fd fde7 	bl	8003154 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005586:	f7fe ff33 	bl	80043f0 <xTaskIncrementTick>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d006      	beq.n	800559e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8005590:	f7fd fe3e 	bl	8003210 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005594:	4b08      	ldr	r3, [pc, #32]	; (80055b8 <SysTick_Handler+0x50>)
 8005596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	e001      	b.n	80055a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800559e:	f7fd fe1b 	bl	80031d8 <SEGGER_SYSVIEW_RecordExitISR>
 80055a2:	2300      	movs	r3, #0
 80055a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	f383 8811 	msr	BASEPRI, r3
    }
 80055ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	e000ed04 	.word	0xe000ed04

080055bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055c0:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <vPortSetupTimerInterrupt+0x30>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <vPortSetupTimerInterrupt+0x34>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055cc:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <vPortSetupTimerInterrupt+0x38>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a09      	ldr	r2, [pc, #36]	; (80055f8 <vPortSetupTimerInterrupt+0x3c>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	099b      	lsrs	r3, r3, #6
 80055d8:	4a08      	ldr	r2, [pc, #32]	; (80055fc <vPortSetupTimerInterrupt+0x40>)
 80055da:	3b01      	subs	r3, #1
 80055dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055de:	4b03      	ldr	r3, [pc, #12]	; (80055ec <vPortSetupTimerInterrupt+0x30>)
 80055e0:	2207      	movs	r2, #7
 80055e2:	601a      	str	r2, [r3, #0]
}
 80055e4:	bf00      	nop
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr
 80055ec:	e000e010 	.word	0xe000e010
 80055f0:	e000e018 	.word	0xe000e018
 80055f4:	20000000 	.word	0x20000000
 80055f8:	10624dd3 	.word	0x10624dd3
 80055fc:	e000e014 	.word	0xe000e014

08005600 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005606:	f3ef 8305 	mrs	r3, IPSR
 800560a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b0f      	cmp	r3, #15
 8005610:	d914      	bls.n	800563c <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005612:	4a16      	ldr	r2, [pc, #88]	; (800566c <vPortValidateInterruptPriority+0x6c>)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4413      	add	r3, r2
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800561c:	4b14      	ldr	r3, [pc, #80]	; (8005670 <vPortValidateInterruptPriority+0x70>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	7afa      	ldrb	r2, [r7, #11]
 8005622:	429a      	cmp	r2, r3
 8005624:	d20a      	bcs.n	800563c <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	607b      	str	r3, [r7, #4]
    }
 8005638:	bf00      	nop
 800563a:	e7fe      	b.n	800563a <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800563c:	4b0d      	ldr	r3, [pc, #52]	; (8005674 <vPortValidateInterruptPriority+0x74>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005644:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <vPortValidateInterruptPriority+0x78>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d90a      	bls.n	8005662 <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	603b      	str	r3, [r7, #0]
    }
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <vPortValidateInterruptPriority+0x60>
    }
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr
 800566c:	e000e3f0 	.word	0xe000e3f0
 8005670:	200018b8 	.word	0x200018b8
 8005674:	e000ed0c 	.word	0xe000ed0c
 8005678:	200018bc 	.word	0x200018bc

0800567c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	; 0x28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005684:	2300      	movs	r3, #0
 8005686:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8005688:	f7fe fd92 	bl	80041b0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800568c:	4b53      	ldr	r3, [pc, #332]	; (80057dc <pvPortMalloc+0x160>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005694:	f000 f908 	bl	80058a8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d012      	beq.n	80056c4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800569e:	2208      	movs	r2, #8
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	3308      	adds	r3, #8
 80056aa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	43db      	mvns	r3, r3
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d804      	bhi.n	80056c0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	4413      	add	r3, r2
 80056bc:	607b      	str	r3, [r7, #4]
 80056be:	e001      	b.n	80056c4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	db70      	blt.n	80057ac <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d06d      	beq.n	80057ac <pvPortMalloc+0x130>
 80056d0:	4b43      	ldr	r3, [pc, #268]	; (80057e0 <pvPortMalloc+0x164>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d868      	bhi.n	80057ac <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80056da:	4b42      	ldr	r3, [pc, #264]	; (80057e4 <pvPortMalloc+0x168>)
 80056dc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80056de:	4b41      	ldr	r3, [pc, #260]	; (80057e4 <pvPortMalloc+0x168>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056e4:	e004      	b.n	80056f0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d903      	bls.n	8005702 <pvPortMalloc+0x86>
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f1      	bne.n	80056e6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005702:	4b36      	ldr	r3, [pc, #216]	; (80057dc <pvPortMalloc+0x160>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005708:	429a      	cmp	r2, r3
 800570a:	d04f      	beq.n	80057ac <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2208      	movs	r2, #8
 8005712:	4413      	add	r3, r2
 8005714:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	1ad2      	subs	r2, r2, r3
 8005726:	2308      	movs	r3, #8
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	429a      	cmp	r2, r3
 800572c:	d91f      	bls.n	800576e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800572e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4413      	add	r3, r2
 8005734:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <pvPortMalloc+0xda>
        __asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	613b      	str	r3, [r7, #16]
    }
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	1ad2      	subs	r2, r2, r3
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005768:	6978      	ldr	r0, [r7, #20]
 800576a:	f000 f8f9 	bl	8005960 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800576e:	4b1c      	ldr	r3, [pc, #112]	; (80057e0 <pvPortMalloc+0x164>)
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	4a19      	ldr	r2, [pc, #100]	; (80057e0 <pvPortMalloc+0x164>)
 800577a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800577c:	4b18      	ldr	r3, [pc, #96]	; (80057e0 <pvPortMalloc+0x164>)
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	4b19      	ldr	r3, [pc, #100]	; (80057e8 <pvPortMalloc+0x16c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d203      	bcs.n	8005790 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005788:	4b15      	ldr	r3, [pc, #84]	; (80057e0 <pvPortMalloc+0x164>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a16      	ldr	r2, [pc, #88]	; (80057e8 <pvPortMalloc+0x16c>)
 800578e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80057a2:	4b12      	ldr	r3, [pc, #72]	; (80057ec <pvPortMalloc+0x170>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3301      	adds	r3, #1
 80057a8:	4a10      	ldr	r2, [pc, #64]	; (80057ec <pvPortMalloc+0x170>)
 80057aa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80057ac:	f7fe fd0e 	bl	80041cc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <pvPortMalloc+0x154>
        __asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	60fb      	str	r3, [r7, #12]
    }
 80057cc:	bf00      	nop
 80057ce:	e7fe      	b.n	80057ce <pvPortMalloc+0x152>
    return pvReturn;
 80057d0:	69fb      	ldr	r3, [r7, #28]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3728      	adds	r7, #40	; 0x28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	200040c8 	.word	0x200040c8
 80057e0:	200040cc 	.word	0x200040cc
 80057e4:	200040c0 	.word	0x200040c0
 80057e8:	200040d0 	.word	0x200040d0
 80057ec:	200040d4 	.word	0x200040d4

080057f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d049      	beq.n	8005896 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005802:	2308      	movs	r3, #8
 8005804:	425b      	negs	r3, r3
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4413      	add	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	db0a      	blt.n	800582e <vPortFree+0x3e>
        __asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	60fb      	str	r3, [r7, #12]
    }
 800582a:	bf00      	nop
 800582c:	e7fe      	b.n	800582c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <vPortFree+0x5c>
        __asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	60bb      	str	r3, [r7, #8]
    }
 8005848:	bf00      	nop
 800584a:	e7fe      	b.n	800584a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	0fdb      	lsrs	r3, r3, #31
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01c      	beq.n	8005896 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d118      	bne.n	8005896 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8005870:	f7fe fc9e 	bl	80041b0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <vPortFree+0xb0>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4413      	add	r3, r2
 800587e:	4a08      	ldr	r2, [pc, #32]	; (80058a0 <vPortFree+0xb0>)
 8005880:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005882:	6938      	ldr	r0, [r7, #16]
 8005884:	f000 f86c 	bl	8005960 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005888:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <vPortFree+0xb4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3301      	adds	r3, #1
 800588e:	4a05      	ldr	r2, [pc, #20]	; (80058a4 <vPortFree+0xb4>)
 8005890:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005892:	f7fe fc9b 	bl	80041cc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005896:	bf00      	nop
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	200040cc 	.word	0x200040cc
 80058a4:	200040d8 	.word	0x200040d8

080058a8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80058b2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80058b4:	4b25      	ldr	r3, [pc, #148]	; (800594c <prvHeapInit+0xa4>)
 80058b6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00c      	beq.n	80058dc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3307      	adds	r3, #7
 80058c6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0307 	bic.w	r3, r3, #7
 80058ce:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	4a1d      	ldr	r2, [pc, #116]	; (800594c <prvHeapInit+0xa4>)
 80058d8:	4413      	add	r3, r2
 80058da:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058e0:	4a1b      	ldr	r2, [pc, #108]	; (8005950 <prvHeapInit+0xa8>)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80058e6:	4b1a      	ldr	r3, [pc, #104]	; (8005950 <prvHeapInit+0xa8>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	4413      	add	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80058f4:	2208      	movs	r2, #8
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	1a9b      	subs	r3, r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0307 	bic.w	r3, r3, #7
 8005902:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4a13      	ldr	r2, [pc, #76]	; (8005954 <prvHeapInit+0xac>)
 8005908:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800590a:	4b12      	ldr	r3, [pc, #72]	; (8005954 <prvHeapInit+0xac>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2200      	movs	r2, #0
 8005910:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005912:	4b10      	ldr	r3, [pc, #64]	; (8005954 <prvHeapInit+0xac>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	1ad2      	subs	r2, r2, r3
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005928:	4b0a      	ldr	r3, [pc, #40]	; (8005954 <prvHeapInit+0xac>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	4a08      	ldr	r2, [pc, #32]	; (8005958 <prvHeapInit+0xb0>)
 8005936:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	4a07      	ldr	r2, [pc, #28]	; (800595c <prvHeapInit+0xb4>)
 800593e:	6013      	str	r3, [r2, #0]
}
 8005940:	bf00      	nop
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	bc80      	pop	{r7}
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	200018c0 	.word	0x200018c0
 8005950:	200040c0 	.word	0x200040c0
 8005954:	200040c8 	.word	0x200040c8
 8005958:	200040d0 	.word	0x200040d0
 800595c:	200040cc 	.word	0x200040cc

08005960 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005968:	4b27      	ldr	r3, [pc, #156]	; (8005a08 <prvInsertBlockIntoFreeList+0xa8>)
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	e002      	b.n	8005974 <prvInsertBlockIntoFreeList+0x14>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	429a      	cmp	r2, r3
 800597c:	d8f7      	bhi.n	800596e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	4413      	add	r3, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	429a      	cmp	r2, r3
 800598e:	d108      	bne.n	80059a2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	441a      	add	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	441a      	add	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d118      	bne.n	80059e8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <prvInsertBlockIntoFreeList+0xac>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d00d      	beq.n	80059de <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	441a      	add	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	e008      	b.n	80059f0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059de:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <prvInsertBlockIntoFreeList+0xac>)
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	e003      	b.n	80059f0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d002      	beq.n	80059fe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80059fe:	bf00      	nop
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr
 8005a08:	200040c0 	.word	0x200040c0
 8005a0c:	200040c8 	.word	0x200040c8

08005a10 <memcmp>:
 8005a10:	b510      	push	{r4, lr}
 8005a12:	3901      	subs	r1, #1
 8005a14:	4402      	add	r2, r0
 8005a16:	4290      	cmp	r0, r2
 8005a18:	d101      	bne.n	8005a1e <memcmp+0xe>
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	e005      	b.n	8005a2a <memcmp+0x1a>
 8005a1e:	7803      	ldrb	r3, [r0, #0]
 8005a20:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	d001      	beq.n	8005a2c <memcmp+0x1c>
 8005a28:	1b18      	subs	r0, r3, r4
 8005a2a:	bd10      	pop	{r4, pc}
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	e7f2      	b.n	8005a16 <memcmp+0x6>

08005a30 <memset>:
 8005a30:	4603      	mov	r3, r0
 8005a32:	4402      	add	r2, r0
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d100      	bne.n	8005a3a <memset+0xa>
 8005a38:	4770      	bx	lr
 8005a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a3e:	e7f9      	b.n	8005a34 <memset+0x4>

08005a40 <__libc_init_array>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	2600      	movs	r6, #0
 8005a44:	4d0c      	ldr	r5, [pc, #48]	; (8005a78 <__libc_init_array+0x38>)
 8005a46:	4c0d      	ldr	r4, [pc, #52]	; (8005a7c <__libc_init_array+0x3c>)
 8005a48:	1b64      	subs	r4, r4, r5
 8005a4a:	10a4      	asrs	r4, r4, #2
 8005a4c:	42a6      	cmp	r6, r4
 8005a4e:	d109      	bne.n	8005a64 <__libc_init_array+0x24>
 8005a50:	f000 f828 	bl	8005aa4 <_init>
 8005a54:	2600      	movs	r6, #0
 8005a56:	4d0a      	ldr	r5, [pc, #40]	; (8005a80 <__libc_init_array+0x40>)
 8005a58:	4c0a      	ldr	r4, [pc, #40]	; (8005a84 <__libc_init_array+0x44>)
 8005a5a:	1b64      	subs	r4, r4, r5
 8005a5c:	10a4      	asrs	r4, r4, #2
 8005a5e:	42a6      	cmp	r6, r4
 8005a60:	d105      	bne.n	8005a6e <__libc_init_array+0x2e>
 8005a62:	bd70      	pop	{r4, r5, r6, pc}
 8005a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a68:	4798      	blx	r3
 8005a6a:	3601      	adds	r6, #1
 8005a6c:	e7ee      	b.n	8005a4c <__libc_init_array+0xc>
 8005a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a72:	4798      	blx	r3
 8005a74:	3601      	adds	r6, #1
 8005a76:	e7f2      	b.n	8005a5e <__libc_init_array+0x1e>
 8005a78:	08005c28 	.word	0x08005c28
 8005a7c:	08005c28 	.word	0x08005c28
 8005a80:	08005c28 	.word	0x08005c28
 8005a84:	08005c2c 	.word	0x08005c2c

08005a88 <memcpy>:
 8005a88:	440a      	add	r2, r1
 8005a8a:	4291      	cmp	r1, r2
 8005a8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a90:	d100      	bne.n	8005a94 <memcpy+0xc>
 8005a92:	4770      	bx	lr
 8005a94:	b510      	push	{r4, lr}
 8005a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a9a:	4291      	cmp	r1, r2
 8005a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aa0:	d1f9      	bne.n	8005a96 <memcpy+0xe>
 8005aa2:	bd10      	pop	{r4, pc}

08005aa4 <_init>:
 8005aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa6:	bf00      	nop
 8005aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aaa:	bc08      	pop	{r3}
 8005aac:	469e      	mov	lr, r3
 8005aae:	4770      	bx	lr

08005ab0 <_fini>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	bf00      	nop
 8005ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab6:	bc08      	pop	{r3}
 8005ab8:	469e      	mov	lr, r3
 8005aba:	4770      	bx	lr
