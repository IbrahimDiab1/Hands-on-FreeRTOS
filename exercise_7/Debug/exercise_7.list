
exercise_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e00  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f6c  08003f6c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003f6c  08003f6c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f6c  08003f6c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f6c  08003f6c  00013f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a20  20000014  08003f88  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a34  08003f88  00022a34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f12e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000257b  00000000  00000000  0002f1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000080b8  00000000  00000000  00031729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e90  00000000  00000000  000397e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000d78  00000000  00000000  0003a678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017fa3  00000000  00000000  0003b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000feca  00000000  00000000  00053393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00090599  00000000  00000000  0006325d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003bf0  00000000  00000000  000f37f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08003ef8 	.word	0x08003ef8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08003ef8 	.word	0x08003ef8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <switchPriority>:
    TaskHandle_t Task_1_handle =NULL, Task_2_handle= NULL;
    int ButtonState = GPIO_PIN_RESET;
    int Task1,Task2;

    void switchPriority()
    {
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0
    	int state=0;
 8000166:	2300      	movs	r3, #0
 8000168:	60fb      	str	r3, [r7, #12]
    	TaskHandle_t t1,t2;

    	t1= xTaskGetHandle("Toggle_1");
 800016a:	4817      	ldr	r0, [pc, #92]	; (80001c8 <switchPriority+0x68>)
 800016c:	f002 fb9a 	bl	80028a4 <xTaskGetHandle>
 8000170:	60b8      	str	r0, [r7, #8]
    	t2= xTaskGetHandle("Toggle_2");
 8000172:	4816      	ldr	r0, [pc, #88]	; (80001cc <switchPriority+0x6c>)
 8000174:	f002 fb96 	bl	80028a4 <xTaskGetHandle>
 8000178:	6078      	str	r0, [r7, #4]

    	taskENTER_CRITICAL();
 800017a:	f003 fbf9 	bl	8003970 <vPortEnterCritical>
    	if(ButtonState == GPIO_PIN_SET)
 800017e:	4b14      	ldr	r3, [pc, #80]	; (80001d0 <switchPriority+0x70>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b01      	cmp	r3, #1
 8000184:	d104      	bne.n	8000190 <switchPriority+0x30>
    	{
    		ButtonState = GPIO_PIN_RESET;
 8000186:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <switchPriority+0x70>)
 8000188:	2200      	movs	r2, #0
 800018a:	601a      	str	r2, [r3, #0]
    		state=1;
 800018c:	2301      	movs	r3, #1
 800018e:	60fb      	str	r3, [r7, #12]
    	}
    	taskEXIT_CRITICAL();
 8000190:	f003 fc1e 	bl	80039d0 <vPortExitCritical>

    	if(state)
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d011      	beq.n	80001be <switchPriority+0x5e>
    	{
    		state=0;
 800019a:	2300      	movs	r3, #0
 800019c:	60fb      	str	r3, [r7, #12]
    		vTaskPrioritySet( t1 , uxTaskPriorityGet(  t2 ));
 800019e:	6878      	ldr	r0, [r7, #4]
 80001a0:	f002 f8bc 	bl	800231c <uxTaskPriorityGet>
 80001a4:	4603      	mov	r3, r0
 80001a6:	4619      	mov	r1, r3
 80001a8:	68b8      	ldr	r0, [r7, #8]
 80001aa:	f002 f8d1 	bl	8002350 <vTaskPrioritySet>
    		vTaskPrioritySet( t2 , uxTaskPriorityGet(  t1 ));
 80001ae:	68b8      	ldr	r0, [r7, #8]
 80001b0:	f002 f8b4 	bl	800231c <uxTaskPriorityGet>
 80001b4:	4603      	mov	r3, r0
 80001b6:	4619      	mov	r1, r3
 80001b8:	6878      	ldr	r0, [r7, #4]
 80001ba:	f002 f8c9 	bl	8002350 <vTaskPrioritySet>
    	}
    }
 80001be:	bf00      	nop
 80001c0:	3710      	adds	r7, #16
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	08003f10 	.word	0x08003f10
 80001cc:	08003f1c 	.word	0x08003f1c
 80001d0:	20000038 	.word	0x20000038

080001d4 <Task_1_Handler>:


void Task_1_Handler(void * parameters)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80001dc:	2101      	movs	r1, #1
 80001de:	4807      	ldr	r0, [pc, #28]	; (80001fc <Task_1_Handler+0x28>)
 80001e0:	f000 fcce 	bl	8000b80 <HAL_GPIO_TogglePin>
		Task1 ^=1;
 80001e4:	4b06      	ldr	r3, [pc, #24]	; (8000200 <Task_1_Handler+0x2c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	f083 0301 	eor.w	r3, r3, #1
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <Task_1_Handler+0x2c>)
 80001ee:	6013      	str	r3, [r2, #0]
		vTaskDelay(pdMS_TO_TICKS(100));
 80001f0:	2064      	movs	r0, #100	; 0x64
 80001f2:	f002 f85f 	bl	80022b4 <vTaskDelay>
		switchPriority();
 80001f6:	f7ff ffb3 	bl	8000160 <switchPriority>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80001fa:	e7ef      	b.n	80001dc <Task_1_Handler+0x8>
 80001fc:	40010800 	.word	0x40010800
 8000200:	2000003c 	.word	0x2000003c

08000204 <Task_2_Handler>:
	}
}


void Task_2_Handler(void * parameters)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800020c:	2102      	movs	r1, #2
 800020e:	4808      	ldr	r0, [pc, #32]	; (8000230 <Task_2_Handler+0x2c>)
 8000210:	f000 fcb6 	bl	8000b80 <HAL_GPIO_TogglePin>
		Task2 ^=1;
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <Task_2_Handler+0x30>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f083 0301 	eor.w	r3, r3, #1
 800021c:	4a05      	ldr	r2, [pc, #20]	; (8000234 <Task_2_Handler+0x30>)
 800021e:	6013      	str	r3, [r2, #0]
		HAL_Delay(500);
 8000220:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000224:	f000 fa0c 	bl	8000640 <HAL_Delay>
		switchPriority();
 8000228:	f7ff ff9a 	bl	8000160 <switchPriority>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800022c:	e7ee      	b.n	800020c <Task_2_Handler+0x8>
 800022e:	bf00      	nop
 8000230:	40010800 	.word	0x40010800
 8000234:	20000040 	.word	0x20000040

08000238 <vApplicationIdleHook>:
	}
}

void vApplicationIdleHook()
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	__WFI();
 800023c:	bf30      	wfi
}
 800023e:	bf00      	nop
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr
	...

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024e:	f000 f9c5 	bl	80005dc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000252:	f000 f825 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000256:	f000 f85f 	bl	8000318 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate( Task_1_Handler, "Toggle_1", 100, NULL, 2, &Task_1_handle );
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <main+0x40>)
 800025c:	9301      	str	r3, [sp, #4]
 800025e:	2302      	movs	r3, #2
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	2264      	movs	r2, #100	; 0x64
 8000266:	4909      	ldr	r1, [pc, #36]	; (800028c <main+0x44>)
 8000268:	4809      	ldr	r0, [pc, #36]	; (8000290 <main+0x48>)
 800026a:	f001 feb9 	bl	8001fe0 <xTaskCreate>
  xTaskCreate( Task_2_Handler, "Toggle_2", 100, NULL, 3, &Task_2_handle );
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <main+0x4c>)
 8000270:	9301      	str	r3, [sp, #4]
 8000272:	2303      	movs	r3, #3
 8000274:	9300      	str	r3, [sp, #0]
 8000276:	2300      	movs	r3, #0
 8000278:	2264      	movs	r2, #100	; 0x64
 800027a:	4907      	ldr	r1, [pc, #28]	; (8000298 <main+0x50>)
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <main+0x54>)
 800027e:	f001 feaf 	bl	8001fe0 <xTaskCreate>


  vTaskStartScheduler();
 8000282:	f002 f937 	bl	80024f4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000286:	e7fe      	b.n	8000286 <main+0x3e>
 8000288:	20000030 	.word	0x20000030
 800028c:	08003f10 	.word	0x08003f10
 8000290:	080001d5 	.word	0x080001d5
 8000294:	20000034 	.word	0x20000034
 8000298:	08003f1c 	.word	0x08003f1c
 800029c:	08000205 	.word	0x08000205

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b090      	sub	sp, #64	; 0x40
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	2228      	movs	r2, #40	; 0x28
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f003 fde8 	bl	8003e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c2:	2302      	movs	r3, #2
 80002c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	2310      	movs	r3, #16
 80002cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fc8e 	bl	8000bf8 <HAL_RCC_OscConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002e2:	f000 f870 	bl	80003c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	230f      	movs	r3, #15
 80002e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 fefc 	bl	80010fc <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800030a:	f000 f85c 	bl	80003c6 <Error_Handler>
  }
}
 800030e:	bf00      	nop
 8000310:	3740      	adds	r7, #64	; 0x40
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 0308 	add.w	r3, r7, #8
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <MX_GPIO_Init+0x84>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a1a      	ldr	r2, [pc, #104]	; (800039c <MX_GPIO_Init+0x84>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <MX_GPIO_Init+0x84>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2103      	movs	r1, #3
 8000348:	4815      	ldr	r0, [pc, #84]	; (80003a0 <MX_GPIO_Init+0x88>)
 800034a:	f000 fc01 	bl	8000b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800034e:	2303      	movs	r3, #3
 8000350:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000352:	2301      	movs	r3, #1
 8000354:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2302      	movs	r3, #2
 800035c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035e:	f107 0308 	add.w	r3, r7, #8
 8000362:	4619      	mov	r1, r3
 8000364:	480e      	ldr	r0, [pc, #56]	; (80003a0 <MX_GPIO_Init+0x88>)
 8000366:	f000 fa6f 	bl	8000848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800036a:	2308      	movs	r3, #8
 800036c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800036e:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <MX_GPIO_Init+0x8c>)
 8000370:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	2300      	movs	r3, #0
 8000374:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000376:	f107 0308 	add.w	r3, r7, #8
 800037a:	4619      	mov	r1, r3
 800037c:	4808      	ldr	r0, [pc, #32]	; (80003a0 <MX_GPIO_Init+0x88>)
 800037e:	f000 fa63 	bl	8000848 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000382:	2200      	movs	r2, #0
 8000384:	2105      	movs	r1, #5
 8000386:	2009      	movs	r0, #9
 8000388:	f000 fa33 	bl	80007f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800038c:	2009      	movs	r0, #9
 800038e:	f000 fa4c 	bl	800082a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000392:	bf00      	nop
 8000394:	3718      	adds	r7, #24
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000
 80003a0:	40010800 	.word	0x40010800
 80003a4:	10110000 	.word	0x10110000

080003a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003b8:	d101      	bne.n	80003be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003ba:	f000 f925 	bl	8000608 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ca:	b672      	cpsid	i
}
 80003cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ce:	e7fe      	b.n	80003ce <Error_Handler+0x8>

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <HAL_MspInit+0x5c>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a14      	ldr	r2, [pc, #80]	; (800042c <HAL_MspInit+0x5c>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <HAL_MspInit+0x5c>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	; (800042c <HAL_MspInit+0x5c>)
 80003f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f8:	61d3      	str	r3, [r2, #28]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <HAL_MspInit+0x60>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <HAL_MspInit+0x60>)
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	bf00      	nop
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000
 8000430:	40010000 	.word	0x40010000

08000434 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b08e      	sub	sp, #56	; 0x38
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800043c:	2300      	movs	r3, #0
 800043e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000440:	2300      	movs	r3, #0
 8000442:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000444:	2300      	movs	r3, #0
 8000446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800044a:	4b34      	ldr	r3, [pc, #208]	; (800051c <HAL_InitTick+0xe8>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a33      	ldr	r2, [pc, #204]	; (800051c <HAL_InitTick+0xe8>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b31      	ldr	r3, [pc, #196]	; (800051c <HAL_InitTick+0xe8>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000462:	f107 0210 	add.w	r2, r7, #16
 8000466:	f107 0314 	add.w	r3, r7, #20
 800046a:	4611      	mov	r1, r2
 800046c:	4618      	mov	r0, r3
 800046e:	f000 ffa1 	bl	80013b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000472:	6a3b      	ldr	r3, [r7, #32]
 8000474:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000478:	2b00      	cmp	r3, #0
 800047a:	d103      	bne.n	8000484 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800047c:	f000 ff86 	bl	800138c <HAL_RCC_GetPCLK1Freq>
 8000480:	6378      	str	r0, [r7, #52]	; 0x34
 8000482:	e004      	b.n	800048e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000484:	f000 ff82 	bl	800138c <HAL_RCC_GetPCLK1Freq>
 8000488:	4603      	mov	r3, r0
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800048e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000490:	4a23      	ldr	r2, [pc, #140]	; (8000520 <HAL_InitTick+0xec>)
 8000492:	fba2 2303 	umull	r2, r3, r2, r3
 8000496:	0c9b      	lsrs	r3, r3, #18
 8000498:	3b01      	subs	r3, #1
 800049a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800049c:	4b21      	ldr	r3, [pc, #132]	; (8000524 <HAL_InitTick+0xf0>)
 800049e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80004a4:	4b1f      	ldr	r3, [pc, #124]	; (8000524 <HAL_InitTick+0xf0>)
 80004a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004aa:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80004ac:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <HAL_InitTick+0xf0>)
 80004ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004b0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80004b2:	4b1c      	ldr	r3, [pc, #112]	; (8000524 <HAL_InitTick+0xf0>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b8:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <HAL_InitTick+0xf0>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004be:	4b19      	ldr	r3, [pc, #100]	; (8000524 <HAL_InitTick+0xf0>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80004c4:	4817      	ldr	r0, [pc, #92]	; (8000524 <HAL_InitTick+0xf0>)
 80004c6:	f000 ffc3 	bl	8001450 <HAL_TIM_Base_Init>
 80004ca:	4603      	mov	r3, r0
 80004cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80004d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d11b      	bne.n	8000510 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80004d8:	4812      	ldr	r0, [pc, #72]	; (8000524 <HAL_InitTick+0xf0>)
 80004da:	f001 f811 	bl	8001500 <HAL_TIM_Base_Start_IT>
 80004de:	4603      	mov	r3, r0
 80004e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80004e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d111      	bne.n	8000510 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004ec:	201c      	movs	r0, #28
 80004ee:	f000 f99c 	bl	800082a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b0f      	cmp	r3, #15
 80004f6:	d808      	bhi.n	800050a <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80004f8:	2200      	movs	r2, #0
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	201c      	movs	r0, #28
 80004fe:	f000 f978 	bl	80007f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000502:	4a09      	ldr	r2, [pc, #36]	; (8000528 <HAL_InitTick+0xf4>)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6013      	str	r3, [r2, #0]
 8000508:	e002      	b.n	8000510 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800050a:	2301      	movs	r3, #1
 800050c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000510:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000514:	4618      	mov	r0, r3
 8000516:	3738      	adds	r7, #56	; 0x38
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40021000 	.word	0x40021000
 8000520:	431bde83 	.word	0x431bde83
 8000524:	20000044 	.word	0x20000044
 8000528:	20000004 	.word	0x20000004

0800052c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <NMI_Handler+0x4>

08000532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000536:	e7fe      	b.n	8000536 <HardFault_Handler+0x4>

08000538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800053c:	e7fe      	b.n	800053c <MemManage_Handler+0x4>

0800053e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <BusFault_Handler+0x4>

08000544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <UsageFault_Handler+0x4>

0800054a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
	...

08000558 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

	ButtonState = GPIO_PIN_SET;
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <EXTI3_IRQHandler+0x14>)
 800055e:	2201      	movs	r2, #1
 8000560:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000562:	2008      	movs	r0, #8
 8000564:	f000 fb26 	bl	8000bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000038 	.word	0x20000038

08000570 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <TIM2_IRQHandler+0x10>)
 8000576:	f001 f815 	bl	80015a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000044 	.word	0x20000044

08000584 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000590:	f7ff fff8 	bl	8000584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000594:	480b      	ldr	r0, [pc, #44]	; (80005c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000596:	490c      	ldr	r1, [pc, #48]	; (80005c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000598:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800059c:	e002      	b.n	80005a4 <LoopCopyDataInit>

0800059e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a2:	3304      	adds	r3, #4

080005a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a8:	d3f9      	bcc.n	800059e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005aa:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005ac:	4c09      	ldr	r4, [pc, #36]	; (80005d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b0:	e001      	b.n	80005b6 <LoopFillZerobss>

080005b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b4:	3204      	adds	r2, #4

080005b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b8:	d3fb      	bcc.n	80005b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ba:	f003 fc6b 	bl	8003e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005be:	f7ff fe43 	bl	8000248 <main>
  bx lr
 80005c2:	4770      	bx	lr
  ldr r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80005cc:	08003f74 	.word	0x08003f74
  ldr r2, =_sbss
 80005d0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80005d4:	20002a34 	.word	0x20002a34

080005d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <ADC1_2_IRQHandler>
	...

080005dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <HAL_Init+0x28>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a07      	ldr	r2, [pc, #28]	; (8000604 <HAL_Init+0x28>)
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ec:	2003      	movs	r0, #3
 80005ee:	f000 f8f5 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005f2:	200f      	movs	r0, #15
 80005f4:	f7ff ff1e 	bl	8000434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f8:	f7ff feea 	bl	80003d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40022000 	.word	0x40022000

08000608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <HAL_IncTick+0x1c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <HAL_IncTick+0x20>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4413      	add	r3, r2
 8000618:	4a03      	ldr	r2, [pc, #12]	; (8000628 <HAL_IncTick+0x20>)
 800061a:	6013      	str	r3, [r2, #0]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	20000008 	.word	0x20000008
 8000628:	2000008c 	.word	0x2000008c

0800062c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return uwTick;
 8000630:	4b02      	ldr	r3, [pc, #8]	; (800063c <HAL_GetTick+0x10>)
 8000632:	681b      	ldr	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	2000008c 	.word	0x2000008c

08000640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000648:	f7ff fff0 	bl	800062c <HAL_GetTick>
 800064c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000658:	d005      	beq.n	8000666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <HAL_Delay+0x44>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4413      	add	r3, r2
 8000664:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000666:	bf00      	nop
 8000668:	f7ff ffe0 	bl	800062c <HAL_GetTick>
 800066c:	4602      	mov	r2, r0
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	429a      	cmp	r2, r3
 8000676:	d8f7      	bhi.n	8000668 <HAL_Delay+0x28>
  {
  }
}
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000008 	.word	0x20000008

08000688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <__NVIC_SetPriorityGrouping+0x44>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a4:	4013      	ands	r3, r2
 80006a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ba:	4a04      	ldr	r2, [pc, #16]	; (80006cc <__NVIC_SetPriorityGrouping+0x44>)
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	60d3      	str	r3, [r2, #12]
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <__NVIC_GetPriorityGrouping+0x18>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	f003 0307 	and.w	r3, r3, #7
}
 80006de:	4618      	mov	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	db0b      	blt.n	8000716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f003 021f 	and.w	r2, r3, #31
 8000704:	4906      	ldr	r1, [pc, #24]	; (8000720 <__NVIC_EnableIRQ+0x34>)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	095b      	lsrs	r3, r3, #5
 800070c:	2001      	movs	r0, #1
 800070e:	fa00 f202 	lsl.w	r2, r0, r2
 8000712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	e000e100 	.word	0xe000e100

08000724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	db0a      	blt.n	800074e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	490c      	ldr	r1, [pc, #48]	; (8000770 <__NVIC_SetPriority+0x4c>)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	0112      	lsls	r2, r2, #4
 8000744:	b2d2      	uxtb	r2, r2
 8000746:	440b      	add	r3, r1
 8000748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800074c:	e00a      	b.n	8000764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4908      	ldr	r1, [pc, #32]	; (8000774 <__NVIC_SetPriority+0x50>)
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	f003 030f 	and.w	r3, r3, #15
 800075a:	3b04      	subs	r3, #4
 800075c:	0112      	lsls	r2, r2, #4
 800075e:	b2d2      	uxtb	r2, r2
 8000760:	440b      	add	r3, r1
 8000762:	761a      	strb	r2, [r3, #24]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000e100 	.word	0xe000e100
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000778:	b480      	push	{r7}
 800077a:	b089      	sub	sp, #36	; 0x24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	f1c3 0307 	rsb	r3, r3, #7
 8000792:	2b04      	cmp	r3, #4
 8000794:	bf28      	it	cs
 8000796:	2304      	movcs	r3, #4
 8000798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3304      	adds	r3, #4
 800079e:	2b06      	cmp	r3, #6
 80007a0:	d902      	bls.n	80007a8 <NVIC_EncodePriority+0x30>
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3b03      	subs	r3, #3
 80007a6:	e000      	b.n	80007aa <NVIC_EncodePriority+0x32>
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	f04f 32ff 	mov.w	r2, #4294967295
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	43da      	mvns	r2, r3
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	401a      	ands	r2, r3
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c0:	f04f 31ff 	mov.w	r1, #4294967295
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ca:	43d9      	mvns	r1, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	4313      	orrs	r3, r2
         );
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3724      	adds	r7, #36	; 0x24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ff4f 	bl	8000688 <__NVIC_SetPriorityGrouping>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000804:	f7ff ff64 	bl	80006d0 <__NVIC_GetPriorityGrouping>
 8000808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff ffb2 	bl	8000778 <NVIC_EncodePriority>
 8000814:	4602      	mov	r2, r0
 8000816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff81 	bl	8000724 <__NVIC_SetPriority>
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff57 	bl	80006ec <__NVIC_EnableIRQ>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000848:	b480      	push	{r7}
 800084a:	b08b      	sub	sp, #44	; 0x2c
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800085a:	e169      	b.n	8000b30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800085c:	2201      	movs	r2, #1
 800085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	69fa      	ldr	r2, [r7, #28]
 800086c:	4013      	ands	r3, r2
 800086e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	429a      	cmp	r2, r3
 8000876:	f040 8158 	bne.w	8000b2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	4a9a      	ldr	r2, [pc, #616]	; (8000ae8 <HAL_GPIO_Init+0x2a0>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d05e      	beq.n	8000942 <HAL_GPIO_Init+0xfa>
 8000884:	4a98      	ldr	r2, [pc, #608]	; (8000ae8 <HAL_GPIO_Init+0x2a0>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d875      	bhi.n	8000976 <HAL_GPIO_Init+0x12e>
 800088a:	4a98      	ldr	r2, [pc, #608]	; (8000aec <HAL_GPIO_Init+0x2a4>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d058      	beq.n	8000942 <HAL_GPIO_Init+0xfa>
 8000890:	4a96      	ldr	r2, [pc, #600]	; (8000aec <HAL_GPIO_Init+0x2a4>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d86f      	bhi.n	8000976 <HAL_GPIO_Init+0x12e>
 8000896:	4a96      	ldr	r2, [pc, #600]	; (8000af0 <HAL_GPIO_Init+0x2a8>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d052      	beq.n	8000942 <HAL_GPIO_Init+0xfa>
 800089c:	4a94      	ldr	r2, [pc, #592]	; (8000af0 <HAL_GPIO_Init+0x2a8>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d869      	bhi.n	8000976 <HAL_GPIO_Init+0x12e>
 80008a2:	4a94      	ldr	r2, [pc, #592]	; (8000af4 <HAL_GPIO_Init+0x2ac>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d04c      	beq.n	8000942 <HAL_GPIO_Init+0xfa>
 80008a8:	4a92      	ldr	r2, [pc, #584]	; (8000af4 <HAL_GPIO_Init+0x2ac>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d863      	bhi.n	8000976 <HAL_GPIO_Init+0x12e>
 80008ae:	4a92      	ldr	r2, [pc, #584]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d046      	beq.n	8000942 <HAL_GPIO_Init+0xfa>
 80008b4:	4a90      	ldr	r2, [pc, #576]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d85d      	bhi.n	8000976 <HAL_GPIO_Init+0x12e>
 80008ba:	2b12      	cmp	r3, #18
 80008bc:	d82a      	bhi.n	8000914 <HAL_GPIO_Init+0xcc>
 80008be:	2b12      	cmp	r3, #18
 80008c0:	d859      	bhi.n	8000976 <HAL_GPIO_Init+0x12e>
 80008c2:	a201      	add	r2, pc, #4	; (adr r2, 80008c8 <HAL_GPIO_Init+0x80>)
 80008c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c8:	08000943 	.word	0x08000943
 80008cc:	0800091d 	.word	0x0800091d
 80008d0:	0800092f 	.word	0x0800092f
 80008d4:	08000971 	.word	0x08000971
 80008d8:	08000977 	.word	0x08000977
 80008dc:	08000977 	.word	0x08000977
 80008e0:	08000977 	.word	0x08000977
 80008e4:	08000977 	.word	0x08000977
 80008e8:	08000977 	.word	0x08000977
 80008ec:	08000977 	.word	0x08000977
 80008f0:	08000977 	.word	0x08000977
 80008f4:	08000977 	.word	0x08000977
 80008f8:	08000977 	.word	0x08000977
 80008fc:	08000977 	.word	0x08000977
 8000900:	08000977 	.word	0x08000977
 8000904:	08000977 	.word	0x08000977
 8000908:	08000977 	.word	0x08000977
 800090c:	08000925 	.word	0x08000925
 8000910:	08000939 	.word	0x08000939
 8000914:	4a79      	ldr	r2, [pc, #484]	; (8000afc <HAL_GPIO_Init+0x2b4>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d013      	beq.n	8000942 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800091a:	e02c      	b.n	8000976 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	623b      	str	r3, [r7, #32]
          break;
 8000922:	e029      	b.n	8000978 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	3304      	adds	r3, #4
 800092a:	623b      	str	r3, [r7, #32]
          break;
 800092c:	e024      	b.n	8000978 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	3308      	adds	r3, #8
 8000934:	623b      	str	r3, [r7, #32]
          break;
 8000936:	e01f      	b.n	8000978 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	330c      	adds	r3, #12
 800093e:	623b      	str	r3, [r7, #32]
          break;
 8000940:	e01a      	b.n	8000978 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d102      	bne.n	8000950 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800094a:	2304      	movs	r3, #4
 800094c:	623b      	str	r3, [r7, #32]
          break;
 800094e:	e013      	b.n	8000978 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d105      	bne.n	8000964 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000958:	2308      	movs	r3, #8
 800095a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	69fa      	ldr	r2, [r7, #28]
 8000960:	611a      	str	r2, [r3, #16]
          break;
 8000962:	e009      	b.n	8000978 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000964:	2308      	movs	r3, #8
 8000966:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69fa      	ldr	r2, [r7, #28]
 800096c:	615a      	str	r2, [r3, #20]
          break;
 800096e:	e003      	b.n	8000978 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
          break;
 8000974:	e000      	b.n	8000978 <HAL_GPIO_Init+0x130>
          break;
 8000976:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	2bff      	cmp	r3, #255	; 0xff
 800097c:	d801      	bhi.n	8000982 <HAL_GPIO_Init+0x13a>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	e001      	b.n	8000986 <HAL_GPIO_Init+0x13e>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3304      	adds	r3, #4
 8000986:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	2bff      	cmp	r3, #255	; 0xff
 800098c:	d802      	bhi.n	8000994 <HAL_GPIO_Init+0x14c>
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	e002      	b.n	800099a <HAL_GPIO_Init+0x152>
 8000994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000996:	3b08      	subs	r3, #8
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	210f      	movs	r1, #15
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	fa01 f303 	lsl.w	r3, r1, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	401a      	ands	r2, r3
 80009ac:	6a39      	ldr	r1, [r7, #32]
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	fa01 f303 	lsl.w	r3, r1, r3
 80009b4:	431a      	orrs	r2, r3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f000 80b1 	beq.w	8000b2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009c8:	4b4d      	ldr	r3, [pc, #308]	; (8000b00 <HAL_GPIO_Init+0x2b8>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a4c      	ldr	r2, [pc, #304]	; (8000b00 <HAL_GPIO_Init+0x2b8>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b4a      	ldr	r3, [pc, #296]	; (8000b00 <HAL_GPIO_Init+0x2b8>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009e0:	4a48      	ldr	r2, [pc, #288]	; (8000b04 <HAL_GPIO_Init+0x2bc>)
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	089b      	lsrs	r3, r3, #2
 80009e6:	3302      	adds	r3, #2
 80009e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	f003 0303 	and.w	r3, r3, #3
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	220f      	movs	r2, #15
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	4013      	ands	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a40      	ldr	r2, [pc, #256]	; (8000b08 <HAL_GPIO_Init+0x2c0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d013      	beq.n	8000a34 <HAL_GPIO_Init+0x1ec>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a3f      	ldr	r2, [pc, #252]	; (8000b0c <HAL_GPIO_Init+0x2c4>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d00d      	beq.n	8000a30 <HAL_GPIO_Init+0x1e8>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a3e      	ldr	r2, [pc, #248]	; (8000b10 <HAL_GPIO_Init+0x2c8>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d007      	beq.n	8000a2c <HAL_GPIO_Init+0x1e4>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a3d      	ldr	r2, [pc, #244]	; (8000b14 <HAL_GPIO_Init+0x2cc>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d101      	bne.n	8000a28 <HAL_GPIO_Init+0x1e0>
 8000a24:	2303      	movs	r3, #3
 8000a26:	e006      	b.n	8000a36 <HAL_GPIO_Init+0x1ee>
 8000a28:	2304      	movs	r3, #4
 8000a2a:	e004      	b.n	8000a36 <HAL_GPIO_Init+0x1ee>
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	e002      	b.n	8000a36 <HAL_GPIO_Init+0x1ee>
 8000a30:	2301      	movs	r3, #1
 8000a32:	e000      	b.n	8000a36 <HAL_GPIO_Init+0x1ee>
 8000a34:	2300      	movs	r3, #0
 8000a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a38:	f002 0203 	and.w	r2, r2, #3
 8000a3c:	0092      	lsls	r2, r2, #2
 8000a3e:	4093      	lsls	r3, r2
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a46:	492f      	ldr	r1, [pc, #188]	; (8000b04 <HAL_GPIO_Init+0x2bc>)
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a60:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <HAL_GPIO_Init+0x2d0>)
 8000a62:	689a      	ldr	r2, [r3, #8]
 8000a64:	492c      	ldr	r1, [pc, #176]	; (8000b18 <HAL_GPIO_Init+0x2d0>)
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	608b      	str	r3, [r1, #8]
 8000a6c:	e006      	b.n	8000a7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a6e:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <HAL_GPIO_Init+0x2d0>)
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	4928      	ldr	r1, [pc, #160]	; (8000b18 <HAL_GPIO_Init+0x2d0>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d006      	beq.n	8000a96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a88:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <HAL_GPIO_Init+0x2d0>)
 8000a8a:	68da      	ldr	r2, [r3, #12]
 8000a8c:	4922      	ldr	r1, [pc, #136]	; (8000b18 <HAL_GPIO_Init+0x2d0>)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	60cb      	str	r3, [r1, #12]
 8000a94:	e006      	b.n	8000aa4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a96:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <HAL_GPIO_Init+0x2d0>)
 8000a98:	68da      	ldr	r2, [r3, #12]
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	491e      	ldr	r1, [pc, #120]	; (8000b18 <HAL_GPIO_Init+0x2d0>)
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d006      	beq.n	8000abe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_GPIO_Init+0x2d0>)
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	4918      	ldr	r1, [pc, #96]	; (8000b18 <HAL_GPIO_Init+0x2d0>)
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	604b      	str	r3, [r1, #4]
 8000abc:	e006      	b.n	8000acc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <HAL_GPIO_Init+0x2d0>)
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	4914      	ldr	r1, [pc, #80]	; (8000b18 <HAL_GPIO_Init+0x2d0>)
 8000ac8:	4013      	ands	r3, r2
 8000aca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d021      	beq.n	8000b1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_GPIO_Init+0x2d0>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	490e      	ldr	r1, [pc, #56]	; (8000b18 <HAL_GPIO_Init+0x2d0>)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	600b      	str	r3, [r1, #0]
 8000ae4:	e021      	b.n	8000b2a <HAL_GPIO_Init+0x2e2>
 8000ae6:	bf00      	nop
 8000ae8:	10320000 	.word	0x10320000
 8000aec:	10310000 	.word	0x10310000
 8000af0:	10220000 	.word	0x10220000
 8000af4:	10210000 	.word	0x10210000
 8000af8:	10120000 	.word	0x10120000
 8000afc:	10110000 	.word	0x10110000
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40010000 	.word	0x40010000
 8000b08:	40010800 	.word	0x40010800
 8000b0c:	40010c00 	.word	0x40010c00
 8000b10:	40011000 	.word	0x40011000
 8000b14:	40011400 	.word	0x40011400
 8000b18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_GPIO_Init+0x304>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	43db      	mvns	r3, r3
 8000b24:	4909      	ldr	r1, [pc, #36]	; (8000b4c <HAL_GPIO_Init+0x304>)
 8000b26:	4013      	ands	r3, r2
 8000b28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	fa22 f303 	lsr.w	r3, r2, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f47f ae8e 	bne.w	800085c <HAL_GPIO_Init+0x14>
  }
}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	372c      	adds	r7, #44	; 0x2c
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	40010400 	.word	0x40010400

08000b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	807b      	strh	r3, [r7, #2]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b60:	787b      	ldrb	r3, [r7, #1]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b66:	887a      	ldrh	r2, [r7, #2]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b6c:	e003      	b.n	8000b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b6e:	887b      	ldrh	r3, [r7, #2]
 8000b70:	041a      	lsls	r2, r3, #16
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	611a      	str	r2, [r3, #16]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b92:	887a      	ldrh	r2, [r7, #2]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4013      	ands	r3, r2
 8000b98:	041a      	lsls	r2, r3, #16
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	43d9      	mvns	r1, r3
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	400b      	ands	r3, r1
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	611a      	str	r2, [r3, #16]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
	...

08000bb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bc0:	695a      	ldr	r2, [r3, #20]
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d006      	beq.n	8000bd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f806 	bl	8000be4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40010400 	.word	0x40010400

08000be4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e272      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f000 8087 	beq.w	8000d26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c18:	4b92      	ldr	r3, [pc, #584]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 030c 	and.w	r3, r3, #12
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	d00c      	beq.n	8000c3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c24:	4b8f      	ldr	r3, [pc, #572]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 030c 	and.w	r3, r3, #12
 8000c2c:	2b08      	cmp	r3, #8
 8000c2e:	d112      	bne.n	8000c56 <HAL_RCC_OscConfig+0x5e>
 8000c30:	4b8c      	ldr	r3, [pc, #560]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3c:	d10b      	bne.n	8000c56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c3e:	4b89      	ldr	r3, [pc, #548]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d06c      	beq.n	8000d24 <HAL_RCC_OscConfig+0x12c>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d168      	bne.n	8000d24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e24c      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c5e:	d106      	bne.n	8000c6e <HAL_RCC_OscConfig+0x76>
 8000c60:	4b80      	ldr	r3, [pc, #512]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a7f      	ldr	r2, [pc, #508]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	e02e      	b.n	8000ccc <HAL_RCC_OscConfig+0xd4>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10c      	bne.n	8000c90 <HAL_RCC_OscConfig+0x98>
 8000c76:	4b7b      	ldr	r3, [pc, #492]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a7a      	ldr	r2, [pc, #488]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	4b78      	ldr	r3, [pc, #480]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a77      	ldr	r2, [pc, #476]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	e01d      	b.n	8000ccc <HAL_RCC_OscConfig+0xd4>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c98:	d10c      	bne.n	8000cb4 <HAL_RCC_OscConfig+0xbc>
 8000c9a:	4b72      	ldr	r3, [pc, #456]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a71      	ldr	r2, [pc, #452]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	4b6f      	ldr	r3, [pc, #444]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a6e      	ldr	r2, [pc, #440]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	e00b      	b.n	8000ccc <HAL_RCC_OscConfig+0xd4>
 8000cb4:	4b6b      	ldr	r3, [pc, #428]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a6a      	ldr	r2, [pc, #424]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	4b68      	ldr	r3, [pc, #416]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a67      	ldr	r2, [pc, #412]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d013      	beq.n	8000cfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd4:	f7ff fcaa 	bl	800062c <HAL_GetTick>
 8000cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cda:	e008      	b.n	8000cee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cdc:	f7ff fca6 	bl	800062c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	2b64      	cmp	r3, #100	; 0x64
 8000ce8:	d901      	bls.n	8000cee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cea:	2303      	movs	r3, #3
 8000cec:	e200      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cee:	4b5d      	ldr	r3, [pc, #372]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d0f0      	beq.n	8000cdc <HAL_RCC_OscConfig+0xe4>
 8000cfa:	e014      	b.n	8000d26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cfc:	f7ff fc96 	bl	800062c <HAL_GetTick>
 8000d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d02:	e008      	b.n	8000d16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d04:	f7ff fc92 	bl	800062c <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b64      	cmp	r3, #100	; 0x64
 8000d10:	d901      	bls.n	8000d16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e1ec      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d16:	4b53      	ldr	r3, [pc, #332]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1f0      	bne.n	8000d04 <HAL_RCC_OscConfig+0x10c>
 8000d22:	e000      	b.n	8000d26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d063      	beq.n	8000dfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d32:	4b4c      	ldr	r3, [pc, #304]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 030c 	and.w	r3, r3, #12
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d00b      	beq.n	8000d56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d3e:	4b49      	ldr	r3, [pc, #292]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 030c 	and.w	r3, r3, #12
 8000d46:	2b08      	cmp	r3, #8
 8000d48:	d11c      	bne.n	8000d84 <HAL_RCC_OscConfig+0x18c>
 8000d4a:	4b46      	ldr	r3, [pc, #280]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d116      	bne.n	8000d84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d56:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d005      	beq.n	8000d6e <HAL_RCC_OscConfig+0x176>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d001      	beq.n	8000d6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e1c0      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	4939      	ldr	r1, [pc, #228]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d82:	e03a      	b.n	8000dfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d020      	beq.n	8000dce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d8c:	4b36      	ldr	r3, [pc, #216]	; (8000e68 <HAL_RCC_OscConfig+0x270>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d92:	f7ff fc4b 	bl	800062c <HAL_GetTick>
 8000d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d98:	e008      	b.n	8000dac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d9a:	f7ff fc47 	bl	800062c <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d901      	bls.n	8000dac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000da8:	2303      	movs	r3, #3
 8000daa:	e1a1      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dac:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0f0      	beq.n	8000d9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db8:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	4927      	ldr	r1, [pc, #156]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	600b      	str	r3, [r1, #0]
 8000dcc:	e015      	b.n	8000dfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dce:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <HAL_RCC_OscConfig+0x270>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fc2a 	bl	800062c <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ddc:	f7ff fc26 	bl	800062c <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e180      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f0      	bne.n	8000ddc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0308 	and.w	r3, r3, #8
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d03a      	beq.n	8000e7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d019      	beq.n	8000e42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_RCC_OscConfig+0x274>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e14:	f7ff fc0a 	bl	800062c <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fc06 	bl	800062c <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e160      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f0      	beq.n	8000e1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f000 faea 	bl	8001414 <RCC_Delay>
 8000e40:	e01c      	b.n	8000e7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_RCC_OscConfig+0x274>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e48:	f7ff fbf0 	bl	800062c <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e4e:	e00f      	b.n	8000e70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e50:	f7ff fbec 	bl	800062c <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d908      	bls.n	8000e70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e146      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000
 8000e68:	42420000 	.word	0x42420000
 8000e6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e70:	4b92      	ldr	r3, [pc, #584]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1e9      	bne.n	8000e50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80a6 	beq.w	8000fd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e8e:	4b8b      	ldr	r3, [pc, #556]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10d      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b88      	ldr	r3, [pc, #544]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a87      	ldr	r2, [pc, #540]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b85      	ldr	r3, [pc, #532]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb6:	4b82      	ldr	r3, [pc, #520]	; (80010c0 <HAL_RCC_OscConfig+0x4c8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d118      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ec2:	4b7f      	ldr	r3, [pc, #508]	; (80010c0 <HAL_RCC_OscConfig+0x4c8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a7e      	ldr	r2, [pc, #504]	; (80010c0 <HAL_RCC_OscConfig+0x4c8>)
 8000ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ece:	f7ff fbad 	bl	800062c <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed4:	e008      	b.n	8000ee8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ed6:	f7ff fba9 	bl	800062c <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b64      	cmp	r3, #100	; 0x64
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e103      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee8:	4b75      	ldr	r3, [pc, #468]	; (80010c0 <HAL_RCC_OscConfig+0x4c8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0f0      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d106      	bne.n	8000f0a <HAL_RCC_OscConfig+0x312>
 8000efc:	4b6f      	ldr	r3, [pc, #444]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	4a6e      	ldr	r2, [pc, #440]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6213      	str	r3, [r2, #32]
 8000f08:	e02d      	b.n	8000f66 <HAL_RCC_OscConfig+0x36e>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10c      	bne.n	8000f2c <HAL_RCC_OscConfig+0x334>
 8000f12:	4b6a      	ldr	r3, [pc, #424]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	4a69      	ldr	r2, [pc, #420]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000f18:	f023 0301 	bic.w	r3, r3, #1
 8000f1c:	6213      	str	r3, [r2, #32]
 8000f1e:	4b67      	ldr	r3, [pc, #412]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	4a66      	ldr	r2, [pc, #408]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	f023 0304 	bic.w	r3, r3, #4
 8000f28:	6213      	str	r3, [r2, #32]
 8000f2a:	e01c      	b.n	8000f66 <HAL_RCC_OscConfig+0x36e>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	d10c      	bne.n	8000f4e <HAL_RCC_OscConfig+0x356>
 8000f34:	4b61      	ldr	r3, [pc, #388]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	4a60      	ldr	r2, [pc, #384]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6213      	str	r3, [r2, #32]
 8000f40:	4b5e      	ldr	r3, [pc, #376]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	4a5d      	ldr	r2, [pc, #372]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6213      	str	r3, [r2, #32]
 8000f4c:	e00b      	b.n	8000f66 <HAL_RCC_OscConfig+0x36e>
 8000f4e:	4b5b      	ldr	r3, [pc, #364]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	6a1b      	ldr	r3, [r3, #32]
 8000f52:	4a5a      	ldr	r2, [pc, #360]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000f54:	f023 0301 	bic.w	r3, r3, #1
 8000f58:	6213      	str	r3, [r2, #32]
 8000f5a:	4b58      	ldr	r3, [pc, #352]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	4a57      	ldr	r2, [pc, #348]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	f023 0304 	bic.w	r3, r3, #4
 8000f64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d015      	beq.n	8000f9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6e:	f7ff fb5d 	bl	800062c <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f74:	e00a      	b.n	8000f8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f76:	f7ff fb59 	bl	800062c <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e0b1      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f8c:	4b4b      	ldr	r3, [pc, #300]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0ee      	beq.n	8000f76 <HAL_RCC_OscConfig+0x37e>
 8000f98:	e014      	b.n	8000fc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9a:	f7ff fb47 	bl	800062c <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa0:	e00a      	b.n	8000fb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fa2:	f7ff fb43 	bl	800062c <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e09b      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb8:	4b40      	ldr	r3, [pc, #256]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1ee      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fc4:	7dfb      	ldrb	r3, [r7, #23]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d105      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fca:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	4a3b      	ldr	r2, [pc, #236]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 8087 	beq.w	80010ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fe0:	4b36      	ldr	r3, [pc, #216]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 030c 	and.w	r3, r3, #12
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d061      	beq.n	80010b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d146      	bne.n	8001082 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ff4:	4b33      	ldr	r3, [pc, #204]	; (80010c4 <HAL_RCC_OscConfig+0x4cc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffa:	f7ff fb17 	bl	800062c <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001000:	e008      	b.n	8001014 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001002:	f7ff fb13 	bl	800062c <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e06d      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f0      	bne.n	8001002 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001028:	d108      	bne.n	800103c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800102a:	4b24      	ldr	r3, [pc, #144]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	4921      	ldr	r1, [pc, #132]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8001038:	4313      	orrs	r3, r2
 800103a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a19      	ldr	r1, [r3, #32]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	430b      	orrs	r3, r1
 800104e:	491b      	ldr	r1, [pc, #108]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8001050:	4313      	orrs	r3, r2
 8001052:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_RCC_OscConfig+0x4cc>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105a:	f7ff fae7 	bl	800062c <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001062:	f7ff fae3 	bl	800062c <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e03d      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f0      	beq.n	8001062 <HAL_RCC_OscConfig+0x46a>
 8001080:	e035      	b.n	80010ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_RCC_OscConfig+0x4cc>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fad0 	bl	800062c <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001090:	f7ff facc 	bl	800062c <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e026      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_RCC_OscConfig+0x4c4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f0      	bne.n	8001090 <HAL_RCC_OscConfig+0x498>
 80010ae:	e01e      	b.n	80010ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d107      	bne.n	80010c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e019      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40007000 	.word	0x40007000
 80010c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_RCC_OscConfig+0x500>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d106      	bne.n	80010ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d001      	beq.n	80010ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e0d0      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001110:	4b6a      	ldr	r3, [pc, #424]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d910      	bls.n	8001140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111e:	4b67      	ldr	r3, [pc, #412]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f023 0207 	bic.w	r2, r3, #7
 8001126:	4965      	ldr	r1, [pc, #404]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	4313      	orrs	r3, r2
 800112c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800112e:	4b63      	ldr	r3, [pc, #396]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d001      	beq.n	8001140 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e0b8      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d020      	beq.n	800118e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001158:	4b59      	ldr	r3, [pc, #356]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4a58      	ldr	r2, [pc, #352]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 800115e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001162:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001170:	4b53      	ldr	r3, [pc, #332]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4a52      	ldr	r2, [pc, #328]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001176:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800117a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800117c:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	494d      	ldr	r1, [pc, #308]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 800118a:	4313      	orrs	r3, r2
 800118c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d040      	beq.n	800121c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d107      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d115      	bne.n	80011da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e07f      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d107      	bne.n	80011ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ba:	4b41      	ldr	r3, [pc, #260]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d109      	bne.n	80011da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e073      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ca:	4b3d      	ldr	r3, [pc, #244]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e06b      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011da:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f023 0203 	bic.w	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	4936      	ldr	r1, [pc, #216]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011ec:	f7ff fa1e 	bl	800062c <HAL_GetTick>
 80011f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f2:	e00a      	b.n	800120a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f4:	f7ff fa1a 	bl	800062c <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001202:	4293      	cmp	r3, r2
 8001204:	d901      	bls.n	800120a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e053      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 020c 	and.w	r2, r3, #12
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	429a      	cmp	r2, r3
 800121a:	d1eb      	bne.n	80011f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d210      	bcs.n	800124c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122a:	4b24      	ldr	r3, [pc, #144]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 0207 	bic.w	r2, r3, #7
 8001232:	4922      	ldr	r1, [pc, #136]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d001      	beq.n	800124c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e032      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	4916      	ldr	r1, [pc, #88]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	4313      	orrs	r3, r2
 8001268:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d009      	beq.n	800128a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	490e      	ldr	r1, [pc, #56]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	4313      	orrs	r3, r2
 8001288:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800128a:	f000 f821 	bl	80012d0 <HAL_RCC_GetSysClockFreq>
 800128e:	4602      	mov	r2, r0
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	490a      	ldr	r1, [pc, #40]	; (80012c4 <HAL_RCC_ClockConfig+0x1c8>)
 800129c:	5ccb      	ldrb	r3, [r1, r3]
 800129e:	fa22 f303 	lsr.w	r3, r2, r3
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <HAL_RCC_ClockConfig+0x1cc>)
 80012a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_RCC_ClockConfig+0x1d0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f8c2 	bl	8000434 <HAL_InitTick>

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40022000 	.word	0x40022000
 80012c0:	40021000 	.word	0x40021000
 80012c4:	08003f40 	.word	0x08003f40
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000004 	.word	0x20000004

080012d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <HAL_RCC_GetSysClockFreq+0x94>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d002      	beq.n	8001300 <HAL_RCC_GetSysClockFreq+0x30>
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d003      	beq.n	8001306 <HAL_RCC_GetSysClockFreq+0x36>
 80012fe:	e027      	b.n	8001350 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_RCC_GetSysClockFreq+0x98>)
 8001302:	613b      	str	r3, [r7, #16]
      break;
 8001304:	e027      	b.n	8001356 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	0c9b      	lsrs	r3, r3, #18
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	4a17      	ldr	r2, [pc, #92]	; (800136c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001310:	5cd3      	ldrb	r3, [r2, r3]
 8001312:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d010      	beq.n	8001340 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_RCC_GetSysClockFreq+0x94>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	0c5b      	lsrs	r3, r3, #17
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_RCC_GetSysClockFreq+0xa0>)
 800132a:	5cd3      	ldrb	r3, [r2, r3]
 800132c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <HAL_RCC_GetSysClockFreq+0x98>)
 8001332:	fb03 f202 	mul.w	r2, r3, r2
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	fbb2 f3f3 	udiv	r3, r2, r3
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	e004      	b.n	800134a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	613b      	str	r3, [r7, #16]
      break;
 800134e:	e002      	b.n	8001356 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_RCC_GetSysClockFreq+0x98>)
 8001352:	613b      	str	r3, [r7, #16]
      break;
 8001354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001356:	693b      	ldr	r3, [r7, #16]
}
 8001358:	4618      	mov	r0, r3
 800135a:	371c      	adds	r7, #28
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000
 8001368:	007a1200 	.word	0x007a1200
 800136c:	08003f58 	.word	0x08003f58
 8001370:	08003f68 	.word	0x08003f68
 8001374:	003d0900 	.word	0x003d0900

08001378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800137c:	4b02      	ldr	r3, [pc, #8]	; (8001388 <HAL_RCC_GetHCLKFreq+0x10>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	20000000 	.word	0x20000000

0800138c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001390:	f7ff fff2 	bl	8001378 <HAL_RCC_GetHCLKFreq>
 8001394:	4602      	mov	r2, r0
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	4903      	ldr	r1, [pc, #12]	; (80013b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013a2:	5ccb      	ldrb	r3, [r1, r3]
 80013a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021000 	.word	0x40021000
 80013b0:	08003f50 	.word	0x08003f50

080013b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	220f      	movs	r2, #15
 80013c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_RCC_GetClockConfig+0x58>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0203 	and.w	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <HAL_RCC_GetClockConfig+0x58>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_RCC_GetClockConfig+0x58>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_RCC_GetClockConfig+0x58>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	08db      	lsrs	r3, r3, #3
 80013ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_RCC_GetClockConfig+0x5c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0207 	and.w	r2, r3, #7
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	40021000 	.word	0x40021000
 8001410:	40022000 	.word	0x40022000

08001414 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <RCC_Delay+0x34>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0a      	ldr	r2, [pc, #40]	; (800144c <RCC_Delay+0x38>)
 8001422:	fba2 2303 	umull	r2, r3, r2, r3
 8001426:	0a5b      	lsrs	r3, r3, #9
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001430:	bf00      	nop
  }
  while (Delay --);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1e5a      	subs	r2, r3, #1
 8001436:	60fa      	str	r2, [r7, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f9      	bne.n	8001430 <RCC_Delay+0x1c>
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	20000000 	.word	0x20000000
 800144c:	10624dd3 	.word	0x10624dd3

08001450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e041      	b.n	80014e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d106      	bne.n	800147c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f839 	bl	80014ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2202      	movs	r2, #2
 8001480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3304      	adds	r3, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4610      	mov	r0, r2
 8001490:	f000 f9b4 	bl	80017fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b01      	cmp	r3, #1
 8001512:	d001      	beq.n	8001518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e03a      	b.n	800158e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0201 	orr.w	r2, r2, #1
 800152e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a18      	ldr	r2, [pc, #96]	; (8001598 <HAL_TIM_Base_Start_IT+0x98>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00e      	beq.n	8001558 <HAL_TIM_Base_Start_IT+0x58>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001542:	d009      	beq.n	8001558 <HAL_TIM_Base_Start_IT+0x58>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a14      	ldr	r2, [pc, #80]	; (800159c <HAL_TIM_Base_Start_IT+0x9c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d004      	beq.n	8001558 <HAL_TIM_Base_Start_IT+0x58>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d111      	bne.n	800157c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b06      	cmp	r3, #6
 8001568:	d010      	beq.n	800158c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 0201 	orr.w	r2, r2, #1
 8001578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800157a:	e007      	b.n	800158c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0201 	orr.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	40012c00 	.word	0x40012c00
 800159c:	40000400 	.word	0x40000400
 80015a0:	40000800 	.word	0x40000800

080015a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d122      	bne.n	8001600 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d11b      	bne.n	8001600 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f06f 0202 	mvn.w	r2, #2
 80015d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f8ed 	bl	80017c6 <HAL_TIM_IC_CaptureCallback>
 80015ec:	e005      	b.n	80015fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f8e0 	bl	80017b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f8ef 	bl	80017d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b04      	cmp	r3, #4
 800160c:	d122      	bne.n	8001654 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b04      	cmp	r3, #4
 800161a:	d11b      	bne.n	8001654 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f06f 0204 	mvn.w	r2, #4
 8001624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2202      	movs	r2, #2
 800162a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f8c3 	bl	80017c6 <HAL_TIM_IC_CaptureCallback>
 8001640:	e005      	b.n	800164e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f8b6 	bl	80017b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f8c5 	bl	80017d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b08      	cmp	r3, #8
 8001660:	d122      	bne.n	80016a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b08      	cmp	r3, #8
 800166e:	d11b      	bne.n	80016a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f06f 0208 	mvn.w	r2, #8
 8001678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2204      	movs	r2, #4
 800167e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f899 	bl	80017c6 <HAL_TIM_IC_CaptureCallback>
 8001694:	e005      	b.n	80016a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f88c 	bl	80017b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f89b 	bl	80017d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	2b10      	cmp	r3, #16
 80016b4:	d122      	bne.n	80016fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	2b10      	cmp	r3, #16
 80016c2:	d11b      	bne.n	80016fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f06f 0210 	mvn.w	r2, #16
 80016cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2208      	movs	r2, #8
 80016d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f86f 	bl	80017c6 <HAL_TIM_IC_CaptureCallback>
 80016e8:	e005      	b.n	80016f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f862 	bl	80017b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f871 	bl	80017d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b01      	cmp	r3, #1
 8001708:	d10e      	bne.n	8001728 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b01      	cmp	r3, #1
 8001716:	d107      	bne.n	8001728 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f06f 0201 	mvn.w	r2, #1
 8001720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7fe fe40 	bl	80003a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001732:	2b80      	cmp	r3, #128	; 0x80
 8001734:	d10e      	bne.n	8001754 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001740:	2b80      	cmp	r3, #128	; 0x80
 8001742:	d107      	bne.n	8001754 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800174c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f8bf 	bl	80018d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175e:	2b40      	cmp	r3, #64	; 0x40
 8001760:	d10e      	bne.n	8001780 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176c:	2b40      	cmp	r3, #64	; 0x40
 800176e:	d107      	bne.n	8001780 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f835 	bl	80017ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f003 0320 	and.w	r3, r3, #32
 800178a:	2b20      	cmp	r3, #32
 800178c:	d10e      	bne.n	80017ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f003 0320 	and.w	r3, r3, #32
 8001798:	2b20      	cmp	r3, #32
 800179a:	d107      	bne.n	80017ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f06f 0220 	mvn.w	r2, #32
 80017a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f88a 	bl	80018c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a29      	ldr	r2, [pc, #164]	; (80018b4 <TIM_Base_SetConfig+0xb8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d00b      	beq.n	800182c <TIM_Base_SetConfig+0x30>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800181a:	d007      	beq.n	800182c <TIM_Base_SetConfig+0x30>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a26      	ldr	r2, [pc, #152]	; (80018b8 <TIM_Base_SetConfig+0xbc>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d003      	beq.n	800182c <TIM_Base_SetConfig+0x30>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a25      	ldr	r2, [pc, #148]	; (80018bc <TIM_Base_SetConfig+0xc0>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d108      	bne.n	800183e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <TIM_Base_SetConfig+0xb8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d00b      	beq.n	800185e <TIM_Base_SetConfig+0x62>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800184c:	d007      	beq.n	800185e <TIM_Base_SetConfig+0x62>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <TIM_Base_SetConfig+0xbc>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d003      	beq.n	800185e <TIM_Base_SetConfig+0x62>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a18      	ldr	r2, [pc, #96]	; (80018bc <TIM_Base_SetConfig+0xc0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d108      	bne.n	8001870 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	4313      	orrs	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	4313      	orrs	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <TIM_Base_SetConfig+0xb8>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d103      	bne.n	80018a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	615a      	str	r2, [r3, #20]
}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	40012c00 	.word	0x40012c00
 80018b8:	40000400 	.word	0x40000400
 80018bc:	40000800 	.word	0x40000800

080018c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f103 0208 	add.w	r2, r3, #8
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295
 80018fc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f103 0208 	add.w	r2, r3, #8
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f103 0208 	add.w	r2, r3, #8
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800193a:	b480      	push	{r7}
 800193c:	b085      	sub	sp, #20
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001950:	d103      	bne.n	800195a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e00c      	b.n	8001974 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3308      	adds	r3, #8
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	e002      	b.n	8001968 <vListInsert+0x2e>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	429a      	cmp	r2, r3
 8001972:	d2f6      	bcs.n	8001962 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	601a      	str	r2, [r3, #0]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6892      	ldr	r2, [r2, #8]
 80019c0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6852      	ldr	r2, [r2, #4]
 80019ca:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d103      	bne.n	80019de <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	1e5a      	subs	r2, r3, #1
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001a06:	2301      	movs	r3, #1
 8001a08:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a18:	f383 8811 	msr	BASEPRI, r3
 8001a1c:	f3bf 8f6f 	isb	sy
 8001a20:	f3bf 8f4f 	dsb	sy
 8001a24:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001a26:	bf00      	nop
 8001a28:	e7fe      	b.n	8001a28 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d05d      	beq.n	8001aec <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d059      	beq.n	8001aec <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a40:	2100      	movs	r1, #0
 8001a42:	fba3 2302 	umull	r2, r3, r3, r2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d000      	beq.n	8001a4c <xQueueGenericReset+0x50>
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d14c      	bne.n	8001aec <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001a52:	f001 ff8d 	bl	8003970 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5e:	6939      	ldr	r1, [r7, #16]
 8001a60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	441a      	add	r2, r3
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a82:	3b01      	subs	r3, #1
 8001a84:	6939      	ldr	r1, [r7, #16]
 8001a86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a88:	fb01 f303 	mul.w	r3, r1, r3
 8001a8c:	441a      	add	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	22ff      	movs	r2, #255	; 0xff
 8001a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	22ff      	movs	r2, #255	; 0xff
 8001a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d114      	bne.n	8001ad2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01a      	beq.n	8001ae6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	3310      	adds	r3, #16
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f001 f935 	bl	8002d24 <xTaskRemoveFromEventList>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d012      	beq.n	8001ae6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <xQueueGenericReset+0x11c>)
 8001ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	f3bf 8f4f 	dsb	sy
 8001acc:	f3bf 8f6f 	isb	sy
 8001ad0:	e009      	b.n	8001ae6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	3310      	adds	r3, #16
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff04 	bl	80018e4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	3324      	adds	r3, #36	; 0x24
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff feff 	bl	80018e4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001ae6:	f001 ff73 	bl	80039d0 <vPortExitCritical>
 8001aea:	e001      	b.n	8001af0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10a      	bne.n	8001b0c <xQueueGenericReset+0x110>
        __asm volatile
 8001af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afa:	f383 8811 	msr	BASEPRI, r3
 8001afe:	f3bf 8f6f 	isb	sy
 8001b02:	f3bf 8f4f 	dsb	sy
 8001b06:	60bb      	str	r3, [r7, #8]
    }
 8001b08:	bf00      	nop
 8001b0a:	e7fe      	b.n	8001b0a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001b0c:	697b      	ldr	r3, [r7, #20]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	e000ed04 	.word	0xe000ed04

08001b1c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af02      	add	r7, sp, #8
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	4613      	mov	r3, r2
 8001b28:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d02e      	beq.n	8001b92 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001b34:	2100      	movs	r1, #0
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d000      	beq.n	8001b44 <xQueueGenericCreate+0x28>
 8001b42:	2101      	movs	r1, #1
 8001b44:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d123      	bne.n	8001b92 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001b52:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001b56:	d81c      	bhi.n	8001b92 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	fb02 f303 	mul.w	r3, r2, r3
 8001b60:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	3350      	adds	r3, #80	; 0x50
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 ffc2 	bl	8003af0 <pvPortMalloc>
 8001b6c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d01c      	beq.n	8001bae <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3350      	adds	r3, #80	; 0x50
 8001b7c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001b7e:	79fa      	ldrb	r2, [r7, #7]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	4613      	mov	r3, r2
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 f814 	bl	8001bb8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001b90:	e00d      	b.n	8001bae <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10a      	bne.n	8001bae <xQueueGenericCreate+0x92>
        __asm volatile
 8001b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b9c:	f383 8811 	msr	BASEPRI, r3
 8001ba0:	f3bf 8f6f 	isb	sy
 8001ba4:	f3bf 8f4f 	dsb	sy
 8001ba8:	613b      	str	r3, [r7, #16]
    }
 8001baa:	bf00      	nop
 8001bac:	e7fe      	b.n	8001bac <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001bae:	69fb      	ldr	r3, [r7, #28]
    }
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d103      	bne.n	8001bd4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	e002      	b.n	8001bda <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001be6:	2101      	movs	r1, #1
 8001be8:	69b8      	ldr	r0, [r7, #24]
 8001bea:	f7ff ff07 	bl	80019fc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08c      	sub	sp, #48	; 0x30
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10a      	bne.n	8001c30 <xQueueReceive+0x30>
        __asm volatile
 8001c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c1e:	f383 8811 	msr	BASEPRI, r3
 8001c22:	f3bf 8f6f 	isb	sy
 8001c26:	f3bf 8f4f 	dsb	sy
 8001c2a:	623b      	str	r3, [r7, #32]
    }
 8001c2c:	bf00      	nop
 8001c2e:	e7fe      	b.n	8001c2e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d103      	bne.n	8001c3e <xQueueReceive+0x3e>
 8001c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <xQueueReceive+0x42>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <xQueueReceive+0x44>
 8001c42:	2300      	movs	r3, #0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10a      	bne.n	8001c5e <xQueueReceive+0x5e>
        __asm volatile
 8001c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c4c:	f383 8811 	msr	BASEPRI, r3
 8001c50:	f3bf 8f6f 	isb	sy
 8001c54:	f3bf 8f4f 	dsb	sy
 8001c58:	61fb      	str	r3, [r7, #28]
    }
 8001c5a:	bf00      	nop
 8001c5c:	e7fe      	b.n	8001c5c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c5e:	f001 fa71 	bl	8003144 <xTaskGetSchedulerState>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <xQueueReceive+0x6e>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <xQueueReceive+0x72>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <xQueueReceive+0x74>
 8001c72:	2300      	movs	r3, #0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10a      	bne.n	8001c8e <xQueueReceive+0x8e>
        __asm volatile
 8001c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c7c:	f383 8811 	msr	BASEPRI, r3
 8001c80:	f3bf 8f6f 	isb	sy
 8001c84:	f3bf 8f4f 	dsb	sy
 8001c88:	61bb      	str	r3, [r7, #24]
    }
 8001c8a:	bf00      	nop
 8001c8c:	e7fe      	b.n	8001c8c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001c8e:	f001 fe6f 	bl	8003970 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01f      	beq.n	8001cde <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c9e:	68b9      	ldr	r1, [r7, #8]
 8001ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ca2:	f000 f88d 	bl	8001dc0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	1e5a      	subs	r2, r3, #1
 8001caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cac:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00f      	beq.n	8001cd6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb8:	3310      	adds	r3, #16
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f001 f832 	bl	8002d24 <xTaskRemoveFromEventList>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <xQueueReceive+0x1bc>)
 8001cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	f3bf 8f4f 	dsb	sy
 8001cd2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001cd6:	f001 fe7b 	bl	80039d0 <vPortExitCritical>
                return pdPASS;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e069      	b.n	8001db2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d103      	bne.n	8001cec <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001ce4:	f001 fe74 	bl	80039d0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e062      	b.n	8001db2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 f8ea 	bl	8002ed0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001d00:	f001 fe66 	bl	80039d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001d04:	f000 fc48 	bl	8002598 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001d08:	f001 fe32 	bl	8003970 <vPortEnterCritical>
 8001d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d103      	bne.n	8001d22 <xQueueReceive+0x122>
 8001d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d28:	b25b      	sxtb	r3, r3
 8001d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2e:	d103      	bne.n	8001d38 <xQueueReceive+0x138>
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d38:	f001 fe4a 	bl	80039d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d3c:	1d3a      	adds	r2, r7, #4
 8001d3e:	f107 0310 	add.w	r3, r7, #16
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f001 f8d9 	bl	8002efc <xTaskCheckForTimeOut>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d123      	bne.n	8001d98 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d52:	f000 f8ad 	bl	8001eb0 <prvIsQueueEmpty>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d017      	beq.n	8001d8c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5e:	3324      	adds	r3, #36	; 0x24
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 ff73 	bl	8002c50 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d6c:	f000 f84e 	bl	8001e0c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001d70:	f000 fc20 	bl	80025b4 <xTaskResumeAll>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d189      	bne.n	8001c8e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <xQueueReceive+0x1bc>)
 8001d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	f3bf 8f4f 	dsb	sy
 8001d86:	f3bf 8f6f 	isb	sy
 8001d8a:	e780      	b.n	8001c8e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d8e:	f000 f83d 	bl	8001e0c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001d92:	f000 fc0f 	bl	80025b4 <xTaskResumeAll>
 8001d96:	e77a      	b.n	8001c8e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d9a:	f000 f837 	bl	8001e0c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001d9e:	f000 fc09 	bl	80025b4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001da4:	f000 f884 	bl	8001eb0 <prvIsQueueEmpty>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f43f af6f 	beq.w	8001c8e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001db0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3730      	adds	r7, #48	; 0x30
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	e000ed04 	.word	0xe000ed04

08001dc0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d018      	beq.n	8001e04 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	441a      	add	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d303      	bcc.n	8001df4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68d9      	ldr	r1, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	6838      	ldr	r0, [r7, #0]
 8001e00:	f002 f86c 	bl	8003edc <memcpy>
    }
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001e14:	f001 fdac 	bl	8003970 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e1e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e20:	e011      	b.n	8001e46 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d012      	beq.n	8001e50 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3324      	adds	r3, #36	; 0x24
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 ff78 	bl	8002d24 <xTaskRemoveFromEventList>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001e3a:	f001 f8c5 	bl	8002fc8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	dce9      	bgt.n	8001e22 <prvUnlockQueue+0x16>
 8001e4e:	e000      	b.n	8001e52 <prvUnlockQueue+0x46>
                    break;
 8001e50:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	22ff      	movs	r2, #255	; 0xff
 8001e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001e5a:	f001 fdb9 	bl	80039d0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001e5e:	f001 fd87 	bl	8003970 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e68:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e6a:	e011      	b.n	8001e90 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d012      	beq.n	8001e9a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3310      	adds	r3, #16
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 ff53 	bl	8002d24 <xTaskRemoveFromEventList>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001e84:	f001 f8a0 	bl	8002fc8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001e88:	7bbb      	ldrb	r3, [r7, #14]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	dce9      	bgt.n	8001e6c <prvUnlockQueue+0x60>
 8001e98:	e000      	b.n	8001e9c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001e9a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	22ff      	movs	r2, #255	; 0xff
 8001ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001ea4:	f001 fd94 	bl	80039d0 <vPortExitCritical>
}
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001eb8:	f001 fd5a 	bl	8003970 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	e001      	b.n	8001ece <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001ece:	f001 fd7f 	bl	80039d0 <vPortExitCritical>

    return xReturn;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10a      	bne.n	8001f06 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8001ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef4:	f383 8811 	msr	BASEPRI, r3
 8001ef8:	f3bf 8f6f 	isb	sy
 8001efc:	f3bf 8f4f 	dsb	sy
 8001f00:	60fb      	str	r3, [r7, #12]
    }
 8001f02:	bf00      	nop
 8001f04:	e7fe      	b.n	8001f04 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d024      	beq.n	8001f56 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e01e      	b.n	8001f50 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001f12:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <vQueueAddToRegistry+0x98>)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d105      	bne.n	8001f2e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <vQueueAddToRegistry+0x98>)
 8001f28:	4413      	add	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
                    break;
 8001f2c:	e013      	b.n	8001f56 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10a      	bne.n	8001f4a <vQueueAddToRegistry+0x6e>
 8001f34:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <vQueueAddToRegistry+0x98>)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d104      	bne.n	8001f4a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <vQueueAddToRegistry+0x98>)
 8001f46:	4413      	add	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b07      	cmp	r3, #7
 8001f54:	d9dd      	bls.n	8001f12 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001f68:	bf00      	nop
 8001f6a:	371c      	adds	r7, #28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000090 	.word	0x20000090

08001f78 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001f88:	f001 fcf2 	bl	8003970 <vPortEnterCritical>
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f92:	b25b      	sxtb	r3, r3
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d103      	bne.n	8001fa2 <vQueueWaitForMessageRestricted+0x2a>
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fa8:	b25b      	sxtb	r3, r3
 8001faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fae:	d103      	bne.n	8001fb8 <vQueueWaitForMessageRestricted+0x40>
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fb8:	f001 fd0a 	bl	80039d0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d106      	bne.n	8001fd2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3324      	adds	r3, #36	; 0x24
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fe63 	bl	8002c98 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001fd2:	6978      	ldr	r0, [r7, #20]
 8001fd4:	f7ff ff1a 	bl	8001e0c <prvUnlockQueue>
    }
 8001fd8:	bf00      	nop
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af04      	add	r7, sp, #16
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	4613      	mov	r3, r2
 8001fee:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f001 fd7b 	bl	8003af0 <pvPortMalloc>
 8001ffa:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d013      	beq.n	800202a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002002:	2058      	movs	r0, #88	; 0x58
 8002004:	f001 fd74 	bl	8003af0 <pvPortMalloc>
 8002008:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002010:	2258      	movs	r2, #88	; 0x58
 8002012:	2100      	movs	r1, #0
 8002014:	69f8      	ldr	r0, [r7, #28]
 8002016:	f001 ff35 	bl	8003e84 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
 8002020:	e005      	b.n	800202e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002022:	6978      	ldr	r0, [r7, #20]
 8002024:	f001 fe1e 	bl	8003c64 <vPortFree>
 8002028:	e001      	b.n	800202e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d013      	beq.n	800205c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002034:	88fa      	ldrh	r2, [r7, #6]
 8002036:	2300      	movs	r3, #0
 8002038:	9303      	str	r3, [sp, #12]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	9302      	str	r3, [sp, #8]
 800203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f80e 	bl	800206c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002050:	69f8      	ldr	r0, [r7, #28]
 8002052:	f000 f899 	bl	8002188 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002056:	2301      	movs	r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	e002      	b.n	8002062 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
 8002060:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002062:	69bb      	ldr	r3, [r7, #24]
    }
 8002064:	4618      	mov	r0, r3
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	461a      	mov	r2, r3
 8002084:	21a5      	movs	r1, #165	; 0xa5
 8002086:	f001 fefd 	bl	8003e84 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800208a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002094:	3b01      	subs	r3, #1
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	f023 0307 	bic.w	r3, r3, #7
 80020a2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <prvInitialiseNewTask+0x58>
        __asm volatile
 80020ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b2:	f383 8811 	msr	BASEPRI, r3
 80020b6:	f3bf 8f6f 	isb	sy
 80020ba:	f3bf 8f4f 	dsb	sy
 80020be:	617b      	str	r3, [r7, #20]
    }
 80020c0:	bf00      	nop
 80020c2:	e7fe      	b.n	80020c2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d01e      	beq.n	8002108 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	e012      	b.n	80020f6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4413      	add	r3, r2
 80020d6:	7819      	ldrb	r1, [r3, #0]
 80020d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	4413      	add	r3, r2
 80020de:	3334      	adds	r3, #52	; 0x34
 80020e0:	460a      	mov	r2, r1
 80020e2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	4413      	add	r3, r2
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d006      	beq.n	80020fe <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	3301      	adds	r3, #1
 80020f4:	61fb      	str	r3, [r7, #28]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	2b09      	cmp	r3, #9
 80020fa:	d9e9      	bls.n	80020d0 <prvInitialiseNewTask+0x64>
 80020fc:	e000      	b.n	8002100 <prvInitialiseNewTask+0x94>
            {
                break;
 80020fe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	2b04      	cmp	r3, #4
 800210c:	d90a      	bls.n	8002124 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800210e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002112:	f383 8811 	msr	BASEPRI, r3
 8002116:	f3bf 8f6f 	isb	sy
 800211a:	f3bf 8f4f 	dsb	sy
 800211e:	613b      	str	r3, [r7, #16]
    }
 8002120:	bf00      	nop
 8002122:	e7fe      	b.n	8002122 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002126:	2b04      	cmp	r3, #4
 8002128:	d901      	bls.n	800212e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800212a:	2304      	movs	r3, #4
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002138:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800213a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213c:	3304      	adds	r3, #4
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fbef 	bl	8001922 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002146:	3318      	adds	r3, #24
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fbea 	bl	8001922 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002152:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002156:	f1c3 0205 	rsb	r2, r3, #5
 800215a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002162:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	68f9      	ldr	r1, [r7, #12]
 8002168:	69b8      	ldr	r0, [r7, #24]
 800216a:	f001 fb0b 	bl	8003784 <pxPortInitialiseStack>
 800216e:	4602      	mov	r2, r0
 8002170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002172:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800217e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002180:	bf00      	nop
 8002182:	3720      	adds	r7, #32
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002190:	f001 fbee 	bl	8003970 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002194:	4b40      	ldr	r3, [pc, #256]	; (8002298 <prvAddNewTaskToReadyList+0x110>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	3301      	adds	r3, #1
 800219a:	4a3f      	ldr	r2, [pc, #252]	; (8002298 <prvAddNewTaskToReadyList+0x110>)
 800219c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800219e:	4b3f      	ldr	r3, [pc, #252]	; (800229c <prvAddNewTaskToReadyList+0x114>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d109      	bne.n	80021ba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80021a6:	4a3d      	ldr	r2, [pc, #244]	; (800229c <prvAddNewTaskToReadyList+0x114>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80021ac:	4b3a      	ldr	r3, [pc, #232]	; (8002298 <prvAddNewTaskToReadyList+0x110>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d110      	bne.n	80021d6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80021b4:	f000 ff2e 	bl	8003014 <prvInitialiseTaskLists>
 80021b8:	e00d      	b.n	80021d6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80021ba:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <prvAddNewTaskToReadyList+0x118>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <prvAddNewTaskToReadyList+0x114>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d802      	bhi.n	80021d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80021d0:	4a32      	ldr	r2, [pc, #200]	; (800229c <prvAddNewTaskToReadyList+0x114>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80021d6:	4b33      	ldr	r3, [pc, #204]	; (80022a4 <prvAddNewTaskToReadyList+0x11c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	4a31      	ldr	r2, [pc, #196]	; (80022a4 <prvAddNewTaskToReadyList+0x11c>)
 80021de:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80021e0:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <prvAddNewTaskToReadyList+0x11c>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	2201      	movs	r2, #1
 80021ee:	409a      	lsls	r2, r3
 80021f0:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <prvAddNewTaskToReadyList+0x120>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	4a2c      	ldr	r2, [pc, #176]	; (80022a8 <prvAddNewTaskToReadyList+0x120>)
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fe:	492b      	ldr	r1, [pc, #172]	; (80022ac <prvAddNewTaskToReadyList+0x124>)
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	3304      	adds	r3, #4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	3204      	adds	r2, #4
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	1d1a      	adds	r2, r3, #4
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <prvAddNewTaskToReadyList+0x124>)
 800223e:	441a      	add	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	615a      	str	r2, [r3, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002248:	4918      	ldr	r1, [pc, #96]	; (80022ac <prvAddNewTaskToReadyList+0x124>)
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	1c59      	adds	r1, r3, #1
 8002258:	4814      	ldr	r0, [pc, #80]	; (80022ac <prvAddNewTaskToReadyList+0x124>)
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4403      	add	r3, r0
 8002264:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002266:	f001 fbb3 	bl	80039d0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <prvAddNewTaskToReadyList+0x118>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00e      	beq.n	8002290 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <prvAddNewTaskToReadyList+0x114>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	429a      	cmp	r2, r3
 800227e:	d207      	bcs.n	8002290 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <prvAddNewTaskToReadyList+0x128>)
 8002282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	f3bf 8f4f 	dsb	sy
 800228c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200001a8 	.word	0x200001a8
 800229c:	200000d0 	.word	0x200000d0
 80022a0:	200001b4 	.word	0x200001b4
 80022a4:	200001c4 	.word	0x200001c4
 80022a8:	200001b0 	.word	0x200001b0
 80022ac:	200000d4 	.word	0x200000d4
 80022b0:	e000ed04 	.word	0xe000ed04

080022b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d017      	beq.n	80022f6 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80022c6:	4b13      	ldr	r3, [pc, #76]	; (8002314 <vTaskDelay+0x60>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <vTaskDelay+0x30>
        __asm volatile
 80022ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d2:	f383 8811 	msr	BASEPRI, r3
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	60bb      	str	r3, [r7, #8]
    }
 80022e0:	bf00      	nop
 80022e2:	e7fe      	b.n	80022e2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80022e4:	f000 f958 	bl	8002598 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80022e8:	2100      	movs	r1, #0
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 ff48 	bl	8003180 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80022f0:	f000 f960 	bl	80025b4 <xTaskResumeAll>
 80022f4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d107      	bne.n	800230c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <vTaskDelay+0x64>)
 80022fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	f3bf 8f4f 	dsb	sy
 8002308:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200001d0 	.word	0x200001d0
 8002318:	e000ed04 	.word	0xe000ed04

0800231c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8002324:	f001 fb24 	bl	8003970 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d102      	bne.n	8002334 <uxTaskPriorityGet+0x18>
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <uxTaskPriorityGet+0x30>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	e000      	b.n	8002336 <uxTaskPriorityGet+0x1a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 800233e:	f001 fb47 	bl	80039d0 <vPortExitCritical>

        return uxReturn;
 8002342:	68bb      	ldr	r3, [r7, #8]
    }
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	200000d0 	.word	0x200000d0

08002350 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b04      	cmp	r3, #4
 8002362:	d90a      	bls.n	800237a <vTaskPrioritySet+0x2a>
        __asm volatile
 8002364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002368:	f383 8811 	msr	BASEPRI, r3
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	f3bf 8f4f 	dsb	sy
 8002374:	60bb      	str	r3, [r7, #8]
    }
 8002376:	bf00      	nop
 8002378:	e7fe      	b.n	8002378 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d901      	bls.n	8002384 <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002380:	2304      	movs	r3, #4
 8002382:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002384:	f001 faf4 	bl	8003970 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <vTaskPrioritySet+0x44>
 800238e:	4b55      	ldr	r3, [pc, #340]	; (80024e4 <vTaskPrioritySet+0x194>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	e000      	b.n	8002396 <vTaskPrioritySet+0x46>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239c:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	f000 8098 	beq.w	80024d8 <vTaskPrioritySet+0x188>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d90d      	bls.n	80023cc <vTaskPrioritySet+0x7c>
                {
                    if( pxTCB != pxCurrentTCB )
 80023b0:	4b4c      	ldr	r3, [pc, #304]	; (80024e4 <vTaskPrioritySet+0x194>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d00f      	beq.n	80023da <vTaskPrioritySet+0x8a>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80023ba:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <vTaskPrioritySet+0x194>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d309      	bcc.n	80023da <vTaskPrioritySet+0x8a>
                        {
                            xYieldRequired = pdTRUE;
 80023c6:	2301      	movs	r3, #1
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	e006      	b.n	80023da <vTaskPrioritySet+0x8a>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 80023cc:	4b45      	ldr	r3, [pc, #276]	; (80024e4 <vTaskPrioritySet+0x194>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d101      	bne.n	80023da <vTaskPrioritySet+0x8a>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 80023d6:	2301      	movs	r3, #1
 80023d8:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d102      	bne.n	80023f2 <vTaskPrioritySet+0xa2>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	649a      	str	r2, [r3, #72]	; 0x48
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db04      	blt.n	800240a <vTaskPrioritySet+0xba>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	f1c3 0205 	rsb	r2, r3, #5
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	6959      	ldr	r1, [r3, #20]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4a33      	ldr	r2, [pc, #204]	; (80024e8 <vTaskPrioritySet+0x198>)
 800241a:	4413      	add	r3, r2
 800241c:	4299      	cmp	r1, r3
 800241e:	d150      	bne.n	80024c2 <vTaskPrioritySet+0x172>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	3304      	adds	r3, #4
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fac0 	bl	80019aa <uxListRemove>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <vTaskPrioritySet+0xf4>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002430:	2201      	movs	r2, #1
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43da      	mvns	r2, r3
 800243a:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <vTaskPrioritySet+0x19c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4013      	ands	r3, r2
 8002440:	4a2a      	ldr	r2, [pc, #168]	; (80024ec <vTaskPrioritySet+0x19c>)
 8002442:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	2201      	movs	r2, #1
 800244a:	409a      	lsls	r2, r3
 800244c:	4b27      	ldr	r3, [pc, #156]	; (80024ec <vTaskPrioritySet+0x19c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4313      	orrs	r3, r2
 8002452:	4a26      	ldr	r2, [pc, #152]	; (80024ec <vTaskPrioritySet+0x19c>)
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245a:	4923      	ldr	r1, [pc, #140]	; (80024e8 <vTaskPrioritySet+0x198>)
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	3304      	adds	r3, #4
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	3204      	adds	r2, #4
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	1d1a      	adds	r2, r3, #4
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <vTaskPrioritySet+0x198>)
 800249a:	441a      	add	r2, r3
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	615a      	str	r2, [r3, #20]
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a4:	4910      	ldr	r1, [pc, #64]	; (80024e8 <vTaskPrioritySet+0x198>)
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	1c59      	adds	r1, r3, #1
 80024b4:	480c      	ldr	r0, [pc, #48]	; (80024e8 <vTaskPrioritySet+0x198>)
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4403      	add	r3, r0
 80024c0:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <vTaskPrioritySet+0x188>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <vTaskPrioritySet+0x1a0>)
 80024ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 80024d8:	f001 fa7a 	bl	80039d0 <vPortExitCritical>
    }
 80024dc:	bf00      	nop
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200000d0 	.word	0x200000d0
 80024e8:	200000d4 	.word	0x200000d4
 80024ec:	200001b0 	.word	0x200001b0
 80024f0:	e000ed04 	.word	0xe000ed04

080024f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <vTaskStartScheduler+0x88>)
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	2300      	movs	r3, #0
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2300      	movs	r3, #0
 8002504:	2282      	movs	r2, #130	; 0x82
 8002506:	491e      	ldr	r1, [pc, #120]	; (8002580 <vTaskStartScheduler+0x8c>)
 8002508:	481e      	ldr	r0, [pc, #120]	; (8002584 <vTaskStartScheduler+0x90>)
 800250a:	f7ff fd69 	bl	8001fe0 <xTaskCreate>
 800250e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d102      	bne.n	800251c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002516:	f000 feb3 	bl	8003280 <xTimerCreateTimerTask>
 800251a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d116      	bne.n	8002550 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	60bb      	str	r3, [r7, #8]
    }
 8002534:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002536:	4b14      	ldr	r3, [pc, #80]	; (8002588 <vTaskStartScheduler+0x94>)
 8002538:	f04f 32ff 	mov.w	r2, #4294967295
 800253c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <vTaskStartScheduler+0x98>)
 8002540:	2201      	movs	r2, #1
 8002542:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <vTaskStartScheduler+0x9c>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800254a:	f001 f99f 	bl	800388c <xPortStartScheduler>
 800254e:	e00e      	b.n	800256e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002556:	d10a      	bne.n	800256e <vTaskStartScheduler+0x7a>
        __asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	607b      	str	r3, [r7, #4]
    }
 800256a:	bf00      	nop
 800256c:	e7fe      	b.n	800256c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <vTaskStartScheduler+0xa0>)
 8002570:	681b      	ldr	r3, [r3, #0]
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200001cc 	.word	0x200001cc
 8002580:	08003f28 	.word	0x08003f28
 8002584:	08002fe1 	.word	0x08002fe1
 8002588:	200001c8 	.word	0x200001c8
 800258c:	200001b4 	.word	0x200001b4
 8002590:	200001ac 	.word	0x200001ac
 8002594:	2000000c 	.word	0x2000000c

08002598 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <vTaskSuspendAll+0x18>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3301      	adds	r3, #1
 80025a2:	4a03      	ldr	r2, [pc, #12]	; (80025b0 <vTaskSuspendAll+0x18>)
 80025a4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	200001d0 	.word	0x200001d0

080025b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80025c2:	4b71      	ldr	r3, [pc, #452]	; (8002788 <xTaskResumeAll+0x1d4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10a      	bne.n	80025e0 <xTaskResumeAll+0x2c>
        __asm volatile
 80025ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ce:	f383 8811 	msr	BASEPRI, r3
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	607b      	str	r3, [r7, #4]
    }
 80025dc:	bf00      	nop
 80025de:	e7fe      	b.n	80025de <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80025e0:	f001 f9c6 	bl	8003970 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80025e4:	4b68      	ldr	r3, [pc, #416]	; (8002788 <xTaskResumeAll+0x1d4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	4a67      	ldr	r2, [pc, #412]	; (8002788 <xTaskResumeAll+0x1d4>)
 80025ec:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025ee:	4b66      	ldr	r3, [pc, #408]	; (8002788 <xTaskResumeAll+0x1d4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f040 80c0 	bne.w	8002778 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80025f8:	4b64      	ldr	r3, [pc, #400]	; (800278c <xTaskResumeAll+0x1d8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80bb 	beq.w	8002778 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002602:	e08a      	b.n	800271a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002604:	4b62      	ldr	r3, [pc, #392]	; (8002790 <xTaskResumeAll+0x1dc>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	6a12      	ldr	r2, [r2, #32]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	69d2      	ldr	r2, [r2, #28]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3318      	adds	r3, #24
 800262e:	429a      	cmp	r2, r3
 8002630:	d103      	bne.n	800263a <xTaskResumeAll+0x86>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	6a1a      	ldr	r2, [r3, #32]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	2200      	movs	r2, #0
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	1e5a      	subs	r2, r3, #1
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	68d2      	ldr	r2, [r2, #12]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	6892      	ldr	r2, [r2, #8]
 8002662:	605a      	str	r2, [r3, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	3304      	adds	r3, #4
 800266c:	429a      	cmp	r2, r3
 800266e:	d103      	bne.n	8002678 <xTaskResumeAll+0xc4>
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2200      	movs	r2, #0
 800267c:	615a      	str	r2, [r3, #20]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	1e5a      	subs	r2, r3, #1
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	2201      	movs	r2, #1
 800268e:	409a      	lsls	r2, r3
 8002690:	4b40      	ldr	r3, [pc, #256]	; (8002794 <xTaskResumeAll+0x1e0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4313      	orrs	r3, r2
 8002696:	4a3f      	ldr	r2, [pc, #252]	; (8002794 <xTaskResumeAll+0x1e0>)
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269e:	493e      	ldr	r1, [pc, #248]	; (8002798 <xTaskResumeAll+0x1e4>)
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3304      	adds	r3, #4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	3204      	adds	r2, #4
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	1d1a      	adds	r2, r3, #4
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4a2e      	ldr	r2, [pc, #184]	; (8002798 <xTaskResumeAll+0x1e4>)
 80026de:	441a      	add	r2, r3
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	615a      	str	r2, [r3, #20]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e8:	492b      	ldr	r1, [pc, #172]	; (8002798 <xTaskResumeAll+0x1e4>)
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	1c59      	adds	r1, r3, #1
 80026f8:	4827      	ldr	r0, [pc, #156]	; (8002798 <xTaskResumeAll+0x1e4>)
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4403      	add	r3, r0
 8002704:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270a:	4b24      	ldr	r3, [pc, #144]	; (800279c <xTaskResumeAll+0x1e8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	429a      	cmp	r2, r3
 8002712:	d302      	bcc.n	800271a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002714:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <xTaskResumeAll+0x1ec>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800271a:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <xTaskResumeAll+0x1dc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f47f af70 	bne.w	8002604 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800272a:	f000 fcf1 	bl	8003110 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800272e:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <xTaskResumeAll+0x1f0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d010      	beq.n	800275c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800273a:	f000 f919 	bl	8002970 <xTaskIncrementTick>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <xTaskResumeAll+0x1ec>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3b01      	subs	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f1      	bne.n	800273a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002756:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <xTaskResumeAll+0x1f0>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800275c:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <xTaskResumeAll+0x1ec>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d009      	beq.n	8002778 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002764:	2301      	movs	r3, #1
 8002766:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <xTaskResumeAll+0x1f4>)
 800276a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002778:	f001 f92a 	bl	80039d0 <vPortExitCritical>

    return xAlreadyYielded;
 800277c:	69bb      	ldr	r3, [r7, #24]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3720      	adds	r7, #32
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200001d0 	.word	0x200001d0
 800278c:	200001a8 	.word	0x200001a8
 8002790:	20000168 	.word	0x20000168
 8002794:	200001b0 	.word	0x200001b0
 8002798:	200000d4 	.word	0x200000d4
 800279c:	200000d0 	.word	0x200000d0
 80027a0:	200001bc 	.word	0x200001bc
 80027a4:	200001b8 	.word	0x200001b8
 80027a8:	e000ed04 	.word	0xe000ed04

080027ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <xTaskGetTickCount+0x18>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80027b8:	687b      	ldr	r3, [r7, #4]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	200001ac 	.word	0x200001ac

080027c8 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 80027c8:	b480      	push	{r7}
 80027ca:	b08b      	sub	sp, #44	; 0x2c
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB;
        TCB_t * pxFirstTCB;
        TCB_t * pxReturn = NULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d05b      	beq.n	8002896 <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	3308      	adds	r3, #8
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d104      	bne.n	8002802 <prvSearchForNameWithinSingleList+0x3a>
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	3308      	adds	r3, #8
 8002820:	429a      	cmp	r2, r3
 8002822:	d104      	bne.n	800282e <prvSearchForNameWithinSingleList+0x66>
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800283a:	2300      	movs	r3, #0
 800283c:	623b      	str	r3, [r7, #32]
 800283e:	e01c      	b.n	800287a <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	4413      	add	r3, r2
 8002846:	3334      	adds	r3, #52	; 0x34
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	4413      	add	r3, r2
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	7afa      	ldrb	r2, [r7, #11]
 8002856:	429a      	cmp	r2, r3
 8002858:	d002      	beq.n	8002860 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 800285a:	2301      	movs	r3, #1
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	e006      	b.n	800286e <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 8002860:	7afb      	ldrb	r3, [r7, #11]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 800286a:	2301      	movs	r3, #1
 800286c:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d106      	bne.n	8002882 <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	3301      	adds	r3, #1
 8002878:	623b      	str	r3, [r7, #32]
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	2b09      	cmp	r3, #9
 800287e:	d9df      	bls.n	8002840 <prvSearchForNameWithinSingleList+0x78>
 8002880:	e000      	b.n	8002884 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 8002882:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	2b00      	cmp	r3, #0
 8002888:	d104      	bne.n	8002894 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	429a      	cmp	r2, r3
 8002890:	d1bb      	bne.n	800280a <prvSearchForNameWithinSingleList+0x42>
 8002892:	e000      	b.n	8002896 <prvSearchForNameWithinSingleList+0xce>
                    break;
 8002894:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002898:	4618      	mov	r0, r3
 800289a:	372c      	adds	r7, #44	; 0x2c
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
	...

080028a4 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 80028ac:	2305      	movs	r3, #5
 80028ae:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7fd fc4d 	bl	8000150 <strlen>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b09      	cmp	r3, #9
 80028ba:	d90a      	bls.n	80028d2 <xTaskGetHandle+0x2e>
        __asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	60fb      	str	r3, [r7, #12]
    }
 80028ce:	bf00      	nop
 80028d0:	e7fe      	b.n	80028d0 <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 80028d2:	f7ff fe61 	bl	8002598 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3b01      	subs	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4a1d      	ldr	r2, [pc, #116]	; (800295c <xTaskGetHandle+0xb8>)
 80028e8:	4413      	add	r3, r2
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff6b 	bl	80027c8 <prvSearchForNameWithinSingleList>
 80028f2:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d103      	bne.n	8002902 <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1ea      	bne.n	80028d6 <xTaskGetHandle+0x32>
 8002900:	e000      	b.n	8002904 <xTaskGetHandle+0x60>
                    break;
 8002902:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <xTaskGetHandle+0xbc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff59 	bl	80027c8 <prvSearchForNameWithinSingleList>
 8002916:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <xTaskGetHandle+0xc0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff4f 	bl	80027c8 <prvSearchForNameWithinSingleList>
 800292a:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
            {
                if( pxTCB == NULL )
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d104      	bne.n	800293c <xTaskGetHandle+0x98>
                {
                    /* Search the suspended list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	480c      	ldr	r0, [pc, #48]	; (8002968 <xTaskGetHandle+0xc4>)
 8002936:	f7ff ff47 	bl	80027c8 <prvSearchForNameWithinSingleList>
 800293a:	6138      	str	r0, [r7, #16]
            }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
            {
                if( pxTCB == NULL )
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d104      	bne.n	800294c <xTaskGetHandle+0xa8>
                {
                    /* Search the deleted list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4809      	ldr	r0, [pc, #36]	; (800296c <xTaskGetHandle+0xc8>)
 8002946:	f7ff ff3f 	bl	80027c8 <prvSearchForNameWithinSingleList>
 800294a:	6138      	str	r0, [r7, #16]
                }
            }
            #endif
        }
        ( void ) xTaskResumeAll();
 800294c:	f7ff fe32 	bl	80025b4 <xTaskResumeAll>

        return pxTCB;
 8002950:	693b      	ldr	r3, [r7, #16]
    }
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200000d4 	.word	0x200000d4
 8002960:	20000160 	.word	0x20000160
 8002964:	20000164 	.word	0x20000164
 8002968:	20000194 	.word	0x20000194
 800296c:	2000017c 	.word	0x2000017c

08002970 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002976:	2300      	movs	r3, #0
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800297a:	4b7d      	ldr	r3, [pc, #500]	; (8002b70 <xTaskIncrementTick+0x200>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 80ec 	bne.w	8002b5c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002984:	4b7b      	ldr	r3, [pc, #492]	; (8002b74 <xTaskIncrementTick+0x204>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800298c:	4a79      	ldr	r2, [pc, #484]	; (8002b74 <xTaskIncrementTick+0x204>)
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d120      	bne.n	80029da <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002998:	4b77      	ldr	r3, [pc, #476]	; (8002b78 <xTaskIncrementTick+0x208>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <xTaskIncrementTick+0x48>
        __asm volatile
 80029a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	607b      	str	r3, [r7, #4]
    }
 80029b4:	bf00      	nop
 80029b6:	e7fe      	b.n	80029b6 <xTaskIncrementTick+0x46>
 80029b8:	4b6f      	ldr	r3, [pc, #444]	; (8002b78 <xTaskIncrementTick+0x208>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	4b6f      	ldr	r3, [pc, #444]	; (8002b7c <xTaskIncrementTick+0x20c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a6d      	ldr	r2, [pc, #436]	; (8002b78 <xTaskIncrementTick+0x208>)
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	4a6d      	ldr	r2, [pc, #436]	; (8002b7c <xTaskIncrementTick+0x20c>)
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b6c      	ldr	r3, [pc, #432]	; (8002b80 <xTaskIncrementTick+0x210>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3301      	adds	r3, #1
 80029d2:	4a6b      	ldr	r2, [pc, #428]	; (8002b80 <xTaskIncrementTick+0x210>)
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	f000 fb9b 	bl	8003110 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80029da:	4b6a      	ldr	r3, [pc, #424]	; (8002b84 <xTaskIncrementTick+0x214>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a3a      	ldr	r2, [r7, #32]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	f0c0 80a6 	bcc.w	8002b32 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029e6:	4b64      	ldr	r3, [pc, #400]	; (8002b78 <xTaskIncrementTick+0x208>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d104      	bne.n	80029fa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029f0:	4b64      	ldr	r3, [pc, #400]	; (8002b84 <xTaskIncrementTick+0x214>)
 80029f2:	f04f 32ff 	mov.w	r2, #4294967295
 80029f6:	601a      	str	r2, [r3, #0]
                    break;
 80029f8:	e09b      	b.n	8002b32 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029fa:	4b5f      	ldr	r3, [pc, #380]	; (8002b78 <xTaskIncrementTick+0x208>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002a0a:	6a3a      	ldr	r2, [r7, #32]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d203      	bcs.n	8002a1a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002a12:	4a5c      	ldr	r2, [pc, #368]	; (8002b84 <xTaskIncrementTick+0x214>)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002a18:	e08b      	b.n	8002b32 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	68d2      	ldr	r2, [r2, #12]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	6892      	ldr	r2, [r2, #8]
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d103      	bne.n	8002a48 <xTaskIncrementTick+0xd8>
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	615a      	str	r2, [r3, #20]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	1e5a      	subs	r2, r3, #1
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01e      	beq.n	8002a9e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	6a12      	ldr	r2, [r2, #32]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	69d2      	ldr	r2, [r2, #28]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	3318      	adds	r3, #24
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d103      	bne.n	8002a8e <xTaskIncrementTick+0x11e>
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	6a1a      	ldr	r2, [r3, #32]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2200      	movs	r2, #0
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	1e5a      	subs	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <xTaskIncrementTick+0x218>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	4a36      	ldr	r2, [pc, #216]	; (8002b88 <xTaskIncrementTick+0x218>)
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab4:	4935      	ldr	r1, [pc, #212]	; (8002b8c <xTaskIncrementTick+0x21c>)
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	60da      	str	r2, [r3, #12]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	3204      	adds	r2, #4
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	1d1a      	adds	r2, r3, #4
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4a26      	ldr	r2, [pc, #152]	; (8002b8c <xTaskIncrementTick+0x21c>)
 8002af4:	441a      	add	r2, r3
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	615a      	str	r2, [r3, #20]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afe:	4923      	ldr	r1, [pc, #140]	; (8002b8c <xTaskIncrementTick+0x21c>)
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	1c59      	adds	r1, r3, #1
 8002b0e:	481f      	ldr	r0, [pc, #124]	; (8002b8c <xTaskIncrementTick+0x21c>)
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4403      	add	r3, r0
 8002b1a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b20:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <xTaskIncrementTick+0x220>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	429a      	cmp	r2, r3
 8002b28:	f67f af5d 	bls.w	80029e6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b30:	e759      	b.n	80029e6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b32:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <xTaskIncrementTick+0x220>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b38:	4914      	ldr	r1, [pc, #80]	; (8002b8c <xTaskIncrementTick+0x21c>)
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d901      	bls.n	8002b4e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002b4e:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <xTaskIncrementTick+0x224>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002b56:	2301      	movs	r3, #1
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5a:	e004      	b.n	8002b66 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <xTaskIncrementTick+0x228>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	4a0d      	ldr	r2, [pc, #52]	; (8002b98 <xTaskIncrementTick+0x228>)
 8002b64:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3728      	adds	r7, #40	; 0x28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	200001d0 	.word	0x200001d0
 8002b74:	200001ac 	.word	0x200001ac
 8002b78:	20000160 	.word	0x20000160
 8002b7c:	20000164 	.word	0x20000164
 8002b80:	200001c0 	.word	0x200001c0
 8002b84:	200001c8 	.word	0x200001c8
 8002b88:	200001b0 	.word	0x200001b0
 8002b8c:	200000d4 	.word	0x200000d4
 8002b90:	200000d0 	.word	0x200000d0
 8002b94:	200001bc 	.word	0x200001bc
 8002b98:	200001b8 	.word	0x200001b8

08002b9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ba2:	4b26      	ldr	r3, [pc, #152]	; (8002c3c <vTaskSwitchContext+0xa0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002baa:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <vTaskSwitchContext+0xa4>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002bb0:	e03f      	b.n	8002c32 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002bb2:	4b23      	ldr	r3, [pc, #140]	; (8002c40 <vTaskSwitchContext+0xa4>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bb8:	4b22      	ldr	r3, [pc, #136]	; (8002c44 <vTaskSwitchContext+0xa8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	fab3 f383 	clz	r3, r3
 8002bc4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002bc6:	7afb      	ldrb	r3, [r7, #11]
 8002bc8:	f1c3 031f 	rsb	r3, r3, #31
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	491e      	ldr	r1, [pc, #120]	; (8002c48 <vTaskSwitchContext+0xac>)
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10a      	bne.n	8002bf8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be6:	f383 8811 	msr	BASEPRI, r3
 8002bea:	f3bf 8f6f 	isb	sy
 8002bee:	f3bf 8f4f 	dsb	sy
 8002bf2:	607b      	str	r3, [r7, #4]
    }
 8002bf4:	bf00      	nop
 8002bf6:	e7fe      	b.n	8002bf6 <vTaskSwitchContext+0x5a>
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4a11      	ldr	r2, [pc, #68]	; (8002c48 <vTaskSwitchContext+0xac>)
 8002c04:	4413      	add	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	3308      	adds	r3, #8
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d104      	bne.n	8002c28 <vTaskSwitchContext+0x8c>
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <vTaskSwitchContext+0xb0>)
 8002c30:	6013      	str	r3, [r2, #0]
}
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	200001d0 	.word	0x200001d0
 8002c40:	200001bc 	.word	0x200001bc
 8002c44:	200001b0 	.word	0x200001b0
 8002c48:	200000d4 	.word	0x200000d4
 8002c4c:	200000d0 	.word	0x200000d0

08002c50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	60fb      	str	r3, [r7, #12]
    }
 8002c72:	bf00      	nop
 8002c74:	e7fe      	b.n	8002c74 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c76:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <vTaskPlaceOnEventList+0x44>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3318      	adds	r3, #24
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fe fe5b 	bl	800193a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c84:	2101      	movs	r1, #1
 8002c86:	6838      	ldr	r0, [r7, #0]
 8002c88:	f000 fa7a 	bl	8003180 <prvAddCurrentTaskToDelayedList>
}
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	200000d0 	.word	0x200000d0

08002c98 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10a      	bne.n	8002cc0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	613b      	str	r3, [r7, #16]
    }
 8002cbc:	bf00      	nop
 8002cbe:	e7fe      	b.n	8002cbe <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <vTaskPlaceOnEventListRestricted+0x88>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	61da      	str	r2, [r3, #28]
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <vTaskPlaceOnEventListRestricted+0x88>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	6892      	ldr	r2, [r2, #8]
 8002cd6:	621a      	str	r2, [r3, #32]
 8002cd8:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <vTaskPlaceOnEventListRestricted+0x88>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	3218      	adds	r2, #24
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <vTaskPlaceOnEventListRestricted+0x88>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f103 0218 	add.w	r2, r3, #24
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <vTaskPlaceOnEventListRestricted+0x88>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	629a      	str	r2, [r3, #40]	; 0x28
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002d08:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	68b8      	ldr	r0, [r7, #8]
 8002d12:	f000 fa35 	bl	8003180 <prvAddCurrentTaskToDelayedList>
    }
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200000d0 	.word	0x200000d0

08002d24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002d24:	b480      	push	{r7}
 8002d26:	b08b      	sub	sp, #44	; 0x2c
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10a      	bne.n	8002d50 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	60fb      	str	r3, [r7, #12]
    }
 8002d4c:	bf00      	nop
 8002d4e:	e7fe      	b.n	8002d4e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	6a3a      	ldr	r2, [r7, #32]
 8002d5c:	6a12      	ldr	r2, [r2, #32]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	6a3a      	ldr	r2, [r7, #32]
 8002d66:	69d2      	ldr	r2, [r2, #28]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	3318      	adds	r3, #24
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d103      	bne.n	8002d7e <xTaskRemoveFromEventList+0x5a>
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	6a1a      	ldr	r2, [r3, #32]
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	2200      	movs	r2, #0
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	1e5a      	subs	r2, r3, #1
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d8e:	4b4a      	ldr	r3, [pc, #296]	; (8002eb8 <xTaskRemoveFromEventList+0x194>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d15e      	bne.n	8002e54 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	6a3a      	ldr	r2, [r7, #32]
 8002da2:	68d2      	ldr	r2, [r2, #12]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	6a3a      	ldr	r2, [r7, #32]
 8002dac:	6892      	ldr	r2, [r2, #8]
 8002dae:	605a      	str	r2, [r3, #4]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	3304      	adds	r3, #4
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d103      	bne.n	8002dc4 <xTaskRemoveFromEventList+0xa0>
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	615a      	str	r2, [r3, #20]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	1e5a      	subs	r2, r3, #1
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	2201      	movs	r2, #1
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	4b37      	ldr	r3, [pc, #220]	; (8002ebc <xTaskRemoveFromEventList+0x198>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	4a36      	ldr	r2, [pc, #216]	; (8002ebc <xTaskRemoveFromEventList+0x198>)
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dea:	4935      	ldr	r1, [pc, #212]	; (8002ec0 <xTaskRemoveFromEventList+0x19c>)
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	3304      	adds	r3, #4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	609a      	str	r2, [r3, #8]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	6a3a      	ldr	r2, [r7, #32]
 8002e10:	3204      	adds	r2, #4
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	1d1a      	adds	r2, r3, #4
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <xTaskRemoveFromEventList+0x19c>)
 8002e2a:	441a      	add	r2, r3
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	615a      	str	r2, [r3, #20]
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e34:	4922      	ldr	r1, [pc, #136]	; (8002ec0 <xTaskRemoveFromEventList+0x19c>)
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	1c59      	adds	r1, r3, #1
 8002e44:	481e      	ldr	r0, [pc, #120]	; (8002ec0 <xTaskRemoveFromEventList+0x19c>)
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4403      	add	r3, r0
 8002e50:	6019      	str	r1, [r3, #0]
 8002e52:	e01b      	b.n	8002e8c <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <xTaskRemoveFromEventList+0x1a0>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	61da      	str	r2, [r3, #28]
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	621a      	str	r2, [r3, #32]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	6a3a      	ldr	r2, [r7, #32]
 8002e6e:	3218      	adds	r2, #24
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	f103 0218 	add.w	r2, r3, #24
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	4a11      	ldr	r2, [pc, #68]	; (8002ec4 <xTaskRemoveFromEventList+0x1a0>)
 8002e80:	629a      	str	r2, [r3, #40]	; 0x28
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <xTaskRemoveFromEventList+0x1a0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3301      	adds	r3, #1
 8002e88:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <xTaskRemoveFromEventList+0x1a0>)
 8002e8a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e90:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <xTaskRemoveFromEventList+0x1a4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d905      	bls.n	8002ea6 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <xTaskRemoveFromEventList+0x1a8>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e001      	b.n	8002eaa <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	372c      	adds	r7, #44	; 0x2c
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	200001d0 	.word	0x200001d0
 8002ebc:	200001b0 	.word	0x200001b0
 8002ec0:	200000d4 	.word	0x200000d4
 8002ec4:	20000168 	.word	0x20000168
 8002ec8:	200000d0 	.word	0x200000d0
 8002ecc:	200001bc 	.word	0x200001bc

08002ed0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <vTaskInternalSetTimeOutState+0x24>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <vTaskInternalSetTimeOutState+0x28>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	605a      	str	r2, [r3, #4]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	200001c0 	.word	0x200001c0
 8002ef8:	200001ac 	.word	0x200001ac

08002efc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10a      	bne.n	8002f22 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	613b      	str	r3, [r7, #16]
    }
 8002f1e:	bf00      	nop
 8002f20:	e7fe      	b.n	8002f20 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	60fb      	str	r3, [r7, #12]
    }
 8002f3a:	bf00      	nop
 8002f3c:	e7fe      	b.n	8002f3c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002f3e:	f000 fd17 	bl	8003970 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002f42:	4b1f      	ldr	r3, [pc, #124]	; (8002fc0 <xTaskCheckForTimeOut+0xc4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5a:	d102      	bne.n	8002f62 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	e026      	b.n	8002fb0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4b17      	ldr	r3, [pc, #92]	; (8002fc4 <xTaskCheckForTimeOut+0xc8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d00a      	beq.n	8002f84 <xTaskCheckForTimeOut+0x88>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d305      	bcc.n	8002f84 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e015      	b.n	8002fb0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d20b      	bcs.n	8002fa6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	1ad2      	subs	r2, r2, r3
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff ff98 	bl	8002ed0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	61fb      	str	r3, [r7, #28]
 8002fa4:	e004      	b.n	8002fb0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002fac:	2301      	movs	r3, #1
 8002fae:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002fb0:	f000 fd0e 	bl	80039d0 <vPortExitCritical>

    return xReturn;
 8002fb4:	69fb      	ldr	r3, [r7, #28]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200001ac 	.word	0x200001ac
 8002fc4:	200001c0 	.word	0x200001c0

08002fc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <vTaskMissedYield+0x14>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	200001bc 	.word	0x200001bc

08002fe0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002fe8:	f000 f854 	bl	8003094 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002fec:	4b07      	ldr	r3, [pc, #28]	; (800300c <prvIdleTask+0x2c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d907      	bls.n	8003004 <prvIdleTask+0x24>
            {
                taskYIELD();
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <prvIdleTask+0x30>)
 8002ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8003004:	f7fd f918 	bl	8000238 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8003008:	e7ee      	b.n	8002fe8 <prvIdleTask+0x8>
 800300a:	bf00      	nop
 800300c:	200000d4 	.word	0x200000d4
 8003010:	e000ed04 	.word	0xe000ed04

08003014 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800301a:	2300      	movs	r3, #0
 800301c:	607b      	str	r3, [r7, #4]
 800301e:	e00c      	b.n	800303a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4a12      	ldr	r2, [pc, #72]	; (8003074 <prvInitialiseTaskLists+0x60>)
 800302c:	4413      	add	r3, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe fc58 	bl	80018e4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3301      	adds	r3, #1
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d9ef      	bls.n	8003020 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003040:	480d      	ldr	r0, [pc, #52]	; (8003078 <prvInitialiseTaskLists+0x64>)
 8003042:	f7fe fc4f 	bl	80018e4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003046:	480d      	ldr	r0, [pc, #52]	; (800307c <prvInitialiseTaskLists+0x68>)
 8003048:	f7fe fc4c 	bl	80018e4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800304c:	480c      	ldr	r0, [pc, #48]	; (8003080 <prvInitialiseTaskLists+0x6c>)
 800304e:	f7fe fc49 	bl	80018e4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003052:	480c      	ldr	r0, [pc, #48]	; (8003084 <prvInitialiseTaskLists+0x70>)
 8003054:	f7fe fc46 	bl	80018e4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003058:	480b      	ldr	r0, [pc, #44]	; (8003088 <prvInitialiseTaskLists+0x74>)
 800305a:	f7fe fc43 	bl	80018e4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <prvInitialiseTaskLists+0x78>)
 8003060:	4a05      	ldr	r2, [pc, #20]	; (8003078 <prvInitialiseTaskLists+0x64>)
 8003062:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003064:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <prvInitialiseTaskLists+0x7c>)
 8003066:	4a05      	ldr	r2, [pc, #20]	; (800307c <prvInitialiseTaskLists+0x68>)
 8003068:	601a      	str	r2, [r3, #0]
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200000d4 	.word	0x200000d4
 8003078:	20000138 	.word	0x20000138
 800307c:	2000014c 	.word	0x2000014c
 8003080:	20000168 	.word	0x20000168
 8003084:	2000017c 	.word	0x2000017c
 8003088:	20000194 	.word	0x20000194
 800308c:	20000160 	.word	0x20000160
 8003090:	20000164 	.word	0x20000164

08003094 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800309a:	e019      	b.n	80030d0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800309c:	f000 fc68 	bl	8003970 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030a0:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <prvCheckTasksWaitingTermination+0x50>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3304      	adds	r3, #4
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe fc7c 	bl	80019aa <uxListRemove>
                --uxCurrentNumberOfTasks;
 80030b2:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <prvCheckTasksWaitingTermination+0x54>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	4a0b      	ldr	r2, [pc, #44]	; (80030e8 <prvCheckTasksWaitingTermination+0x54>)
 80030ba:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <prvCheckTasksWaitingTermination+0x58>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <prvCheckTasksWaitingTermination+0x58>)
 80030c4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80030c6:	f000 fc83 	bl	80039d0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f810 	bl	80030f0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <prvCheckTasksWaitingTermination+0x58>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1e1      	bne.n	800309c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	2000017c 	.word	0x2000017c
 80030e8:	200001a8 	.word	0x200001a8
 80030ec:	20000190 	.word	0x20000190

080030f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fdb1 	bl	8003c64 <vPortFree>
            vPortFree( pxTCB );
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fdae 	bl	8003c64 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <prvResetNextTaskUnblockTime+0x2c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d104      	bne.n	8003128 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800311e:	4b08      	ldr	r3, [pc, #32]	; (8003140 <prvResetNextTaskUnblockTime+0x30>)
 8003120:	f04f 32ff 	mov.w	r2, #4294967295
 8003124:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003126:	e005      	b.n	8003134 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <prvResetNextTaskUnblockTime+0x2c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a03      	ldr	r2, [pc, #12]	; (8003140 <prvResetNextTaskUnblockTime+0x30>)
 8003132:	6013      	str	r3, [r2, #0]
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	20000160 	.word	0x20000160
 8003140:	200001c8 	.word	0x200001c8

08003144 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800314a:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <xTaskGetSchedulerState+0x34>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003152:	2301      	movs	r3, #1
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	e008      	b.n	800316a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <xTaskGetSchedulerState+0x38>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003160:	2302      	movs	r3, #2
 8003162:	607b      	str	r3, [r7, #4]
 8003164:	e001      	b.n	800316a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003166:	2300      	movs	r3, #0
 8003168:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800316a:	687b      	ldr	r3, [r7, #4]
    }
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	200001b4 	.word	0x200001b4
 800317c:	200001d0 	.word	0x200001d0

08003180 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800318a:	4b36      	ldr	r3, [pc, #216]	; (8003264 <prvAddCurrentTaskToDelayedList+0xe4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003190:	4b35      	ldr	r3, [pc, #212]	; (8003268 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3304      	adds	r3, #4
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe fc07 	bl	80019aa <uxListRemove>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10b      	bne.n	80031ba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80031a2:	4b31      	ldr	r3, [pc, #196]	; (8003268 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	2201      	movs	r2, #1
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43da      	mvns	r2, r3
 80031b0:	4b2e      	ldr	r3, [pc, #184]	; (800326c <prvAddCurrentTaskToDelayedList+0xec>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4013      	ands	r3, r2
 80031b6:	4a2d      	ldr	r2, [pc, #180]	; (800326c <prvAddCurrentTaskToDelayedList+0xec>)
 80031b8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c0:	d124      	bne.n	800320c <prvAddCurrentTaskToDelayedList+0x8c>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d021      	beq.n	800320c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031c8:	4b29      	ldr	r3, [pc, #164]	; (8003270 <prvAddCurrentTaskToDelayedList+0xf0>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	4b26      	ldr	r3, [pc, #152]	; (8003268 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	609a      	str	r2, [r3, #8]
 80031d6:	4b24      	ldr	r3, [pc, #144]	; (8003268 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	6892      	ldr	r2, [r2, #8]
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	4b21      	ldr	r3, [pc, #132]	; (8003268 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	3204      	adds	r2, #4
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	1d1a      	adds	r2, r3, #4
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <prvAddCurrentTaskToDelayedList+0xf0>)
 80031fc:	615a      	str	r2, [r3, #20]
 80031fe:	4b1c      	ldr	r3, [pc, #112]	; (8003270 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3301      	adds	r3, #1
 8003204:	4a1a      	ldr	r2, [pc, #104]	; (8003270 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800320a:	e026      	b.n	800325a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003214:	4b14      	ldr	r3, [pc, #80]	; (8003268 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	429a      	cmp	r2, r3
 8003222:	d209      	bcs.n	8003238 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <prvAddCurrentTaskToDelayedList+0xe8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3304      	adds	r3, #4
 800322e:	4619      	mov	r1, r3
 8003230:	4610      	mov	r0, r2
 8003232:	f7fe fb82 	bl	800193a <vListInsert>
}
 8003236:	e010      	b.n	800325a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <prvAddCurrentTaskToDelayedList+0xf8>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <prvAddCurrentTaskToDelayedList+0xe8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3304      	adds	r3, #4
 8003242:	4619      	mov	r1, r3
 8003244:	4610      	mov	r0, r2
 8003246:	f7fe fb78 	bl	800193a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800324a:	4b0c      	ldr	r3, [pc, #48]	; (800327c <prvAddCurrentTaskToDelayedList+0xfc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	429a      	cmp	r2, r3
 8003252:	d202      	bcs.n	800325a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003254:	4a09      	ldr	r2, [pc, #36]	; (800327c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6013      	str	r3, [r2, #0]
}
 800325a:	bf00      	nop
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200001ac 	.word	0x200001ac
 8003268:	200000d0 	.word	0x200000d0
 800326c:	200001b0 	.word	0x200001b0
 8003270:	20000194 	.word	0x20000194
 8003274:	20000164 	.word	0x20000164
 8003278:	20000160 	.word	0x20000160
 800327c:	200001c8 	.word	0x200001c8

08003280 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003286:	2300      	movs	r3, #0
 8003288:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800328a:	f000 fa45 	bl	8003718 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <xTimerCreateTimerTask+0x54>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <xTimerCreateTimerTask+0x58>)
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	2302      	movs	r3, #2
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	2300      	movs	r3, #0
 80032a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032a4:	490d      	ldr	r1, [pc, #52]	; (80032dc <xTimerCreateTimerTask+0x5c>)
 80032a6:	480e      	ldr	r0, [pc, #56]	; (80032e0 <xTimerCreateTimerTask+0x60>)
 80032a8:	f7fe fe9a 	bl	8001fe0 <xTaskCreate>
 80032ac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10a      	bne.n	80032ca <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80032b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	603b      	str	r3, [r7, #0]
    }
 80032c6:	bf00      	nop
 80032c8:	e7fe      	b.n	80032c8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80032ca:	687b      	ldr	r3, [r7, #4]
    }
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000204 	.word	0x20000204
 80032d8:	20000208 	.word	0x20000208
 80032dc:	08003f30 	.word	0x08003f30
 80032e0:	08003389 	.word	0x08003389

080032e4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80032f0:	e008      	b.n	8003304 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	4413      	add	r3, r2
 80032fa:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	699a      	ldr	r2, [r3, #24]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	18d1      	adds	r1, r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f8db 	bl	80034cc <prvInsertTimerInActiveList>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1ea      	bne.n	80032f2 <prvReloadTimer+0xe>
        }
    }
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003332:	4b14      	ldr	r3, [pc, #80]	; (8003384 <prvProcessExpiredTimer+0x5c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3304      	adds	r3, #4
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe fb32 	bl	80019aa <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f7ff ffc3 	bl	80032e4 <prvReloadTimer>
 800335e:	e008      	b.n	8003372 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003366:	f023 0301 	bic.w	r3, r3, #1
 800336a:	b2da      	uxtb	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	4798      	blx	r3
    }
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	200001fc 	.word	0x200001fc

08003388 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003390:	f107 0308 	add.w	r3, r7, #8
 8003394:	4618      	mov	r0, r3
 8003396:	f000 f857 	bl	8003448 <prvGetNextExpireTime>
 800339a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4619      	mov	r1, r3
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f803 	bl	80033ac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80033a6:	f000 f8d3 	bl	8003550 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80033aa:	e7f1      	b.n	8003390 <prvTimerTask+0x8>

080033ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80033b6:	f7ff f8ef 	bl	8002598 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80033ba:	f107 0308 	add.w	r3, r7, #8
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f864 	bl	800348c <prvSampleTimeNow>
 80033c4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d130      	bne.n	800342e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <prvProcessTimerOrBlockTask+0x3c>
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d806      	bhi.n	80033e8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80033da:	f7ff f8eb 	bl	80025b4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80033de:	68f9      	ldr	r1, [r7, #12]
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ffa1 	bl	8003328 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80033e6:	e024      	b.n	8003432 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d008      	beq.n	8003400 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <prvProcessTimerOrBlockTask+0x90>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <prvProcessTimerOrBlockTask+0x50>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <prvProcessTimerOrBlockTask+0x52>
 80033fc:	2300      	movs	r3, #0
 80033fe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <prvProcessTimerOrBlockTask+0x94>)
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	4619      	mov	r1, r3
 800340e:	f7fe fdb3 	bl	8001f78 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003412:	f7ff f8cf 	bl	80025b4 <xTaskResumeAll>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <prvProcessTimerOrBlockTask+0x98>)
 800341e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	f3bf 8f6f 	isb	sy
    }
 800342c:	e001      	b.n	8003432 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800342e:	f7ff f8c1 	bl	80025b4 <xTaskResumeAll>
    }
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000200 	.word	0x20000200
 8003440:	20000204 	.word	0x20000204
 8003444:	e000ed04 	.word	0xe000ed04

08003448 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <prvGetNextExpireTime+0x40>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <prvGetNextExpireTime+0x16>
 800345a:	2201      	movs	r2, #1
 800345c:	e000      	b.n	8003460 <prvGetNextExpireTime+0x18>
 800345e:	2200      	movs	r2, #0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <prvGetNextExpireTime+0x40>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	e001      	b.n	800347c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800347c:	68fb      	ldr	r3, [r7, #12]
    }
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	200001fc 	.word	0x200001fc

0800348c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003494:	f7ff f98a 	bl	80027ac <xTaskGetTickCount>
 8003498:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800349a:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <prvSampleTimeNow+0x3c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d205      	bcs.n	80034b0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80034a4:	f000 f912 	bl	80036cc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e002      	b.n	80034b6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <prvSampleTimeNow+0x3c>)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80034bc:	68fb      	ldr	r3, [r7, #12]
    }
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	2000020c 	.word	0x2000020c

080034cc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d812      	bhi.n	8003518 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	1ad2      	subs	r2, r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d302      	bcc.n	8003506 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003500:	2301      	movs	r3, #1
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e01b      	b.n	800353e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <prvInsertTimerInActiveList+0x7c>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3304      	adds	r3, #4
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f7fe fa12 	bl	800193a <vListInsert>
 8003516:	e012      	b.n	800353e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d206      	bcs.n	800352e <prvInsertTimerInActiveList+0x62>
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d302      	bcc.n	800352e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003528:	2301      	movs	r3, #1
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	e007      	b.n	800353e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800352e:	4b07      	ldr	r3, [pc, #28]	; (800354c <prvInsertTimerInActiveList+0x80>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3304      	adds	r3, #4
 8003536:	4619      	mov	r1, r3
 8003538:	4610      	mov	r0, r2
 800353a:	f7fe f9fe 	bl	800193a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800353e:	697b      	ldr	r3, [r7, #20]
    }
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000200 	.word	0x20000200
 800354c:	200001fc 	.word	0x200001fc

08003550 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003556:	e0a6      	b.n	80036a6 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f2c0 80a3 	blt.w	80036a6 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d004      	beq.n	8003576 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	3304      	adds	r3, #4
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe fa1a 	bl	80019aa <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ff87 	bl	800348c <prvSampleTimeNow>
 800357e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	3b01      	subs	r3, #1
 8003584:	2b08      	cmp	r3, #8
 8003586:	f200 808d 	bhi.w	80036a4 <prvProcessReceivedCommands+0x154>
 800358a:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <prvProcessReceivedCommands+0x40>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035b5 	.word	0x080035b5
 8003594:	080035b5 	.word	0x080035b5
 8003598:	0800361d 	.word	0x0800361d
 800359c:	08003631 	.word	0x08003631
 80035a0:	0800367b 	.word	0x0800367b
 80035a4:	080035b5 	.word	0x080035b5
 80035a8:	080035b5 	.word	0x080035b5
 80035ac:	0800361d 	.word	0x0800361d
 80035b0:	08003631 	.word	0x08003631
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	18d1      	adds	r1, r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	69f8      	ldr	r0, [r7, #28]
 80035d4:	f7ff ff7a 	bl	80034cc <prvInsertTimerInActiveList>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d063      	beq.n	80036a6 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d009      	beq.n	8003600 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	4413      	add	r3, r2
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4619      	mov	r1, r3
 80035f8:	69f8      	ldr	r0, [r7, #28]
 80035fa:	f7ff fe73 	bl	80032e4 <prvReloadTimer>
 80035fe:	e008      	b.n	8003612 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	b2da      	uxtb	r2, r3
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	69f8      	ldr	r0, [r7, #28]
 8003618:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800361a:	e044      	b.n	80036a6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	b2da      	uxtb	r2, r3
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800362e:	e03a      	b.n	80036a6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	b2da      	uxtb	r2, r3
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	617b      	str	r3, [r7, #20]
    }
 8003662:	bf00      	nop
 8003664:	e7fe      	b.n	8003664 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	18d1      	adds	r1, r2, r3
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	69f8      	ldr	r0, [r7, #28]
 8003674:	f7ff ff2a 	bl	80034cc <prvInsertTimerInActiveList>
                        break;
 8003678:	e015      	b.n	80036a6 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d103      	bne.n	8003690 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003688:	69f8      	ldr	r0, [r7, #28]
 800368a:	f000 faeb 	bl	8003c64 <vPortFree>
 800368e:	e00a      	b.n	80036a6 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	b2da      	uxtb	r2, r3
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80036a2:	e000      	b.n	80036a6 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 80036a4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80036a6:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <prvProcessReceivedCommands+0x178>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f107 0108 	add.w	r1, r7, #8
 80036ae:	2200      	movs	r2, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fe faa5 	bl	8001c00 <xQueueReceive>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f47f af4d 	bne.w	8003558 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80036be:	bf00      	nop
 80036c0:	bf00      	nop
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20000204 	.word	0x20000204

080036cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80036d2:	e009      	b.n	80036e8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036d4:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <prvSwitchTimerLists+0x44>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80036de:	f04f 31ff 	mov.w	r1, #4294967295
 80036e2:	6838      	ldr	r0, [r7, #0]
 80036e4:	f7ff fe20 	bl	8003328 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80036e8:	4b09      	ldr	r3, [pc, #36]	; (8003710 <prvSwitchTimerLists+0x44>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80036f2:	4b07      	ldr	r3, [pc, #28]	; (8003710 <prvSwitchTimerLists+0x44>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <prvSwitchTimerLists+0x48>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a04      	ldr	r2, [pc, #16]	; (8003710 <prvSwitchTimerLists+0x44>)
 80036fe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003700:	4a04      	ldr	r2, [pc, #16]	; (8003714 <prvSwitchTimerLists+0x48>)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6013      	str	r3, [r2, #0]
    }
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	200001fc 	.word	0x200001fc
 8003714:	20000200 	.word	0x20000200

08003718 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800371c:	f000 f928 	bl	8003970 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003720:	4b12      	ldr	r3, [pc, #72]	; (800376c <prvCheckForValidListAndQueue+0x54>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d11d      	bne.n	8003764 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003728:	4811      	ldr	r0, [pc, #68]	; (8003770 <prvCheckForValidListAndQueue+0x58>)
 800372a:	f7fe f8db 	bl	80018e4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800372e:	4811      	ldr	r0, [pc, #68]	; (8003774 <prvCheckForValidListAndQueue+0x5c>)
 8003730:	f7fe f8d8 	bl	80018e4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003734:	4b10      	ldr	r3, [pc, #64]	; (8003778 <prvCheckForValidListAndQueue+0x60>)
 8003736:	4a0e      	ldr	r2, [pc, #56]	; (8003770 <prvCheckForValidListAndQueue+0x58>)
 8003738:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <prvCheckForValidListAndQueue+0x64>)
 800373c:	4a0d      	ldr	r2, [pc, #52]	; (8003774 <prvCheckForValidListAndQueue+0x5c>)
 800373e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003740:	2200      	movs	r2, #0
 8003742:	210c      	movs	r1, #12
 8003744:	200a      	movs	r0, #10
 8003746:	f7fe f9e9 	bl	8001b1c <xQueueGenericCreate>
 800374a:	4603      	mov	r3, r0
 800374c:	4a07      	ldr	r2, [pc, #28]	; (800376c <prvCheckForValidListAndQueue+0x54>)
 800374e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <prvCheckForValidListAndQueue+0x54>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003758:	4b04      	ldr	r3, [pc, #16]	; (800376c <prvCheckForValidListAndQueue+0x54>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4908      	ldr	r1, [pc, #32]	; (8003780 <prvCheckForValidListAndQueue+0x68>)
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fbbc 	bl	8001edc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003764:	f000 f934 	bl	80039d0 <vPortExitCritical>
    }
 8003768:	bf00      	nop
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000204 	.word	0x20000204
 8003770:	200001d4 	.word	0x200001d4
 8003774:	200001e8 	.word	0x200001e8
 8003778:	200001fc 	.word	0x200001fc
 800377c:	20000200 	.word	0x20000200
 8003780:	08003f38 	.word	0x08003f38

08003784 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3b04      	subs	r3, #4
 8003794:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800379c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3b04      	subs	r3, #4
 80037a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f023 0201 	bic.w	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3b04      	subs	r3, #4
 80037b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80037b4:	4a08      	ldr	r2, [pc, #32]	; (80037d8 <pxPortInitialiseStack+0x54>)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3b14      	subs	r3, #20
 80037be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3b20      	subs	r3, #32
 80037ca:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80037cc:	68fb      	ldr	r3, [r7, #12]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	080037dd 	.word	0x080037dd

080037dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80037e6:	4b12      	ldr	r3, [pc, #72]	; (8003830 <prvTaskExitError+0x54>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ee:	d00a      	beq.n	8003806 <prvTaskExitError+0x2a>
        __asm volatile
 80037f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	60fb      	str	r3, [r7, #12]
    }
 8003802:	bf00      	nop
 8003804:	e7fe      	b.n	8003804 <prvTaskExitError+0x28>
        __asm volatile
 8003806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	60bb      	str	r3, [r7, #8]
    }
 8003818:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800381a:	bf00      	nop
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0fc      	beq.n	800381c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003822:	bf00      	nop
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	20000010 	.word	0x20000010
	...

08003840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <pxCurrentTCBConst2>)
 8003842:	6819      	ldr	r1, [r3, #0]
 8003844:	6808      	ldr	r0, [r1, #0]
 8003846:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800384a:	f380 8809 	msr	PSP, r0
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f04f 0000 	mov.w	r0, #0
 8003856:	f380 8811 	msr	BASEPRI, r0
 800385a:	f04e 0e0d 	orr.w	lr, lr, #13
 800385e:	4770      	bx	lr

08003860 <pxCurrentTCBConst2>:
 8003860:	200000d0 	.word	0x200000d0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003864:	bf00      	nop
 8003866:	bf00      	nop

08003868 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8003868:	4806      	ldr	r0, [pc, #24]	; (8003884 <prvPortStartFirstTask+0x1c>)
 800386a:	6800      	ldr	r0, [r0, #0]
 800386c:	6800      	ldr	r0, [r0, #0]
 800386e:	f380 8808 	msr	MSP, r0
 8003872:	b662      	cpsie	i
 8003874:	b661      	cpsie	f
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	df00      	svc	0
 8003880:	bf00      	nop
 8003882:	0000      	.short	0x0000
 8003884:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop

0800388c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003892:	4b32      	ldr	r3, [pc, #200]	; (800395c <xPortStartScheduler+0xd0>)
 8003894:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	22ff      	movs	r2, #255	; 0xff
 80038a2:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <xPortStartScheduler+0xd4>)
 80038b8:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80038ba:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <xPortStartScheduler+0xd8>)
 80038bc:	2207      	movs	r2, #7
 80038be:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038c0:	e009      	b.n	80038d6 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 80038c2:	4b28      	ldr	r3, [pc, #160]	; (8003964 <xPortStartScheduler+0xd8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	4a26      	ldr	r2, [pc, #152]	; (8003964 <xPortStartScheduler+0xd8>)
 80038ca:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80038cc:	78fb      	ldrb	r3, [r7, #3]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	2b80      	cmp	r3, #128	; 0x80
 80038e0:	d0ef      	beq.n	80038c2 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80038e2:	4b20      	ldr	r3, [pc, #128]	; (8003964 <xPortStartScheduler+0xd8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f1c3 0307 	rsb	r3, r3, #7
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d00a      	beq.n	8003904 <xPortStartScheduler+0x78>
        __asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	60bb      	str	r3, [r7, #8]
    }
 8003900:	bf00      	nop
 8003902:	e7fe      	b.n	8003902 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003904:	4b17      	ldr	r3, [pc, #92]	; (8003964 <xPortStartScheduler+0xd8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	4a16      	ldr	r2, [pc, #88]	; (8003964 <xPortStartScheduler+0xd8>)
 800390c:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800390e:	4b15      	ldr	r3, [pc, #84]	; (8003964 <xPortStartScheduler+0xd8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003916:	4a13      	ldr	r2, [pc, #76]	; (8003964 <xPortStartScheduler+0xd8>)
 8003918:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003922:	4b11      	ldr	r3, [pc, #68]	; (8003968 <xPortStartScheduler+0xdc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a10      	ldr	r2, [pc, #64]	; (8003968 <xPortStartScheduler+0xdc>)
 8003928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800392c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800392e:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <xPortStartScheduler+0xdc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a0d      	ldr	r2, [pc, #52]	; (8003968 <xPortStartScheduler+0xdc>)
 8003934:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003938:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800393a:	f000 f8b7 	bl	8003aac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800393e:	4b0b      	ldr	r3, [pc, #44]	; (800396c <xPortStartScheduler+0xe0>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003944:	f7ff ff90 	bl	8003868 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003948:	f7ff f928 	bl	8002b9c <vTaskSwitchContext>
    prvTaskExitError();
 800394c:	f7ff ff46 	bl	80037dc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	e000e400 	.word	0xe000e400
 8003960:	20000210 	.word	0x20000210
 8003964:	20000214 	.word	0x20000214
 8003968:	e000ed20 	.word	0xe000ed20
 800396c:	20000010 	.word	0x20000010

08003970 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
        __asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	607b      	str	r3, [r7, #4]
    }
 8003988:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800398a:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <vPortEnterCritical+0x58>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3301      	adds	r3, #1
 8003990:	4a0d      	ldr	r2, [pc, #52]	; (80039c8 <vPortEnterCritical+0x58>)
 8003992:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <vPortEnterCritical+0x58>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d10f      	bne.n	80039bc <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <vPortEnterCritical+0x5c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <vPortEnterCritical+0x4c>
        __asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	603b      	str	r3, [r7, #0]
    }
 80039b8:	bf00      	nop
 80039ba:	e7fe      	b.n	80039ba <vPortEnterCritical+0x4a>
    }
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000010 	.word	0x20000010
 80039cc:	e000ed04 	.word	0xe000ed04

080039d0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80039d6:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <vPortExitCritical+0x4c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <vPortExitCritical+0x24>
        __asm volatile
 80039de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	607b      	str	r3, [r7, #4]
    }
 80039f0:	bf00      	nop
 80039f2:	e7fe      	b.n	80039f2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80039f4:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <vPortExitCritical+0x4c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	4a08      	ldr	r2, [pc, #32]	; (8003a1c <vPortExitCritical+0x4c>)
 80039fc:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80039fe:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <vPortExitCritical+0x4c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d105      	bne.n	8003a12 <vPortExitCritical+0x42>
 8003a06:	2300      	movs	r3, #0
 8003a08:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003a10:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	20000010 	.word	0x20000010

08003a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003a20:	f3ef 8009 	mrs	r0, PSP
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <pxCurrentTCBConst>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a30:	6010      	str	r0, [r2, #0]
 8003a32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003a36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a3a:	f380 8811 	msr	BASEPRI, r0
 8003a3e:	f7ff f8ad 	bl	8002b9c <vTaskSwitchContext>
 8003a42:	f04f 0000 	mov.w	r0, #0
 8003a46:	f380 8811 	msr	BASEPRI, r0
 8003a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003a4e:	6819      	ldr	r1, [r3, #0]
 8003a50:	6808      	ldr	r0, [r1, #0]
 8003a52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a56:	f380 8809 	msr	PSP, r0
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	4770      	bx	lr

08003a60 <pxCurrentTCBConst>:
 8003a60:	200000d0 	.word	0x200000d0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop

08003a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
        __asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	607b      	str	r3, [r7, #4]
    }
 8003a80:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003a82:	f7fe ff75 	bl	8002970 <xTaskIncrementTick>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <SysTick_Handler+0x40>)
 8003a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	2300      	movs	r3, #0
 8003a96:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f383 8811 	msr	BASEPRI, r3
    }
 8003a9e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	e000ed04 	.word	0xe000ed04

08003aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <vPortSetupTimerInterrupt+0x30>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <vPortSetupTimerInterrupt+0x34>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003abc:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <vPortSetupTimerInterrupt+0x38>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a09      	ldr	r2, [pc, #36]	; (8003ae8 <vPortSetupTimerInterrupt+0x3c>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	099b      	lsrs	r3, r3, #6
 8003ac8:	4a08      	ldr	r2, [pc, #32]	; (8003aec <vPortSetupTimerInterrupt+0x40>)
 8003aca:	3b01      	subs	r3, #1
 8003acc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ace:	4b03      	ldr	r3, [pc, #12]	; (8003adc <vPortSetupTimerInterrupt+0x30>)
 8003ad0:	2207      	movs	r2, #7
 8003ad2:	601a      	str	r2, [r3, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr
 8003adc:	e000e010 	.word	0xe000e010
 8003ae0:	e000e018 	.word	0xe000e018
 8003ae4:	20000000 	.word	0x20000000
 8003ae8:	10624dd3 	.word	0x10624dd3
 8003aec:	e000e014 	.word	0xe000e014

08003af0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	; 0x28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003afc:	f7fe fd4c 	bl	8002598 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003b00:	4b53      	ldr	r3, [pc, #332]	; (8003c50 <pvPortMalloc+0x160>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003b08:	f000 f908 	bl	8003d1c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d012      	beq.n	8003b38 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003b12:	2208      	movs	r2, #8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	43db      	mvns	r3, r3
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d804      	bhi.n	8003b34 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	4413      	add	r3, r2
 8003b30:	607b      	str	r3, [r7, #4]
 8003b32:	e001      	b.n	8003b38 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	db70      	blt.n	8003c20 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d06d      	beq.n	8003c20 <pvPortMalloc+0x130>
 8003b44:	4b43      	ldr	r3, [pc, #268]	; (8003c54 <pvPortMalloc+0x164>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d868      	bhi.n	8003c20 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003b4e:	4b42      	ldr	r3, [pc, #264]	; (8003c58 <pvPortMalloc+0x168>)
 8003b50:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003b52:	4b41      	ldr	r3, [pc, #260]	; (8003c58 <pvPortMalloc+0x168>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b58:	e004      	b.n	8003b64 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d903      	bls.n	8003b76 <pvPortMalloc+0x86>
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f1      	bne.n	8003b5a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003b76:	4b36      	ldr	r3, [pc, #216]	; (8003c50 <pvPortMalloc+0x160>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d04f      	beq.n	8003c20 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2208      	movs	r2, #8
 8003b86:	4413      	add	r3, r2
 8003b88:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	1ad2      	subs	r2, r2, r3
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d91f      	bls.n	8003be2 <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <pvPortMalloc+0xda>
        __asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	613b      	str	r3, [r7, #16]
    }
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	1ad2      	subs	r2, r2, r3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003bdc:	6978      	ldr	r0, [r7, #20]
 8003bde:	f000 f8f9 	bl	8003dd4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003be2:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <pvPortMalloc+0x164>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	4a19      	ldr	r2, [pc, #100]	; (8003c54 <pvPortMalloc+0x164>)
 8003bee:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003bf0:	4b18      	ldr	r3, [pc, #96]	; (8003c54 <pvPortMalloc+0x164>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <pvPortMalloc+0x16c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d203      	bcs.n	8003c04 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003bfc:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <pvPortMalloc+0x164>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a16      	ldr	r2, [pc, #88]	; (8003c5c <pvPortMalloc+0x16c>)
 8003c02:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003c16:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <pvPortMalloc+0x170>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	4a10      	ldr	r2, [pc, #64]	; (8003c60 <pvPortMalloc+0x170>)
 8003c1e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003c20:	f7fe fcc8 	bl	80025b4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <pvPortMalloc+0x154>
        __asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	60fb      	str	r3, [r7, #12]
    }
 8003c40:	bf00      	nop
 8003c42:	e7fe      	b.n	8003c42 <pvPortMalloc+0x152>
    return pvReturn;
 8003c44:	69fb      	ldr	r3, [r7, #28]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3728      	adds	r7, #40	; 0x28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20002a20 	.word	0x20002a20
 8003c54:	20002a24 	.word	0x20002a24
 8003c58:	20002a18 	.word	0x20002a18
 8003c5c:	20002a28 	.word	0x20002a28
 8003c60:	20002a2c 	.word	0x20002a2c

08003c64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d049      	beq.n	8003d0a <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003c76:	2308      	movs	r3, #8
 8003c78:	425b      	negs	r3, r3
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	db0a      	blt.n	8003ca2 <vPortFree+0x3e>
        __asm volatile
 8003c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	60fb      	str	r3, [r7, #12]
    }
 8003c9e:	bf00      	nop
 8003ca0:	e7fe      	b.n	8003ca0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <vPortFree+0x5c>
        __asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	60bb      	str	r3, [r7, #8]
    }
 8003cbc:	bf00      	nop
 8003cbe:	e7fe      	b.n	8003cbe <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	0fdb      	lsrs	r3, r3, #31
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01c      	beq.n	8003d0a <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d118      	bne.n	8003d0a <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003ce4:	f7fe fc58 	bl	8002598 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <vPortFree+0xb0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	4a08      	ldr	r2, [pc, #32]	; (8003d14 <vPortFree+0xb0>)
 8003cf4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003cf6:	6938      	ldr	r0, [r7, #16]
 8003cf8:	f000 f86c 	bl	8003dd4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <vPortFree+0xb4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3301      	adds	r3, #1
 8003d02:	4a05      	ldr	r2, [pc, #20]	; (8003d18 <vPortFree+0xb4>)
 8003d04:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003d06:	f7fe fc55 	bl	80025b4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003d0a:	bf00      	nop
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20002a24 	.word	0x20002a24
 8003d18:	20002a30 	.word	0x20002a30

08003d1c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d22:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003d26:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003d28:	4b25      	ldr	r3, [pc, #148]	; (8003dc0 <prvHeapInit+0xa4>)
 8003d2a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00c      	beq.n	8003d50 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3307      	adds	r3, #7
 8003d3a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0307 	bic.w	r3, r3, #7
 8003d42:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	4a1d      	ldr	r2, [pc, #116]	; (8003dc0 <prvHeapInit+0xa4>)
 8003d4c:	4413      	add	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d54:	4a1b      	ldr	r2, [pc, #108]	; (8003dc4 <prvHeapInit+0xa8>)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003d5a:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <prvHeapInit+0xa8>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	4413      	add	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003d68:	2208      	movs	r2, #8
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0307 	bic.w	r3, r3, #7
 8003d76:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4a13      	ldr	r2, [pc, #76]	; (8003dc8 <prvHeapInit+0xac>)
 8003d7c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <prvHeapInit+0xac>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <prvHeapInit+0xac>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	1ad2      	subs	r2, r2, r3
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <prvHeapInit+0xac>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <prvHeapInit+0xb0>)
 8003daa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4a07      	ldr	r2, [pc, #28]	; (8003dd0 <prvHeapInit+0xb4>)
 8003db2:	6013      	str	r3, [r2, #0]
}
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20000218 	.word	0x20000218
 8003dc4:	20002a18 	.word	0x20002a18
 8003dc8:	20002a20 	.word	0x20002a20
 8003dcc:	20002a28 	.word	0x20002a28
 8003dd0:	20002a24 	.word	0x20002a24

08003dd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ddc:	4b27      	ldr	r3, [pc, #156]	; (8003e7c <prvInsertBlockIntoFreeList+0xa8>)
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e002      	b.n	8003de8 <prvInsertBlockIntoFreeList+0x14>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d8f7      	bhi.n	8003de2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d108      	bne.n	8003e16 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	441a      	add	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	441a      	add	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d118      	bne.n	8003e5c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <prvInsertBlockIntoFreeList+0xac>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d00d      	beq.n	8003e52 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	441a      	add	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	e008      	b.n	8003e64 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e52:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <prvInsertBlockIntoFreeList+0xac>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e003      	b.n	8003e64 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d002      	beq.n	8003e72 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr
 8003e7c:	20002a18 	.word	0x20002a18
 8003e80:	20002a20 	.word	0x20002a20

08003e84 <memset>:
 8003e84:	4603      	mov	r3, r0
 8003e86:	4402      	add	r2, r0
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d100      	bne.n	8003e8e <memset+0xa>
 8003e8c:	4770      	bx	lr
 8003e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e92:	e7f9      	b.n	8003e88 <memset+0x4>

08003e94 <__libc_init_array>:
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	2600      	movs	r6, #0
 8003e98:	4d0c      	ldr	r5, [pc, #48]	; (8003ecc <__libc_init_array+0x38>)
 8003e9a:	4c0d      	ldr	r4, [pc, #52]	; (8003ed0 <__libc_init_array+0x3c>)
 8003e9c:	1b64      	subs	r4, r4, r5
 8003e9e:	10a4      	asrs	r4, r4, #2
 8003ea0:	42a6      	cmp	r6, r4
 8003ea2:	d109      	bne.n	8003eb8 <__libc_init_array+0x24>
 8003ea4:	f000 f828 	bl	8003ef8 <_init>
 8003ea8:	2600      	movs	r6, #0
 8003eaa:	4d0a      	ldr	r5, [pc, #40]	; (8003ed4 <__libc_init_array+0x40>)
 8003eac:	4c0a      	ldr	r4, [pc, #40]	; (8003ed8 <__libc_init_array+0x44>)
 8003eae:	1b64      	subs	r4, r4, r5
 8003eb0:	10a4      	asrs	r4, r4, #2
 8003eb2:	42a6      	cmp	r6, r4
 8003eb4:	d105      	bne.n	8003ec2 <__libc_init_array+0x2e>
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
 8003eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ebc:	4798      	blx	r3
 8003ebe:	3601      	adds	r6, #1
 8003ec0:	e7ee      	b.n	8003ea0 <__libc_init_array+0xc>
 8003ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec6:	4798      	blx	r3
 8003ec8:	3601      	adds	r6, #1
 8003eca:	e7f2      	b.n	8003eb2 <__libc_init_array+0x1e>
 8003ecc:	08003f6c 	.word	0x08003f6c
 8003ed0:	08003f6c 	.word	0x08003f6c
 8003ed4:	08003f6c 	.word	0x08003f6c
 8003ed8:	08003f70 	.word	0x08003f70

08003edc <memcpy>:
 8003edc:	440a      	add	r2, r1
 8003ede:	4291      	cmp	r1, r2
 8003ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ee4:	d100      	bne.n	8003ee8 <memcpy+0xc>
 8003ee6:	4770      	bx	lr
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eee:	4291      	cmp	r1, r2
 8003ef0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ef4:	d1f9      	bne.n	8003eea <memcpy+0xe>
 8003ef6:	bd10      	pop	{r4, pc}

08003ef8 <_init>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr

08003f04 <_fini>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	bf00      	nop
 8003f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0a:	bc08      	pop	{r3}
 8003f0c:	469e      	mov	lr, r3
 8003f0e:	4770      	bx	lr
