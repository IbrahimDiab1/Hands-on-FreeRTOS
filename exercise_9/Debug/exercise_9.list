
exercise_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004800  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004990  08004990  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004990  08004990  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004990  08004990  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e5c  20000014  080049ac  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003e70  080049ac  00023e70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000108d4  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002840  00000000  00000000  00030954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00008ec8  00000000  00000000  00033194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ff8  00000000  00000000  0003c060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000ed0  00000000  00000000  0003d058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018d8b  00000000  00000000  0003df28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011939  00000000  00000000  00056cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000928ae  00000000  00000000  000685ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004248  00000000  00000000  000fae9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	080048f8 	.word	0x080048f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	080048f8 	.word	0x080048f8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <Task_1_Handler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Task_1_Handler(void * parameters)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	char * msg1= "hello from task 1\n";
 8000168:	4b14      	ldr	r3, [pc, #80]	; (80001bc <Task_1_Handler+0x5c>)
 800016a:	60fb      	str	r3, [r7, #12]

	 xSemaphoreGive( xSemaphore );
 800016c:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <Task_1_Handler+0x60>)
 800016e:	6818      	ldr	r0, [r3, #0]
 8000170:	2300      	movs	r3, #0
 8000172:	2200      	movs	r2, #0
 8000174:	2100      	movs	r1, #0
 8000176:	f001 ff63 	bl	8002040 <xQueueGenericSend>

	while(1)
	{
		if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE)
 800017a:	4b11      	ldr	r3, [pc, #68]	; (80001c0 <Task_1_Handler+0x60>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	f04f 31ff 	mov.w	r1, #4294967295
 8000182:	4618      	mov	r0, r3
 8000184:	f002 f93a 	bl	80023fc <xQueueSemaphoreTake>
 8000188:	4603      	mov	r3, r0
 800018a:	2b01      	cmp	r3, #1
 800018c:	d111      	bne.n	80001b2 <Task_1_Handler+0x52>
		{

			HAL_USART_Transmit(&husart1, msg1, strlen(msg1), 10000);
 800018e:	68f8      	ldr	r0, [r7, #12]
 8000190:	f7ff ffde 	bl	8000150 <strlen>
 8000194:	4603      	mov	r3, r0
 8000196:	b29a      	uxth	r2, r3
 8000198:	f242 7310 	movw	r3, #10000	; 0x2710
 800019c:	68f9      	ldr	r1, [r7, #12]
 800019e:	4809      	ldr	r0, [pc, #36]	; (80001c4 <Task_1_Handler+0x64>)
 80001a0:	f001 fbaf 	bl	8001902 <HAL_USART_Transmit>
			xSemaphoreGive( xSemaphore );
 80001a4:	4b06      	ldr	r3, [pc, #24]	; (80001c0 <Task_1_Handler+0x60>)
 80001a6:	6818      	ldr	r0, [r3, #0]
 80001a8:	2300      	movs	r3, #0
 80001aa:	2200      	movs	r2, #0
 80001ac:	2100      	movs	r1, #0
 80001ae:	f001 ff47 	bl	8002040 <xQueueGenericSend>
		}
		vTaskDelay(pdMS_TO_TICKS(1000));
 80001b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b6:	f002 fd33 	bl	8002c20 <vTaskDelay>
		if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE)
 80001ba:	e7de      	b.n	800017a <Task_1_Handler+0x1a>
 80001bc:	08004910 	.word	0x08004910
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	20000030 	.word	0x20000030

080001c8 <Task_2_Handler>:
	}
}

void Task_2_Handler(void * parameters)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	char * msg2= "hello from task 2\n";
 80001d0:	4b11      	ldr	r3, [pc, #68]	; (8000218 <Task_2_Handler+0x50>)
 80001d2:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE)
 80001d4:	4b11      	ldr	r3, [pc, #68]	; (800021c <Task_2_Handler+0x54>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	f04f 31ff 	mov.w	r1, #4294967295
 80001dc:	4618      	mov	r0, r3
 80001de:	f002 f90d 	bl	80023fc <xQueueSemaphoreTake>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d111      	bne.n	800020c <Task_2_Handler+0x44>
		{
			HAL_USART_Transmit(&husart1, msg2, strlen(msg2), 10000);
 80001e8:	68f8      	ldr	r0, [r7, #12]
 80001ea:	f7ff ffb1 	bl	8000150 <strlen>
 80001ee:	4603      	mov	r3, r0
 80001f0:	b29a      	uxth	r2, r3
 80001f2:	f242 7310 	movw	r3, #10000	; 0x2710
 80001f6:	68f9      	ldr	r1, [r7, #12]
 80001f8:	4809      	ldr	r0, [pc, #36]	; (8000220 <Task_2_Handler+0x58>)
 80001fa:	f001 fb82 	bl	8001902 <HAL_USART_Transmit>
			xSemaphoreGive( xSemaphore );
 80001fe:	4b07      	ldr	r3, [pc, #28]	; (800021c <Task_2_Handler+0x54>)
 8000200:	6818      	ldr	r0, [r3, #0]
 8000202:	2300      	movs	r3, #0
 8000204:	2200      	movs	r2, #0
 8000206:	2100      	movs	r1, #0
 8000208:	f001 ff1a 	bl	8002040 <xQueueGenericSend>
		}
		vTaskDelay(pdMS_TO_TICKS(1000));
 800020c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000210:	f002 fd06 	bl	8002c20 <vTaskDelay>
		if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE)
 8000214:	e7de      	b.n	80001d4 <Task_2_Handler+0xc>
 8000216:	bf00      	nop
 8000218:	08004924 	.word	0x08004924
 800021c:	2000007c 	.word	0x2000007c
 8000220:	20000030 	.word	0x20000030

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	xSemaphore = xSemaphoreCreateMutex();
 800022a:	2001      	movs	r0, #1
 800022c:	f001 feef 	bl	800200e <xQueueCreateMutex>
 8000230:	4603      	mov	r3, r0
 8000232:	4a10      	ldr	r2, [pc, #64]	; (8000274 <main+0x50>)
 8000234:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000236:	f000 fa03 	bl	8000640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023a:	f000 f829 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023e:	f000 f88f 	bl	8000360 <MX_GPIO_Init>
  MX_USART1_Init();
 8000242:	f000 f861 	bl	8000308 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate( Task_1_Handler, "manager" , 150, NULL, 2, &Task_1_handle );
 8000246:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <main+0x54>)
 8000248:	9301      	str	r3, [sp, #4]
 800024a:	2302      	movs	r3, #2
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	2300      	movs	r3, #0
 8000250:	2296      	movs	r2, #150	; 0x96
 8000252:	490a      	ldr	r1, [pc, #40]	; (800027c <main+0x58>)
 8000254:	480a      	ldr	r0, [pc, #40]	; (8000280 <main+0x5c>)
 8000256:	f002 fb79 	bl	800294c <xTaskCreate>
  xTaskCreate( Task_2_Handler, "employer", 150, NULL, 1, &Task_2_handle );
 800025a:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <main+0x60>)
 800025c:	9301      	str	r3, [sp, #4]
 800025e:	2301      	movs	r3, #1
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	2296      	movs	r2, #150	; 0x96
 8000266:	4908      	ldr	r1, [pc, #32]	; (8000288 <main+0x64>)
 8000268:	4808      	ldr	r0, [pc, #32]	; (800028c <main+0x68>)
 800026a:	f002 fb6f 	bl	800294c <xTaskCreate>

  vTaskStartScheduler();
 800026e:	f002 fd0b 	bl	8002c88 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000272:	e7fe      	b.n	8000272 <main+0x4e>
 8000274:	2000007c 	.word	0x2000007c
 8000278:	20000074 	.word	0x20000074
 800027c:	08004938 	.word	0x08004938
 8000280:	08000161 	.word	0x08000161
 8000284:	20000078 	.word	0x20000078
 8000288:	08004940 	.word	0x08004940
 800028c:	080001c9 	.word	0x080001c9

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b090      	sub	sp, #64	; 0x40
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0318 	add.w	r3, r7, #24
 800029a:	2228      	movs	r2, #40	; 0x28
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f004 faf0 	bl	8004884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b2:	2302      	movs	r3, #2
 80002b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b6:	2301      	movs	r3, #1
 80002b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ba:	2310      	movs	r3, #16
 80002bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002be:	2300      	movs	r3, #0
 80002c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fc50 	bl	8000b6c <HAL_RCC_OscConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002d2:	f000 f86a 	bl	80003aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d6:	230f      	movs	r3, #15
 80002d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002da:	2300      	movs	r3, #0
 80002dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 febe 	bl	8001070 <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002fa:	f000 f856 	bl	80003aa <Error_Handler>
  }
}
 80002fe:	bf00      	nop
 8000300:	3740      	adds	r7, #64	; 0x40
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_USART1_Init+0x50>)
 800030e:	4a13      	ldr	r2, [pc, #76]	; (800035c <MX_USART1_Init+0x54>)
 8000310:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_USART1_Init+0x50>)
 8000314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000318:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800031a:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_USART1_Init+0x50>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <MX_USART1_Init+0x50>)
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000326:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_USART1_Init+0x50>)
 8000328:	2200      	movs	r2, #0
 800032a:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <MX_USART1_Init+0x50>)
 800032e:	220c      	movs	r2, #12
 8000330:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_USART1_Init+0x50>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <MX_USART1_Init+0x50>)
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_USART1_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <MX_USART1_Init+0x50>)
 8000346:	f001 fa9b 	bl	8001880 <HAL_USART_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000350:	f000 f82b 	bl	80003aa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000030 	.word	0x20000030
 800035c:	40013800 	.word	0x40013800

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <MX_GPIO_Init+0x28>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a07      	ldr	r2, [pc, #28]	; (8000388 <MX_GPIO_Init+0x28>)
 800036c:	f043 0304 	orr.w	r3, r3, #4
 8000370:	6193      	str	r3, [r2, #24]
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <MX_GPIO_Init+0x28>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	f003 0304 	and.w	r3, r3, #4
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000

0800038c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800039c:	d101      	bne.n	80003a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800039e:	f000 f965 	bl	800066c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ae:	b672      	cpsid	i
}
 80003b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b2:	e7fe      	b.n	80003b2 <Error_Handler+0x8>

080003b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <HAL_MspInit+0x5c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a14      	ldr	r2, [pc, #80]	; (8000410 <HAL_MspInit+0x5c>)
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6193      	str	r3, [r2, #24]
 80003c6:	4b12      	ldr	r3, [pc, #72]	; (8000410 <HAL_MspInit+0x5c>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <HAL_MspInit+0x5c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <HAL_MspInit+0x5c>)
 80003d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003dc:	61d3      	str	r3, [r2, #28]
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <HAL_MspInit+0x5c>)
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <HAL_MspInit+0x60>)
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	4a04      	ldr	r2, [pc, #16]	; (8000414 <HAL_MspInit+0x60>)
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40021000 	.word	0x40021000
 8000414:	40010000 	.word	0x40010000

08000418 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000420:	f107 0310 	add.w	r3, r7, #16
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART1)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <HAL_USART_MspInit+0x8c>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d131      	bne.n	800049c <HAL_USART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <HAL_USART_MspInit+0x90>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a1a      	ldr	r2, [pc, #104]	; (80004a8 <HAL_USART_MspInit+0x90>)
 800043e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <HAL_USART_MspInit+0x90>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <HAL_USART_MspInit+0x90>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <HAL_USART_MspInit+0x90>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <HAL_USART_MspInit+0x90>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000468:	f44f 7340 	mov.w	r3, #768	; 0x300
 800046c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046e:	2302      	movs	r3, #2
 8000470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000472:	2303      	movs	r3, #3
 8000474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	4619      	mov	r1, r3
 800047c:	480b      	ldr	r0, [pc, #44]	; (80004ac <HAL_USART_MspInit+0x94>)
 800047e:	f000 f9f1 	bl	8000864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	4619      	mov	r1, r3
 8000496:	4805      	ldr	r0, [pc, #20]	; (80004ac <HAL_USART_MspInit+0x94>)
 8000498:	f000 f9e4 	bl	8000864 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800049c:	bf00      	nop
 800049e:	3720      	adds	r7, #32
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40013800 	.word	0x40013800
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010800 	.word	0x40010800

080004b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08e      	sub	sp, #56	; 0x38
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80004b8:	2300      	movs	r3, #0
 80004ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80004bc:	2300      	movs	r3, #0
 80004be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004c0:	2300      	movs	r3, #0
 80004c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80004c6:	4b34      	ldr	r3, [pc, #208]	; (8000598 <HAL_InitTick+0xe8>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	4a33      	ldr	r2, [pc, #204]	; (8000598 <HAL_InitTick+0xe8>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	61d3      	str	r3, [r2, #28]
 80004d2:	4b31      	ldr	r3, [pc, #196]	; (8000598 <HAL_InitTick+0xe8>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004de:	f107 0210 	add.w	r2, r7, #16
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	4611      	mov	r1, r2
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 ff31 	bl	8001350 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004ee:	6a3b      	ldr	r3, [r7, #32]
 80004f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d103      	bne.n	8000500 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004f8:	f000 ff02 	bl	8001300 <HAL_RCC_GetPCLK1Freq>
 80004fc:	6378      	str	r0, [r7, #52]	; 0x34
 80004fe:	e004      	b.n	800050a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000500:	f000 fefe 	bl	8001300 <HAL_RCC_GetPCLK1Freq>
 8000504:	4603      	mov	r3, r0
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800050a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800050c:	4a23      	ldr	r2, [pc, #140]	; (800059c <HAL_InitTick+0xec>)
 800050e:	fba2 2303 	umull	r2, r3, r2, r3
 8000512:	0c9b      	lsrs	r3, r3, #18
 8000514:	3b01      	subs	r3, #1
 8000516:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000518:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <HAL_InitTick+0xf0>)
 800051a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800051e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <HAL_InitTick+0xf0>)
 8000522:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000526:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000528:	4a1d      	ldr	r2, [pc, #116]	; (80005a0 <HAL_InitTick+0xf0>)
 800052a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800052c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <HAL_InitTick+0xf0>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <HAL_InitTick+0xf0>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <HAL_InitTick+0xf0>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000540:	4817      	ldr	r0, [pc, #92]	; (80005a0 <HAL_InitTick+0xf0>)
 8000542:	f000 ff53 	bl	80013ec <HAL_TIM_Base_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800054c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000550:	2b00      	cmp	r3, #0
 8000552:	d11b      	bne.n	800058c <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000554:	4812      	ldr	r0, [pc, #72]	; (80005a0 <HAL_InitTick+0xf0>)
 8000556:	f000 ffa1 	bl	800149c <HAL_TIM_Base_Start_IT>
 800055a:	4603      	mov	r3, r0
 800055c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000560:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000564:	2b00      	cmp	r3, #0
 8000566:	d111      	bne.n	800058c <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000568:	201c      	movs	r0, #28
 800056a:	f000 f96c 	bl	8000846 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d808      	bhi.n	8000586 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	201c      	movs	r0, #28
 800057a:	f000 f948 	bl	800080e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800057e:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <HAL_InitTick+0xf4>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	e002      	b.n	800058c <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800058c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000590:	4618      	mov	r0, r3
 8000592:	3738      	adds	r7, #56	; 0x38
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40021000 	.word	0x40021000
 800059c:	431bde83 	.word	0x431bde83
 80005a0:	20000080 	.word	0x20000080
 80005a4:	20000004 	.word	0x20000004

080005a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <NMI_Handler+0x4>

080005ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <HardFault_Handler+0x4>

080005b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <MemManage_Handler+0x4>

080005ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <BusFault_Handler+0x4>

080005c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <UsageFault_Handler+0x4>

080005c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
	...

080005d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <TIM2_IRQHandler+0x10>)
 80005da:	f000 ffb1 	bl	8001540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000080 	.word	0x20000080

080005e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005f4:	f7ff fff8 	bl	80005e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f8:	480b      	ldr	r0, [pc, #44]	; (8000628 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005fa:	490c      	ldr	r1, [pc, #48]	; (800062c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005fc:	4a0c      	ldr	r2, [pc, #48]	; (8000630 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000600:	e002      	b.n	8000608 <LoopCopyDataInit>

08000602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000606:	3304      	adds	r3, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800060c:	d3f9      	bcc.n	8000602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060e:	4a09      	ldr	r2, [pc, #36]	; (8000634 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000610:	4c09      	ldr	r4, [pc, #36]	; (8000638 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000614:	e001      	b.n	800061a <LoopFillZerobss>

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000618:	3204      	adds	r2, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800061e:	f004 f939 	bl	8004894 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000622:	f7ff fdff 	bl	8000224 <main>
  bx lr
 8000626:	4770      	bx	lr
  ldr r0, =_sdata
 8000628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800062c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000630:	08004998 	.word	0x08004998
  ldr r2, =_sbss
 8000634:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000638:	20003e70 	.word	0x20003e70

0800063c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800063c:	e7fe      	b.n	800063c <ADC1_2_IRQHandler>
	...

08000640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <HAL_Init+0x28>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_Init+0x28>)
 800064a:	f043 0310 	orr.w	r3, r3, #16
 800064e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000650:	2003      	movs	r0, #3
 8000652:	f000 f8d1 	bl	80007f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000656:	200f      	movs	r0, #15
 8000658:	f7ff ff2a 	bl	80004b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800065c:	f7ff feaa 	bl	80003b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40022000 	.word	0x40022000

0800066c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <HAL_IncTick+0x1c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <HAL_IncTick+0x20>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4413      	add	r3, r2
 800067c:	4a03      	ldr	r2, [pc, #12]	; (800068c <HAL_IncTick+0x20>)
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	20000008 	.word	0x20000008
 800068c:	200000c8 	.word	0x200000c8

08000690 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return uwTick;
 8000694:	4b02      	ldr	r3, [pc, #8]	; (80006a0 <HAL_GetTick+0x10>)
 8000696:	681b      	ldr	r3, [r3, #0]
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	200000c8 	.word	0x200000c8

080006a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <__NVIC_GetPriorityGrouping+0x18>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f003 0307 	and.w	r3, r3, #7
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	2b00      	cmp	r3, #0
 8000718:	db0b      	blt.n	8000732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	f003 021f 	and.w	r2, r3, #31
 8000720:	4906      	ldr	r1, [pc, #24]	; (800073c <__NVIC_EnableIRQ+0x34>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	095b      	lsrs	r3, r3, #5
 8000728:	2001      	movs	r0, #1
 800072a:	fa00 f202 	lsl.w	r2, r0, r2
 800072e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	e000e100 	.word	0xe000e100

08000740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	db0a      	blt.n	800076a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	490c      	ldr	r1, [pc, #48]	; (800078c <__NVIC_SetPriority+0x4c>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	0112      	lsls	r2, r2, #4
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	440b      	add	r3, r1
 8000764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000768:	e00a      	b.n	8000780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4908      	ldr	r1, [pc, #32]	; (8000790 <__NVIC_SetPriority+0x50>)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f003 030f 	and.w	r3, r3, #15
 8000776:	3b04      	subs	r3, #4
 8000778:	0112      	lsls	r2, r2, #4
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	440b      	add	r3, r1
 800077e:	761a      	strb	r2, [r3, #24]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000e100 	.word	0xe000e100
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000794:	b480      	push	{r7}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	f1c3 0307 	rsb	r3, r3, #7
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	bf28      	it	cs
 80007b2:	2304      	movcs	r3, #4
 80007b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3304      	adds	r3, #4
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d902      	bls.n	80007c4 <NVIC_EncodePriority+0x30>
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3b03      	subs	r3, #3
 80007c2:	e000      	b.n	80007c6 <NVIC_EncodePriority+0x32>
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	f04f 32ff 	mov.w	r2, #4294967295
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43da      	mvns	r2, r3
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	401a      	ands	r2, r3
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007dc:	f04f 31ff 	mov.w	r1, #4294967295
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	43d9      	mvns	r1, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	4313      	orrs	r3, r2
         );
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3724      	adds	r7, #36	; 0x24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff ff4f 	bl	80006a4 <__NVIC_SetPriorityGrouping>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800080e:	b580      	push	{r7, lr}
 8000810:	b086      	sub	sp, #24
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
 800081a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000820:	f7ff ff64 	bl	80006ec <__NVIC_GetPriorityGrouping>
 8000824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	68b9      	ldr	r1, [r7, #8]
 800082a:	6978      	ldr	r0, [r7, #20]
 800082c:	f7ff ffb2 	bl	8000794 <NVIC_EncodePriority>
 8000830:	4602      	mov	r2, r0
 8000832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000836:	4611      	mov	r1, r2
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff81 	bl	8000740 <__NVIC_SetPriority>
}
 800083e:	bf00      	nop
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
 800084c:	4603      	mov	r3, r0
 800084e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff57 	bl	8000708 <__NVIC_EnableIRQ>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000864:	b480      	push	{r7}
 8000866:	b08b      	sub	sp, #44	; 0x2c
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000876:	e169      	b.n	8000b4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000878:	2201      	movs	r2, #1
 800087a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	69fa      	ldr	r2, [r7, #28]
 8000888:	4013      	ands	r3, r2
 800088a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	429a      	cmp	r2, r3
 8000892:	f040 8158 	bne.w	8000b46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	4a9a      	ldr	r2, [pc, #616]	; (8000b04 <HAL_GPIO_Init+0x2a0>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d05e      	beq.n	800095e <HAL_GPIO_Init+0xfa>
 80008a0:	4a98      	ldr	r2, [pc, #608]	; (8000b04 <HAL_GPIO_Init+0x2a0>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d875      	bhi.n	8000992 <HAL_GPIO_Init+0x12e>
 80008a6:	4a98      	ldr	r2, [pc, #608]	; (8000b08 <HAL_GPIO_Init+0x2a4>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d058      	beq.n	800095e <HAL_GPIO_Init+0xfa>
 80008ac:	4a96      	ldr	r2, [pc, #600]	; (8000b08 <HAL_GPIO_Init+0x2a4>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d86f      	bhi.n	8000992 <HAL_GPIO_Init+0x12e>
 80008b2:	4a96      	ldr	r2, [pc, #600]	; (8000b0c <HAL_GPIO_Init+0x2a8>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d052      	beq.n	800095e <HAL_GPIO_Init+0xfa>
 80008b8:	4a94      	ldr	r2, [pc, #592]	; (8000b0c <HAL_GPIO_Init+0x2a8>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d869      	bhi.n	8000992 <HAL_GPIO_Init+0x12e>
 80008be:	4a94      	ldr	r2, [pc, #592]	; (8000b10 <HAL_GPIO_Init+0x2ac>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d04c      	beq.n	800095e <HAL_GPIO_Init+0xfa>
 80008c4:	4a92      	ldr	r2, [pc, #584]	; (8000b10 <HAL_GPIO_Init+0x2ac>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d863      	bhi.n	8000992 <HAL_GPIO_Init+0x12e>
 80008ca:	4a92      	ldr	r2, [pc, #584]	; (8000b14 <HAL_GPIO_Init+0x2b0>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d046      	beq.n	800095e <HAL_GPIO_Init+0xfa>
 80008d0:	4a90      	ldr	r2, [pc, #576]	; (8000b14 <HAL_GPIO_Init+0x2b0>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d85d      	bhi.n	8000992 <HAL_GPIO_Init+0x12e>
 80008d6:	2b12      	cmp	r3, #18
 80008d8:	d82a      	bhi.n	8000930 <HAL_GPIO_Init+0xcc>
 80008da:	2b12      	cmp	r3, #18
 80008dc:	d859      	bhi.n	8000992 <HAL_GPIO_Init+0x12e>
 80008de:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <HAL_GPIO_Init+0x80>)
 80008e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e4:	0800095f 	.word	0x0800095f
 80008e8:	08000939 	.word	0x08000939
 80008ec:	0800094b 	.word	0x0800094b
 80008f0:	0800098d 	.word	0x0800098d
 80008f4:	08000993 	.word	0x08000993
 80008f8:	08000993 	.word	0x08000993
 80008fc:	08000993 	.word	0x08000993
 8000900:	08000993 	.word	0x08000993
 8000904:	08000993 	.word	0x08000993
 8000908:	08000993 	.word	0x08000993
 800090c:	08000993 	.word	0x08000993
 8000910:	08000993 	.word	0x08000993
 8000914:	08000993 	.word	0x08000993
 8000918:	08000993 	.word	0x08000993
 800091c:	08000993 	.word	0x08000993
 8000920:	08000993 	.word	0x08000993
 8000924:	08000993 	.word	0x08000993
 8000928:	08000941 	.word	0x08000941
 800092c:	08000955 	.word	0x08000955
 8000930:	4a79      	ldr	r2, [pc, #484]	; (8000b18 <HAL_GPIO_Init+0x2b4>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d013      	beq.n	800095e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000936:	e02c      	b.n	8000992 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	623b      	str	r3, [r7, #32]
          break;
 800093e:	e029      	b.n	8000994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	3304      	adds	r3, #4
 8000946:	623b      	str	r3, [r7, #32]
          break;
 8000948:	e024      	b.n	8000994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	3308      	adds	r3, #8
 8000950:	623b      	str	r3, [r7, #32]
          break;
 8000952:	e01f      	b.n	8000994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	330c      	adds	r3, #12
 800095a:	623b      	str	r3, [r7, #32]
          break;
 800095c:	e01a      	b.n	8000994 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d102      	bne.n	800096c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000966:	2304      	movs	r3, #4
 8000968:	623b      	str	r3, [r7, #32]
          break;
 800096a:	e013      	b.n	8000994 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d105      	bne.n	8000980 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000974:	2308      	movs	r3, #8
 8000976:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	611a      	str	r2, [r3, #16]
          break;
 800097e:	e009      	b.n	8000994 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000980:	2308      	movs	r3, #8
 8000982:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	69fa      	ldr	r2, [r7, #28]
 8000988:	615a      	str	r2, [r3, #20]
          break;
 800098a:	e003      	b.n	8000994 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
          break;
 8000990:	e000      	b.n	8000994 <HAL_GPIO_Init+0x130>
          break;
 8000992:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	2bff      	cmp	r3, #255	; 0xff
 8000998:	d801      	bhi.n	800099e <HAL_GPIO_Init+0x13a>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	e001      	b.n	80009a2 <HAL_GPIO_Init+0x13e>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3304      	adds	r3, #4
 80009a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	2bff      	cmp	r3, #255	; 0xff
 80009a8:	d802      	bhi.n	80009b0 <HAL_GPIO_Init+0x14c>
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	e002      	b.n	80009b6 <HAL_GPIO_Init+0x152>
 80009b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b2:	3b08      	subs	r3, #8
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	210f      	movs	r1, #15
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	401a      	ands	r2, r3
 80009c8:	6a39      	ldr	r1, [r7, #32]
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	fa01 f303 	lsl.w	r3, r1, r3
 80009d0:	431a      	orrs	r2, r3
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f000 80b1 	beq.w	8000b46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009e4:	4b4d      	ldr	r3, [pc, #308]	; (8000b1c <HAL_GPIO_Init+0x2b8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a4c      	ldr	r2, [pc, #304]	; (8000b1c <HAL_GPIO_Init+0x2b8>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b4a      	ldr	r3, [pc, #296]	; (8000b1c <HAL_GPIO_Init+0x2b8>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009fc:	4a48      	ldr	r2, [pc, #288]	; (8000b20 <HAL_GPIO_Init+0x2bc>)
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	089b      	lsrs	r3, r3, #2
 8000a02:	3302      	adds	r3, #2
 8000a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	f003 0303 	and.w	r3, r3, #3
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	220f      	movs	r2, #15
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a40      	ldr	r2, [pc, #256]	; (8000b24 <HAL_GPIO_Init+0x2c0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d013      	beq.n	8000a50 <HAL_GPIO_Init+0x1ec>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a3f      	ldr	r2, [pc, #252]	; (8000b28 <HAL_GPIO_Init+0x2c4>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d00d      	beq.n	8000a4c <HAL_GPIO_Init+0x1e8>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a3e      	ldr	r2, [pc, #248]	; (8000b2c <HAL_GPIO_Init+0x2c8>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d007      	beq.n	8000a48 <HAL_GPIO_Init+0x1e4>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a3d      	ldr	r2, [pc, #244]	; (8000b30 <HAL_GPIO_Init+0x2cc>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d101      	bne.n	8000a44 <HAL_GPIO_Init+0x1e0>
 8000a40:	2303      	movs	r3, #3
 8000a42:	e006      	b.n	8000a52 <HAL_GPIO_Init+0x1ee>
 8000a44:	2304      	movs	r3, #4
 8000a46:	e004      	b.n	8000a52 <HAL_GPIO_Init+0x1ee>
 8000a48:	2302      	movs	r3, #2
 8000a4a:	e002      	b.n	8000a52 <HAL_GPIO_Init+0x1ee>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e000      	b.n	8000a52 <HAL_GPIO_Init+0x1ee>
 8000a50:	2300      	movs	r3, #0
 8000a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a54:	f002 0203 	and.w	r2, r2, #3
 8000a58:	0092      	lsls	r2, r2, #2
 8000a5a:	4093      	lsls	r3, r2
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a62:	492f      	ldr	r1, [pc, #188]	; (8000b20 <HAL_GPIO_Init+0x2bc>)
 8000a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a66:	089b      	lsrs	r3, r3, #2
 8000a68:	3302      	adds	r3, #2
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d006      	beq.n	8000a8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a7c:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000a7e:	689a      	ldr	r2, [r3, #8]
 8000a80:	492c      	ldr	r1, [pc, #176]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	608b      	str	r3, [r1, #8]
 8000a88:	e006      	b.n	8000a98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	43db      	mvns	r3, r3
 8000a92:	4928      	ldr	r1, [pc, #160]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000a94:	4013      	ands	r3, r2
 8000a96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d006      	beq.n	8000ab2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000aa4:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	4922      	ldr	r1, [pc, #136]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	60cb      	str	r3, [r1, #12]
 8000ab0:	e006      	b.n	8000ac0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000ab4:	68da      	ldr	r2, [r3, #12]
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	491e      	ldr	r1, [pc, #120]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000abc:	4013      	ands	r3, r2
 8000abe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d006      	beq.n	8000ada <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000ace:	685a      	ldr	r2, [r3, #4]
 8000ad0:	4918      	ldr	r1, [pc, #96]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	604b      	str	r3, [r1, #4]
 8000ad8:	e006      	b.n	8000ae8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	4914      	ldr	r1, [pc, #80]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d021      	beq.n	8000b38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	490e      	ldr	r1, [pc, #56]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	600b      	str	r3, [r1, #0]
 8000b00:	e021      	b.n	8000b46 <HAL_GPIO_Init+0x2e2>
 8000b02:	bf00      	nop
 8000b04:	10320000 	.word	0x10320000
 8000b08:	10310000 	.word	0x10310000
 8000b0c:	10220000 	.word	0x10220000
 8000b10:	10210000 	.word	0x10210000
 8000b14:	10120000 	.word	0x10120000
 8000b18:	10110000 	.word	0x10110000
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40010000 	.word	0x40010000
 8000b24:	40010800 	.word	0x40010800
 8000b28:	40010c00 	.word	0x40010c00
 8000b2c:	40011000 	.word	0x40011000
 8000b30:	40011400 	.word	0x40011400
 8000b34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <HAL_GPIO_Init+0x304>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	4909      	ldr	r1, [pc, #36]	; (8000b68 <HAL_GPIO_Init+0x304>)
 8000b42:	4013      	ands	r3, r2
 8000b44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	3301      	adds	r3, #1
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	fa22 f303 	lsr.w	r3, r2, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f47f ae8e 	bne.w	8000878 <HAL_GPIO_Init+0x14>
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	372c      	adds	r7, #44	; 0x2c
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	40010400 	.word	0x40010400

08000b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e272      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f000 8087 	beq.w	8000c9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b8c:	4b92      	ldr	r3, [pc, #584]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f003 030c 	and.w	r3, r3, #12
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	d00c      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b98:	4b8f      	ldr	r3, [pc, #572]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f003 030c 	and.w	r3, r3, #12
 8000ba0:	2b08      	cmp	r3, #8
 8000ba2:	d112      	bne.n	8000bca <HAL_RCC_OscConfig+0x5e>
 8000ba4:	4b8c      	ldr	r3, [pc, #560]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb0:	d10b      	bne.n	8000bca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bb2:	4b89      	ldr	r3, [pc, #548]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d06c      	beq.n	8000c98 <HAL_RCC_OscConfig+0x12c>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d168      	bne.n	8000c98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e24c      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd2:	d106      	bne.n	8000be2 <HAL_RCC_OscConfig+0x76>
 8000bd4:	4b80      	ldr	r3, [pc, #512]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a7f      	ldr	r2, [pc, #508]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	e02e      	b.n	8000c40 <HAL_RCC_OscConfig+0xd4>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d10c      	bne.n	8000c04 <HAL_RCC_OscConfig+0x98>
 8000bea:	4b7b      	ldr	r3, [pc, #492]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a7a      	ldr	r2, [pc, #488]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf4:	6013      	str	r3, [r2, #0]
 8000bf6:	4b78      	ldr	r3, [pc, #480]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a77      	ldr	r2, [pc, #476]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	e01d      	b.n	8000c40 <HAL_RCC_OscConfig+0xd4>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c0c:	d10c      	bne.n	8000c28 <HAL_RCC_OscConfig+0xbc>
 8000c0e:	4b72      	ldr	r3, [pc, #456]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a71      	ldr	r2, [pc, #452]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	4b6f      	ldr	r3, [pc, #444]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a6e      	ldr	r2, [pc, #440]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	e00b      	b.n	8000c40 <HAL_RCC_OscConfig+0xd4>
 8000c28:	4b6b      	ldr	r3, [pc, #428]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a6a      	ldr	r2, [pc, #424]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	4b68      	ldr	r3, [pc, #416]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a67      	ldr	r2, [pc, #412]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d013      	beq.n	8000c70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c48:	f7ff fd22 	bl	8000690 <HAL_GetTick>
 8000c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c4e:	e008      	b.n	8000c62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c50:	f7ff fd1e 	bl	8000690 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b64      	cmp	r3, #100	; 0x64
 8000c5c:	d901      	bls.n	8000c62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e200      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c62:	4b5d      	ldr	r3, [pc, #372]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d0f0      	beq.n	8000c50 <HAL_RCC_OscConfig+0xe4>
 8000c6e:	e014      	b.n	8000c9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c70:	f7ff fd0e 	bl	8000690 <HAL_GetTick>
 8000c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c76:	e008      	b.n	8000c8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c78:	f7ff fd0a 	bl	8000690 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b64      	cmp	r3, #100	; 0x64
 8000c84:	d901      	bls.n	8000c8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e1ec      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c8a:	4b53      	ldr	r3, [pc, #332]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1f0      	bne.n	8000c78 <HAL_RCC_OscConfig+0x10c>
 8000c96:	e000      	b.n	8000c9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d063      	beq.n	8000d6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ca6:	4b4c      	ldr	r3, [pc, #304]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 030c 	and.w	r3, r3, #12
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00b      	beq.n	8000cca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cb2:	4b49      	ldr	r3, [pc, #292]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b08      	cmp	r3, #8
 8000cbc:	d11c      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x18c>
 8000cbe:	4b46      	ldr	r3, [pc, #280]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d116      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cca:	4b43      	ldr	r3, [pc, #268]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d005      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x176>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d001      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e1c0      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ce2:	4b3d      	ldr	r3, [pc, #244]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	4939      	ldr	r1, [pc, #228]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf6:	e03a      	b.n	8000d6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d020      	beq.n	8000d42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d00:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d06:	f7ff fcc3 	bl	8000690 <HAL_GetTick>
 8000d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0c:	e008      	b.n	8000d20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d0e:	f7ff fcbf 	bl	8000690 <HAL_GetTick>
 8000d12:	4602      	mov	r2, r0
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d901      	bls.n	8000d20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e1a1      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d20:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d0f0      	beq.n	8000d0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	4927      	ldr	r1, [pc, #156]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	600b      	str	r3, [r1, #0]
 8000d40:	e015      	b.n	8000d6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d48:	f7ff fca2 	bl	8000690 <HAL_GetTick>
 8000d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d50:	f7ff fc9e 	bl	8000690 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e180      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d62:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1f0      	bne.n	8000d50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d03a      	beq.n	8000df0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d019      	beq.n	8000db6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_RCC_OscConfig+0x274>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d88:	f7ff fc82 	bl	8000690 <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d90:	f7ff fc7e 	bl	8000690 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e160      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0f0      	beq.n	8000d90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dae:	2001      	movs	r0, #1
 8000db0:	f000 fafe 	bl	80013b0 <RCC_Delay>
 8000db4:	e01c      	b.n	8000df0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_RCC_OscConfig+0x274>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dbc:	f7ff fc68 	bl	8000690 <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc2:	e00f      	b.n	8000de4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dc4:	f7ff fc64 	bl	8000690 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d908      	bls.n	8000de4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e146      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	42420000 	.word	0x42420000
 8000de0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de4:	4b92      	ldr	r3, [pc, #584]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1e9      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 80a6 	beq.w	8000f4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e02:	4b8b      	ldr	r3, [pc, #556]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10d      	bne.n	8000e2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	4b88      	ldr	r3, [pc, #544]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	4a87      	ldr	r2, [pc, #540]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e18:	61d3      	str	r3, [r2, #28]
 8000e1a:	4b85      	ldr	r3, [pc, #532]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e26:	2301      	movs	r3, #1
 8000e28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e2a:	4b82      	ldr	r3, [pc, #520]	; (8001034 <HAL_RCC_OscConfig+0x4c8>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d118      	bne.n	8000e68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e36:	4b7f      	ldr	r3, [pc, #508]	; (8001034 <HAL_RCC_OscConfig+0x4c8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a7e      	ldr	r2, [pc, #504]	; (8001034 <HAL_RCC_OscConfig+0x4c8>)
 8000e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e42:	f7ff fc25 	bl	8000690 <HAL_GetTick>
 8000e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e48:	e008      	b.n	8000e5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e4a:	f7ff fc21 	bl	8000690 <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b64      	cmp	r3, #100	; 0x64
 8000e56:	d901      	bls.n	8000e5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e103      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5c:	4b75      	ldr	r3, [pc, #468]	; (8001034 <HAL_RCC_OscConfig+0x4c8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0f0      	beq.n	8000e4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d106      	bne.n	8000e7e <HAL_RCC_OscConfig+0x312>
 8000e70:	4b6f      	ldr	r3, [pc, #444]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000e72:	6a1b      	ldr	r3, [r3, #32]
 8000e74:	4a6e      	ldr	r2, [pc, #440]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6213      	str	r3, [r2, #32]
 8000e7c:	e02d      	b.n	8000eda <HAL_RCC_OscConfig+0x36e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10c      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x334>
 8000e86:	4b6a      	ldr	r3, [pc, #424]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	4a69      	ldr	r2, [pc, #420]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000e8c:	f023 0301 	bic.w	r3, r3, #1
 8000e90:	6213      	str	r3, [r2, #32]
 8000e92:	4b67      	ldr	r3, [pc, #412]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	4a66      	ldr	r2, [pc, #408]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000e98:	f023 0304 	bic.w	r3, r3, #4
 8000e9c:	6213      	str	r3, [r2, #32]
 8000e9e:	e01c      	b.n	8000eda <HAL_RCC_OscConfig+0x36e>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	2b05      	cmp	r3, #5
 8000ea6:	d10c      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x356>
 8000ea8:	4b61      	ldr	r3, [pc, #388]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
 8000eac:	4a60      	ldr	r2, [pc, #384]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000eae:	f043 0304 	orr.w	r3, r3, #4
 8000eb2:	6213      	str	r3, [r2, #32]
 8000eb4:	4b5e      	ldr	r3, [pc, #376]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	4a5d      	ldr	r2, [pc, #372]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6213      	str	r3, [r2, #32]
 8000ec0:	e00b      	b.n	8000eda <HAL_RCC_OscConfig+0x36e>
 8000ec2:	4b5b      	ldr	r3, [pc, #364]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000ec4:	6a1b      	ldr	r3, [r3, #32]
 8000ec6:	4a5a      	ldr	r2, [pc, #360]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000ec8:	f023 0301 	bic.w	r3, r3, #1
 8000ecc:	6213      	str	r3, [r2, #32]
 8000ece:	4b58      	ldr	r3, [pc, #352]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	4a57      	ldr	r2, [pc, #348]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	f023 0304 	bic.w	r3, r3, #4
 8000ed8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d015      	beq.n	8000f0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee2:	f7ff fbd5 	bl	8000690 <HAL_GetTick>
 8000ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee8:	e00a      	b.n	8000f00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eea:	f7ff fbd1 	bl	8000690 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e0b1      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f00:	4b4b      	ldr	r3, [pc, #300]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0ee      	beq.n	8000eea <HAL_RCC_OscConfig+0x37e>
 8000f0c:	e014      	b.n	8000f38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fbbf 	bl	8000690 <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f14:	e00a      	b.n	8000f2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f16:	f7ff fbbb 	bl	8000690 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e09b      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f2c:	4b40      	ldr	r3, [pc, #256]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1ee      	bne.n	8000f16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f38:	7dfb      	ldrb	r3, [r7, #23]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d105      	bne.n	8000f4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f3e:	4b3c      	ldr	r3, [pc, #240]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a3b      	ldr	r2, [pc, #236]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 8087 	beq.w	8001062 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f54:	4b36      	ldr	r3, [pc, #216]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b08      	cmp	r3, #8
 8000f5e:	d061      	beq.n	8001024 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69db      	ldr	r3, [r3, #28]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d146      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f68:	4b33      	ldr	r3, [pc, #204]	; (8001038 <HAL_RCC_OscConfig+0x4cc>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6e:	f7ff fb8f 	bl	8000690 <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f74:	e008      	b.n	8000f88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f76:	f7ff fb8b 	bl	8000690 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e06d      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f88:	4b29      	ldr	r3, [pc, #164]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f0      	bne.n	8000f76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9c:	d108      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	4921      	ldr	r1, [pc, #132]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a19      	ldr	r1, [r3, #32]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	491b      	ldr	r1, [pc, #108]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_RCC_OscConfig+0x4cc>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fce:	f7ff fb5f 	bl	8000690 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fd6:	f7ff fb5b 	bl	8000690 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e03d      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f0      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x46a>
 8000ff4:	e035      	b.n	8001062 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_RCC_OscConfig+0x4cc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fb48 	bl	8000690 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001004:	f7ff fb44 	bl	8000690 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e026      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x498>
 8001022:	e01e      	b.n	8001062 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d107      	bne.n	800103c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e019      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>
 8001030:	40021000 	.word	0x40021000
 8001034:	40007000 	.word	0x40007000
 8001038:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <HAL_RCC_OscConfig+0x500>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	429a      	cmp	r2, r3
 800104e:	d106      	bne.n	800105e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800105a:	429a      	cmp	r2, r3
 800105c:	d001      	beq.n	8001062 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40021000 	.word	0x40021000

08001070 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e0d0      	b.n	8001226 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001084:	4b6a      	ldr	r3, [pc, #424]	; (8001230 <HAL_RCC_ClockConfig+0x1c0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d910      	bls.n	80010b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001092:	4b67      	ldr	r3, [pc, #412]	; (8001230 <HAL_RCC_ClockConfig+0x1c0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f023 0207 	bic.w	r2, r3, #7
 800109a:	4965      	ldr	r1, [pc, #404]	; (8001230 <HAL_RCC_ClockConfig+0x1c0>)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010a2:	4b63      	ldr	r3, [pc, #396]	; (8001230 <HAL_RCC_ClockConfig+0x1c0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d001      	beq.n	80010b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e0b8      	b.n	8001226 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d020      	beq.n	8001102 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010cc:	4b59      	ldr	r3, [pc, #356]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4a58      	ldr	r2, [pc, #352]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 80010d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010e4:	4b53      	ldr	r3, [pc, #332]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	4a52      	ldr	r2, [pc, #328]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 80010ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010f0:	4b50      	ldr	r3, [pc, #320]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	494d      	ldr	r1, [pc, #308]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d040      	beq.n	8001190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d107      	bne.n	8001126 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001116:	4b47      	ldr	r3, [pc, #284]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d115      	bne.n	800114e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e07f      	b.n	8001226 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d107      	bne.n	800113e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800112e:	4b41      	ldr	r3, [pc, #260]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d109      	bne.n	800114e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e073      	b.n	8001226 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113e:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e06b      	b.n	8001226 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800114e:	4b39      	ldr	r3, [pc, #228]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f023 0203 	bic.w	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	4936      	ldr	r1, [pc, #216]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 800115c:	4313      	orrs	r3, r2
 800115e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001160:	f7ff fa96 	bl	8000690 <HAL_GetTick>
 8001164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001166:	e00a      	b.n	800117e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001168:	f7ff fa92 	bl	8000690 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	f241 3288 	movw	r2, #5000	; 0x1388
 8001176:	4293      	cmp	r3, r2
 8001178:	d901      	bls.n	800117e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e053      	b.n	8001226 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 020c 	and.w	r2, r3, #12
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	429a      	cmp	r2, r3
 800118e:	d1eb      	bne.n	8001168 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <HAL_RCC_ClockConfig+0x1c0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	429a      	cmp	r2, r3
 800119c:	d210      	bcs.n	80011c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119e:	4b24      	ldr	r3, [pc, #144]	; (8001230 <HAL_RCC_ClockConfig+0x1c0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 0207 	bic.w	r2, r3, #7
 80011a6:	4922      	ldr	r1, [pc, #136]	; (8001230 <HAL_RCC_ClockConfig+0x1c0>)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <HAL_RCC_ClockConfig+0x1c0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d001      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e032      	b.n	8001226 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d008      	beq.n	80011de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	4916      	ldr	r1, [pc, #88]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d009      	beq.n	80011fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	490e      	ldr	r1, [pc, #56]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011fe:	f000 f821 	bl	8001244 <HAL_RCC_GetSysClockFreq>
 8001202:	4602      	mov	r2, r0
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	490a      	ldr	r1, [pc, #40]	; (8001238 <HAL_RCC_ClockConfig+0x1c8>)
 8001210:	5ccb      	ldrb	r3, [r1, r3]
 8001212:	fa22 f303 	lsr.w	r3, r2, r3
 8001216:	4a09      	ldr	r2, [pc, #36]	; (800123c <HAL_RCC_ClockConfig+0x1cc>)
 8001218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_RCC_ClockConfig+0x1d0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f946 	bl	80004b0 <HAL_InitTick>

  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40022000 	.word	0x40022000
 8001234:	40021000 	.word	0x40021000
 8001238:	08004964 	.word	0x08004964
 800123c:	20000000 	.word	0x20000000
 8001240:	20000004 	.word	0x20000004

08001244 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800125e:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b04      	cmp	r3, #4
 800126c:	d002      	beq.n	8001274 <HAL_RCC_GetSysClockFreq+0x30>
 800126e:	2b08      	cmp	r3, #8
 8001270:	d003      	beq.n	800127a <HAL_RCC_GetSysClockFreq+0x36>
 8001272:	e027      	b.n	80012c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_RCC_GetSysClockFreq+0x98>)
 8001276:	613b      	str	r3, [r7, #16]
      break;
 8001278:	e027      	b.n	80012ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	0c9b      	lsrs	r3, r3, #18
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001284:	5cd3      	ldrb	r3, [r2, r3]
 8001286:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d010      	beq.n	80012b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	0c5b      	lsrs	r3, r3, #17
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <HAL_RCC_GetSysClockFreq+0x98>)
 80012a6:	fb03 f202 	mul.w	r2, r3, r2
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	e004      	b.n	80012be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a0c      	ldr	r2, [pc, #48]	; (80012e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
 80012bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	613b      	str	r3, [r7, #16]
      break;
 80012c2:	e002      	b.n	80012ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_RCC_GetSysClockFreq+0x98>)
 80012c6:	613b      	str	r3, [r7, #16]
      break;
 80012c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012ca:	693b      	ldr	r3, [r7, #16]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	371c      	adds	r7, #28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000
 80012dc:	007a1200 	.word	0x007a1200
 80012e0:	0800497c 	.word	0x0800497c
 80012e4:	0800498c 	.word	0x0800498c
 80012e8:	003d0900 	.word	0x003d0900

080012ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012f0:	4b02      	ldr	r3, [pc, #8]	; (80012fc <HAL_RCC_GetHCLKFreq+0x10>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	20000000 	.word	0x20000000

08001300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001304:	f7ff fff2 	bl	80012ec <HAL_RCC_GetHCLKFreq>
 8001308:	4602      	mov	r2, r0
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	0a1b      	lsrs	r3, r3, #8
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	4903      	ldr	r1, [pc, #12]	; (8001324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001316:	5ccb      	ldrb	r3, [r1, r3]
 8001318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800131c:	4618      	mov	r0, r3
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40021000 	.word	0x40021000
 8001324:	08004974 	.word	0x08004974

08001328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800132c:	f7ff ffde 	bl	80012ec <HAL_RCC_GetHCLKFreq>
 8001330:	4602      	mov	r2, r0
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	0adb      	lsrs	r3, r3, #11
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	4903      	ldr	r1, [pc, #12]	; (800134c <HAL_RCC_GetPCLK2Freq+0x24>)
 800133e:	5ccb      	ldrb	r3, [r1, r3]
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001344:	4618      	mov	r0, r3
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000
 800134c:	08004974 	.word	0x08004974

08001350 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	220f      	movs	r2, #15
 800135e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_RCC_GetClockConfig+0x58>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0203 	and.w	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_RCC_GetClockConfig+0x58>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_RCC_GetClockConfig+0x58>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_RCC_GetClockConfig+0x58>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	08db      	lsrs	r3, r3, #3
 800138a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_RCC_GetClockConfig+0x5c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0207 	and.w	r2, r3, #7
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40022000 	.word	0x40022000

080013b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <RCC_Delay+0x34>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <RCC_Delay+0x38>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	0a5b      	lsrs	r3, r3, #9
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013cc:	bf00      	nop
  }
  while (Delay --);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	1e5a      	subs	r2, r3, #1
 80013d2:	60fa      	str	r2, [r7, #12]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f9      	bne.n	80013cc <RCC_Delay+0x1c>
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	20000000 	.word	0x20000000
 80013e8:	10624dd3 	.word	0x10624dd3

080013ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e041      	b.n	8001482 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f839 	bl	800148a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3304      	adds	r3, #4
 8001428:	4619      	mov	r1, r3
 800142a:	4610      	mov	r0, r2
 800142c:	f000 f9b4 	bl	8001798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d001      	beq.n	80014b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e03a      	b.n	800152a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a18      	ldr	r2, [pc, #96]	; (8001534 <HAL_TIM_Base_Start_IT+0x98>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00e      	beq.n	80014f4 <HAL_TIM_Base_Start_IT+0x58>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014de:	d009      	beq.n	80014f4 <HAL_TIM_Base_Start_IT+0x58>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a14      	ldr	r2, [pc, #80]	; (8001538 <HAL_TIM_Base_Start_IT+0x9c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d004      	beq.n	80014f4 <HAL_TIM_Base_Start_IT+0x58>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a13      	ldr	r2, [pc, #76]	; (800153c <HAL_TIM_Base_Start_IT+0xa0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d111      	bne.n	8001518 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b06      	cmp	r3, #6
 8001504:	d010      	beq.n	8001528 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f042 0201 	orr.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001516:	e007      	b.n	8001528 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	40012c00 	.word	0x40012c00
 8001538:	40000400 	.word	0x40000400
 800153c:	40000800 	.word	0x40000800

08001540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b02      	cmp	r3, #2
 8001554:	d122      	bne.n	800159c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b02      	cmp	r3, #2
 8001562:	d11b      	bne.n	800159c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f06f 0202 	mvn.w	r2, #2
 800156c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f8ed 	bl	8001762 <HAL_TIM_IC_CaptureCallback>
 8001588:	e005      	b.n	8001596 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f8e0 	bl	8001750 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f8ef 	bl	8001774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d122      	bne.n	80015f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d11b      	bne.n	80015f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f06f 0204 	mvn.w	r2, #4
 80015c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2202      	movs	r2, #2
 80015c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f8c3 	bl	8001762 <HAL_TIM_IC_CaptureCallback>
 80015dc:	e005      	b.n	80015ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f8b6 	bl	8001750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f8c5 	bl	8001774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d122      	bne.n	8001644 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b08      	cmp	r3, #8
 800160a:	d11b      	bne.n	8001644 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f06f 0208 	mvn.w	r2, #8
 8001614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2204      	movs	r2, #4
 800161a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f899 	bl	8001762 <HAL_TIM_IC_CaptureCallback>
 8001630:	e005      	b.n	800163e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f88c 	bl	8001750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f89b 	bl	8001774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	2b10      	cmp	r3, #16
 8001650:	d122      	bne.n	8001698 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f003 0310 	and.w	r3, r3, #16
 800165c:	2b10      	cmp	r3, #16
 800165e:	d11b      	bne.n	8001698 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f06f 0210 	mvn.w	r2, #16
 8001668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2208      	movs	r2, #8
 800166e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f86f 	bl	8001762 <HAL_TIM_IC_CaptureCallback>
 8001684:	e005      	b.n	8001692 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f862 	bl	8001750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f871 	bl	8001774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d10e      	bne.n	80016c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d107      	bne.n	80016c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f06f 0201 	mvn.w	r2, #1
 80016bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7fe fe64 	bl	800038c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ce:	2b80      	cmp	r3, #128	; 0x80
 80016d0:	d10e      	bne.n	80016f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016dc:	2b80      	cmp	r3, #128	; 0x80
 80016de:	d107      	bne.n	80016f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f8bf 	bl	800186e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fa:	2b40      	cmp	r3, #64	; 0x40
 80016fc:	d10e      	bne.n	800171c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001708:	2b40      	cmp	r3, #64	; 0x40
 800170a:	d107      	bne.n	800171c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f835 	bl	8001786 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	f003 0320 	and.w	r3, r3, #32
 8001726:	2b20      	cmp	r3, #32
 8001728:	d10e      	bne.n	8001748 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f003 0320 	and.w	r3, r3, #32
 8001734:	2b20      	cmp	r3, #32
 8001736:	d107      	bne.n	8001748 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f06f 0220 	mvn.w	r2, #32
 8001740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f88a 	bl	800185c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a29      	ldr	r2, [pc, #164]	; (8001850 <TIM_Base_SetConfig+0xb8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00b      	beq.n	80017c8 <TIM_Base_SetConfig+0x30>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b6:	d007      	beq.n	80017c8 <TIM_Base_SetConfig+0x30>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a26      	ldr	r2, [pc, #152]	; (8001854 <TIM_Base_SetConfig+0xbc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d003      	beq.n	80017c8 <TIM_Base_SetConfig+0x30>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a25      	ldr	r2, [pc, #148]	; (8001858 <TIM_Base_SetConfig+0xc0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d108      	bne.n	80017da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a1c      	ldr	r2, [pc, #112]	; (8001850 <TIM_Base_SetConfig+0xb8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00b      	beq.n	80017fa <TIM_Base_SetConfig+0x62>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e8:	d007      	beq.n	80017fa <TIM_Base_SetConfig+0x62>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a19      	ldr	r2, [pc, #100]	; (8001854 <TIM_Base_SetConfig+0xbc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d003      	beq.n	80017fa <TIM_Base_SetConfig+0x62>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a18      	ldr	r2, [pc, #96]	; (8001858 <TIM_Base_SetConfig+0xc0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d108      	bne.n	800180c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	4313      	orrs	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a07      	ldr	r2, [pc, #28]	; (8001850 <TIM_Base_SetConfig+0xb8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d103      	bne.n	8001840 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	615a      	str	r2, [r3, #20]
}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	40012c00 	.word	0x40012c00
 8001854:	40000400 	.word	0x40000400
 8001858:	40000800 	.word	0x40000800

0800185c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e033      	b.n	80018fa <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d106      	bne.n	80018ac <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7fe fdb6 	bl	8000418 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f90b 	bl	8001ad0 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	695a      	ldr	r2, [r3, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018d8:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018e8:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b08a      	sub	sp, #40	; 0x28
 8001906:	af02      	add	r7, sp, #8
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	4613      	mov	r3, r2
 8001910:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d17c      	bne.n	8001a18 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <HAL_USART_Transmit+0x28>
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e075      	b.n	8001a1a <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <HAL_USART_Transmit+0x3a>
 8001938:	2302      	movs	r3, #2
 800193a:	e06e      	b.n	8001a1a <HAL_USART_Transmit+0x118>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2212      	movs	r2, #18
 800194e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001952:	f7fe fe9d 	bl	8000690 <HAL_GetTick>
 8001956:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	88fa      	ldrh	r2, [r7, #6]
 800195c:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	88fa      	ldrh	r2, [r7, #6]
 8001962:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800196c:	d108      	bne.n	8001980 <HAL_USART_Transmit+0x7e>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d104      	bne.n	8001980 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	e003      	b.n	8001988 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8001988:	e02a      	b.n	80019e0 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2200      	movs	r2, #0
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f844 	bl	8001a22 <USART_WaitOnFlagUntilTimeout>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e03a      	b.n	8001a1a <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10b      	bne.n	80019c2 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019b8:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	3302      	adds	r3, #2
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	e007      	b.n	80019d2 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	781a      	ldrb	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	3301      	adds	r3, #1
 80019d0:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3b01      	subs	r3, #1
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1cf      	bne.n	800198a <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2200      	movs	r2, #0
 80019f2:	2140      	movs	r1, #64	; 0x40
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 f814 	bl	8001a22 <USART_WaitOnFlagUntilTimeout>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e00a      	b.n	8001a1a <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	e000      	b.n	8001a1a <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8001a18:	2302      	movs	r3, #2
  }
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001a32:	e038      	b.n	8001aa6 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3a:	d034      	beq.n	8001aa6 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <USART_WaitOnFlagUntilTimeout+0x30>
 8001a42:	f7fe fe25 	bl	8000690 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d229      	bcs.n	8001aa6 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a60:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0220 	bic.w	r2, r2, #32
 8001a70:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a80:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0201 	bic.w	r2, r2, #1
 8001a90:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e00f      	b.n	8001ac6 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	bf0c      	ite	eq
 8001ab6:	2301      	moveq	r3, #1
 8001ab8:	2300      	movne	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d0b7      	beq.n	8001a34 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 020c 	bic.w	r2, r2, #12
 8001aea:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001afa:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001b04:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001b10:	431a      	orrs	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b1a:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001b32:	f023 030c 	bic.w	r3, r3, #12
 8001b36:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	695a      	ldr	r2, [r3, #20]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001b64:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a53      	ldr	r2, [pc, #332]	; (8001cb8 <USART_SetConfig+0x1e8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d14f      	bne.n	8001c10 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b70:	f7ff fbda 	bl	8001328 <HAL_RCC_GetPCLK2Freq>
 8001b74:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009a      	lsls	r2, r3, #2
 8001b80:	441a      	add	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8c:	4a4b      	ldr	r2, [pc, #300]	; (8001cbc <USART_SetConfig+0x1ec>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	0119      	lsls	r1, r3, #4
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009a      	lsls	r2, r3, #2
 8001ba0:	441a      	add	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bac:	4b43      	ldr	r3, [pc, #268]	; (8001cbc <USART_SetConfig+0x1ec>)
 8001bae:	fba3 0302 	umull	r0, r3, r3, r2
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2064      	movs	r0, #100	; 0x64
 8001bb6:	fb00 f303 	mul.w	r3, r0, r3
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	3332      	adds	r3, #50	; 0x32
 8001bc0:	4a3e      	ldr	r2, [pc, #248]	; (8001cbc <USART_SetConfig+0x1ec>)
 8001bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8001bce:	4419      	add	r1, r3
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009a      	lsls	r2, r3, #2
 8001bda:	441a      	add	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001be6:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <USART_SetConfig+0x1ec>)
 8001be8:	fba3 0302 	umull	r0, r3, r3, r2
 8001bec:	095b      	lsrs	r3, r3, #5
 8001bee:	2064      	movs	r0, #100	; 0x64
 8001bf0:	fb00 f303 	mul.w	r3, r0, r3
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	3332      	adds	r3, #50	; 0x32
 8001bfa:	4a30      	ldr	r2, [pc, #192]	; (8001cbc <USART_SetConfig+0x1ec>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	095b      	lsrs	r3, r3, #5
 8001c02:	f003 020f 	and.w	r2, r3, #15
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	440a      	add	r2, r1
 8001c0c:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8001c0e:	e04e      	b.n	8001cae <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c10:	f7ff fb76 	bl	8001300 <HAL_RCC_GetPCLK1Freq>
 8001c14:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009a      	lsls	r2, r3, #2
 8001c20:	441a      	add	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2c:	4a23      	ldr	r2, [pc, #140]	; (8001cbc <USART_SetConfig+0x1ec>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	0119      	lsls	r1, r3, #4
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009a      	lsls	r2, r3, #2
 8001c40:	441a      	add	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <USART_SetConfig+0x1ec>)
 8001c4e:	fba3 0302 	umull	r0, r3, r3, r2
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2064      	movs	r0, #100	; 0x64
 8001c56:	fb00 f303 	mul.w	r3, r0, r3
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	3332      	adds	r3, #50	; 0x32
 8001c60:	4a16      	ldr	r2, [pc, #88]	; (8001cbc <USART_SetConfig+0x1ec>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8001c6e:	4419      	add	r1, r3
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	009a      	lsls	r2, r3, #2
 8001c7a:	441a      	add	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <USART_SetConfig+0x1ec>)
 8001c88:	fba3 0302 	umull	r0, r3, r3, r2
 8001c8c:	095b      	lsrs	r3, r3, #5
 8001c8e:	2064      	movs	r0, #100	; 0x64
 8001c90:	fb00 f303 	mul.w	r3, r0, r3
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	3332      	adds	r3, #50	; 0x32
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <USART_SetConfig+0x1ec>)
 8001c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca0:	095b      	lsrs	r3, r3, #5
 8001ca2:	f003 020f 	and.w	r2, r3, #15
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	440a      	add	r2, r1
 8001cac:	609a      	str	r2, [r3, #8]
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40013800 	.word	0x40013800
 8001cbc:	51eb851f 	.word	0x51eb851f

08001cc0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f103 0208 	add.w	r2, r3, #8
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f103 0208 	add.w	r2, r3, #8
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f103 0208 	add.w	r2, r3, #8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2c:	d103      	bne.n	8001d36 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	e00c      	b.n	8001d50 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3308      	adds	r3, #8
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	e002      	b.n	8001d44 <vListInsert+0x2e>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d2f6      	bcs.n	8001d3e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	601a      	str	r2, [r3, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6892      	ldr	r2, [r2, #8]
 8001d9c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6852      	ldr	r2, [r2, #4]
 8001da6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d103      	bne.n	8001dba <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	1e5a      	subs	r2, r3, #1
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001de2:	2301      	movs	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10a      	bne.n	8001e06 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df4:	f383 8811 	msr	BASEPRI, r3
 8001df8:	f3bf 8f6f 	isb	sy
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001e02:	bf00      	nop
 8001e04:	e7fe      	b.n	8001e04 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d05d      	beq.n	8001ec8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d059      	beq.n	8001ec8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d000      	beq.n	8001e28 <xQueueGenericReset+0x50>
 8001e26:	2101      	movs	r1, #1
 8001e28:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d14c      	bne.n	8001ec8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001e2e:	f002 fa9f 	bl	8004370 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3a:	6939      	ldr	r1, [r7, #16]
 8001e3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	441a      	add	r2, r3
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	6939      	ldr	r1, [r7, #16]
 8001e62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	441a      	add	r2, r3
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	22ff      	movs	r2, #255	; 0xff
 8001e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	22ff      	movs	r2, #255	; 0xff
 8001e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d114      	bne.n	8001eae <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01a      	beq.n	8001ec2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	3310      	adds	r3, #16
 8001e90:	4618      	mov	r0, r3
 8001e92:	f001 fa3d 	bl	8003310 <xTaskRemoveFromEventList>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d012      	beq.n	8001ec2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <xQueueGenericReset+0x11c>)
 8001e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	f3bf 8f4f 	dsb	sy
 8001ea8:	f3bf 8f6f 	isb	sy
 8001eac:	e009      	b.n	8001ec2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	3310      	adds	r3, #16
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ff04 	bl	8001cc0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	3324      	adds	r3, #36	; 0x24
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff feff 	bl	8001cc0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001ec2:	f002 fa85 	bl	80043d0 <vPortExitCritical>
 8001ec6:	e001      	b.n	8001ecc <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10a      	bne.n	8001ee8 <xQueueGenericReset+0x110>
        __asm volatile
 8001ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed6:	f383 8811 	msr	BASEPRI, r3
 8001eda:	f3bf 8f6f 	isb	sy
 8001ede:	f3bf 8f4f 	dsb	sy
 8001ee2:	60bb      	str	r3, [r7, #8]
    }
 8001ee4:	bf00      	nop
 8001ee6:	e7fe      	b.n	8001ee6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001ee8:	697b      	ldr	r3, [r7, #20]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	e000ed04 	.word	0xe000ed04

08001ef8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	4613      	mov	r3, r2
 8001f04:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d02e      	beq.n	8001f6e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001f10:	2100      	movs	r1, #0
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	fba3 2302 	umull	r2, r3, r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d000      	beq.n	8001f20 <xQueueGenericCreate+0x28>
 8001f1e:	2101      	movs	r1, #1
 8001f20:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d123      	bne.n	8001f6e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001f2e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001f32:	d81c      	bhi.n	8001f6e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	fb02 f303 	mul.w	r3, r2, r3
 8001f3c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	3350      	adds	r3, #80	; 0x50
 8001f42:	4618      	mov	r0, r3
 8001f44:	f002 fad4 	bl	80044f0 <pvPortMalloc>
 8001f48:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01c      	beq.n	8001f8a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3350      	adds	r3, #80	; 0x50
 8001f58:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f5a:	79fa      	ldrb	r2, [r7, #7]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f814 	bl	8001f94 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001f6c:	e00d      	b.n	8001f8a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10a      	bne.n	8001f8a <xQueueGenericCreate+0x92>
        __asm volatile
 8001f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f78:	f383 8811 	msr	BASEPRI, r3
 8001f7c:	f3bf 8f6f 	isb	sy
 8001f80:	f3bf 8f4f 	dsb	sy
 8001f84:	613b      	str	r3, [r7, #16]
    }
 8001f86:	bf00      	nop
 8001f88:	e7fe      	b.n	8001f88 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
    }
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3720      	adds	r7, #32
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d103      	bne.n	8001fb0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e002      	b.n	8001fb6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	69b8      	ldr	r0, [r7, #24]
 8001fc6:	f7ff ff07 	bl	8001dd8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00e      	beq.n	8002006 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f81d 	bl	8002040 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002018:	2301      	movs	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	2300      	movs	r3, #0
 800201e:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	461a      	mov	r2, r3
 8002024:	6939      	ldr	r1, [r7, #16]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff66 	bl	8001ef8 <xQueueGenericCreate>
 800202c:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f7ff ffd3 	bl	8001fda <prvInitialiseMutex>

        return xNewQueue;
 8002034:	68fb      	ldr	r3, [r7, #12]
    }
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08e      	sub	sp, #56	; 0x38
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800204e:	2300      	movs	r3, #0
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10a      	bne.n	8002072 <xQueueGenericSend+0x32>
        __asm volatile
 800205c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002060:	f383 8811 	msr	BASEPRI, r3
 8002064:	f3bf 8f6f 	isb	sy
 8002068:	f3bf 8f4f 	dsb	sy
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800206e:	bf00      	nop
 8002070:	e7fe      	b.n	8002070 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d103      	bne.n	8002080 <xQueueGenericSend+0x40>
 8002078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <xQueueGenericSend+0x44>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <xQueueGenericSend+0x46>
 8002084:	2300      	movs	r3, #0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10a      	bne.n	80020a0 <xQueueGenericSend+0x60>
        __asm volatile
 800208a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208e:	f383 8811 	msr	BASEPRI, r3
 8002092:	f3bf 8f6f 	isb	sy
 8002096:	f3bf 8f4f 	dsb	sy
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800209c:	bf00      	nop
 800209e:	e7fe      	b.n	800209e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d103      	bne.n	80020ae <xQueueGenericSend+0x6e>
 80020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <xQueueGenericSend+0x72>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <xQueueGenericSend+0x74>
 80020b2:	2300      	movs	r3, #0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10a      	bne.n	80020ce <xQueueGenericSend+0x8e>
        __asm volatile
 80020b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	623b      	str	r3, [r7, #32]
    }
 80020ca:	bf00      	nop
 80020cc:	e7fe      	b.n	80020cc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020ce:	f001 fb2d 	bl	800372c <xTaskGetSchedulerState>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <xQueueGenericSend+0x9e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <xQueueGenericSend+0xa2>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <xQueueGenericSend+0xa4>
 80020e2:	2300      	movs	r3, #0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10a      	bne.n	80020fe <xQueueGenericSend+0xbe>
        __asm volatile
 80020e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ec:	f383 8811 	msr	BASEPRI, r3
 80020f0:	f3bf 8f6f 	isb	sy
 80020f4:	f3bf 8f4f 	dsb	sy
 80020f8:	61fb      	str	r3, [r7, #28]
    }
 80020fa:	bf00      	nop
 80020fc:	e7fe      	b.n	80020fc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80020fe:	f002 f937 	bl	8004370 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210a:	429a      	cmp	r2, r3
 800210c:	d302      	bcc.n	8002114 <xQueueGenericSend+0xd4>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d129      	bne.n	8002168 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800211a:	f000 fa84 	bl	8002626 <prvCopyDataToQueue>
 800211e:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	2b00      	cmp	r3, #0
 8002126:	d010      	beq.n	800214a <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212a:	3324      	adds	r3, #36	; 0x24
 800212c:	4618      	mov	r0, r3
 800212e:	f001 f8ef 	bl	8003310 <xTaskRemoveFromEventList>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002138:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <xQueueGenericSend+0x1f8>)
 800213a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	f3bf 8f6f 	isb	sy
 8002148:	e00a      	b.n	8002160 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002150:	4b39      	ldr	r3, [pc, #228]	; (8002238 <xQueueGenericSend+0x1f8>)
 8002152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002160:	f002 f936 	bl	80043d0 <vPortExitCritical>
                return pdPASS;
 8002164:	2301      	movs	r3, #1
 8002166:	e063      	b.n	8002230 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d103      	bne.n	8002176 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800216e:	f002 f92f 	bl	80043d0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002172:	2300      	movs	r3, #0
 8002174:	e05c      	b.n	8002230 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002178:	2b00      	cmp	r3, #0
 800217a:	d106      	bne.n	800218a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4618      	mov	r0, r3
 8002182:	f001 f99b 	bl	80034bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002186:	2301      	movs	r3, #1
 8002188:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800218a:	f002 f921 	bl	80043d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800218e:	f000 fdcd 	bl	8002d2c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002192:	f002 f8ed 	bl	8004370 <vPortEnterCritical>
 8002196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800219c:	b25b      	sxtb	r3, r3
 800219e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a2:	d103      	bne.n	80021ac <xQueueGenericSend+0x16c>
 80021a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d103      	bne.n	80021c2 <xQueueGenericSend+0x182>
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021c2:	f002 f905 	bl	80043d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021c6:	1d3a      	adds	r2, r7, #4
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f001 f98a 	bl	80034e8 <xTaskCheckForTimeOut>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d124      	bne.n	8002224 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80021da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021dc:	f000 fb1b 	bl	8002816 <prvIsQueueFull>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d018      	beq.n	8002218 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80021e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e8:	3310      	adds	r3, #16
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f001 f824 	bl	800323c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80021f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021f6:	f000 faa6 	bl	8002746 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80021fa:	f000 fda5 	bl	8002d48 <xTaskResumeAll>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	f47f af7c 	bne.w	80020fe <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <xQueueGenericSend+0x1f8>)
 8002208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	f3bf 8f4f 	dsb	sy
 8002212:	f3bf 8f6f 	isb	sy
 8002216:	e772      	b.n	80020fe <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800221a:	f000 fa94 	bl	8002746 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800221e:	f000 fd93 	bl	8002d48 <xTaskResumeAll>
 8002222:	e76c      	b.n	80020fe <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002226:	f000 fa8e 	bl	8002746 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800222a:	f000 fd8d 	bl	8002d48 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800222e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002230:	4618      	mov	r0, r3
 8002232:	3738      	adds	r7, #56	; 0x38
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	e000ed04 	.word	0xe000ed04

0800223c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08c      	sub	sp, #48	; 0x30
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002248:	2300      	movs	r3, #0
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10a      	bne.n	800226c <xQueueReceive+0x30>
        __asm volatile
 8002256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225a:	f383 8811 	msr	BASEPRI, r3
 800225e:	f3bf 8f6f 	isb	sy
 8002262:	f3bf 8f4f 	dsb	sy
 8002266:	623b      	str	r3, [r7, #32]
    }
 8002268:	bf00      	nop
 800226a:	e7fe      	b.n	800226a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d103      	bne.n	800227a <xQueueReceive+0x3e>
 8002272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <xQueueReceive+0x42>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <xQueueReceive+0x44>
 800227e:	2300      	movs	r3, #0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10a      	bne.n	800229a <xQueueReceive+0x5e>
        __asm volatile
 8002284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002288:	f383 8811 	msr	BASEPRI, r3
 800228c:	f3bf 8f6f 	isb	sy
 8002290:	f3bf 8f4f 	dsb	sy
 8002294:	61fb      	str	r3, [r7, #28]
    }
 8002296:	bf00      	nop
 8002298:	e7fe      	b.n	8002298 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800229a:	f001 fa47 	bl	800372c <xTaskGetSchedulerState>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <xQueueReceive+0x6e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <xQueueReceive+0x72>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <xQueueReceive+0x74>
 80022ae:	2300      	movs	r3, #0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10a      	bne.n	80022ca <xQueueReceive+0x8e>
        __asm volatile
 80022b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b8:	f383 8811 	msr	BASEPRI, r3
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	61bb      	str	r3, [r7, #24]
    }
 80022c6:	bf00      	nop
 80022c8:	e7fe      	b.n	80022c8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80022ca:	f002 f851 	bl	8004370 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01f      	beq.n	800231a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022de:	f000 fa0c 	bl	80026fa <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	1e5a      	subs	r2, r3, #1
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00f      	beq.n	8002312 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f4:	3310      	adds	r3, #16
 80022f6:	4618      	mov	r0, r3
 80022f8:	f001 f80a 	bl	8003310 <xTaskRemoveFromEventList>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d007      	beq.n	8002312 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002302:	4b3d      	ldr	r3, [pc, #244]	; (80023f8 <xQueueReceive+0x1bc>)
 8002304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	f3bf 8f4f 	dsb	sy
 800230e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002312:	f002 f85d 	bl	80043d0 <vPortExitCritical>
                return pdPASS;
 8002316:	2301      	movs	r3, #1
 8002318:	e069      	b.n	80023ee <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d103      	bne.n	8002328 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002320:	f002 f856 	bl	80043d0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002324:	2300      	movs	r3, #0
 8002326:	e062      	b.n	80023ee <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	2b00      	cmp	r3, #0
 800232c:	d106      	bne.n	800233c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800232e:	f107 0310 	add.w	r3, r7, #16
 8002332:	4618      	mov	r0, r3
 8002334:	f001 f8c2 	bl	80034bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002338:	2301      	movs	r3, #1
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800233c:	f002 f848 	bl	80043d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002340:	f000 fcf4 	bl	8002d2c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002344:	f002 f814 	bl	8004370 <vPortEnterCritical>
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800234e:	b25b      	sxtb	r3, r3
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d103      	bne.n	800235e <xQueueReceive+0x122>
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002364:	b25b      	sxtb	r3, r3
 8002366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236a:	d103      	bne.n	8002374 <xQueueReceive+0x138>
 800236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002374:	f002 f82c 	bl	80043d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002378:	1d3a      	adds	r2, r7, #4
 800237a:	f107 0310 	add.w	r3, r7, #16
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f001 f8b1 	bl	80034e8 <xTaskCheckForTimeOut>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d123      	bne.n	80023d4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800238c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800238e:	f000 fa2c 	bl	80027ea <prvIsQueueEmpty>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d017      	beq.n	80023c8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239a:	3324      	adds	r3, #36	; 0x24
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 ff4b 	bl	800323c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80023a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023a8:	f000 f9cd 	bl	8002746 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80023ac:	f000 fccc 	bl	8002d48 <xTaskResumeAll>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d189      	bne.n	80022ca <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <xQueueReceive+0x1bc>)
 80023b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f3bf 8f4f 	dsb	sy
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	e780      	b.n	80022ca <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80023c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023ca:	f000 f9bc 	bl	8002746 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80023ce:	f000 fcbb 	bl	8002d48 <xTaskResumeAll>
 80023d2:	e77a      	b.n	80022ca <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80023d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023d6:	f000 f9b6 	bl	8002746 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80023da:	f000 fcb5 	bl	8002d48 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023e0:	f000 fa03 	bl	80027ea <prvIsQueueEmpty>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f43f af6f 	beq.w	80022ca <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80023ec:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3730      	adds	r7, #48	; 0x30
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	e000ed04 	.word	0xe000ed04

080023fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08c      	sub	sp, #48	; 0x30
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002406:	2300      	movs	r3, #0
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800240e:	2300      	movs	r3, #0
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241c:	f383 8811 	msr	BASEPRI, r3
 8002420:	f3bf 8f6f 	isb	sy
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	61bb      	str	r3, [r7, #24]
    }
 800242a:	bf00      	nop
 800242c:	e7fe      	b.n	800242c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	617b      	str	r3, [r7, #20]
    }
 8002448:	bf00      	nop
 800244a:	e7fe      	b.n	800244a <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800244c:	f001 f96e 	bl	800372c <xTaskGetSchedulerState>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d102      	bne.n	800245c <xQueueSemaphoreTake+0x60>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <xQueueSemaphoreTake+0x64>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <xQueueSemaphoreTake+0x66>
 8002460:	2300      	movs	r3, #0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10a      	bne.n	800247c <xQueueSemaphoreTake+0x80>
        __asm volatile
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	613b      	str	r3, [r7, #16]
    }
 8002478:	bf00      	nop
 800247a:	e7fe      	b.n	800247a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800247c:	f001 ff78 	bl	8004370 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d024      	beq.n	80024d6 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	1e5a      	subs	r2, r3, #1
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d104      	bne.n	80024a6 <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800249c:	f001 fb5e 	bl	8003b5c <pvTaskIncrementMutexHeldCount>
 80024a0:	4602      	mov	r2, r0
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00f      	beq.n	80024ce <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	3310      	adds	r3, #16
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 ff2c 	bl	8003310 <xTaskRemoveFromEventList>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d007      	beq.n	80024ce <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80024be:	4b4d      	ldr	r3, [pc, #308]	; (80025f4 <xQueueSemaphoreTake+0x1f8>)
 80024c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	f3bf 8f4f 	dsb	sy
 80024ca:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80024ce:	f001 ff7f 	bl	80043d0 <vPortExitCritical>
                return pdPASS;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e089      	b.n	80025ea <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d103      	bne.n	80024e4 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80024dc:	f001 ff78 	bl	80043d0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80024e0:	2300      	movs	r3, #0
 80024e2:	e082      	b.n	80025ea <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d106      	bne.n	80024f8 <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024ea:	f107 0308 	add.w	r3, r7, #8
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 ffe4 	bl	80034bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024f4:	2301      	movs	r3, #1
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024f8:	f001 ff6a 	bl	80043d0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024fc:	f000 fc16 	bl	8002d2c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002500:	f001 ff36 	bl	8004370 <vPortEnterCritical>
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800250a:	b25b      	sxtb	r3, r3
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d103      	bne.n	800251a <xQueueSemaphoreTake+0x11e>
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002520:	b25b      	sxtb	r3, r3
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002526:	d103      	bne.n	8002530 <xQueueSemaphoreTake+0x134>
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002530:	f001 ff4e 	bl	80043d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002534:	463a      	mov	r2, r7
 8002536:	f107 0308 	add.w	r3, r7, #8
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f000 ffd3 	bl	80034e8 <xTaskCheckForTimeOut>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d132      	bne.n	80025ae <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800254a:	f000 f94e 	bl	80027ea <prvIsQueueEmpty>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d026      	beq.n	80025a2 <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 800255c:	f001 ff08 	bl	8004370 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	4618      	mov	r0, r3
 8002566:	f001 f8ff 	bl	8003768 <xTaskPriorityInherit>
 800256a:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 800256c:	f001 ff30 	bl	80043d0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	3324      	adds	r3, #36	; 0x24
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fe5f 	bl	800323c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800257e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002580:	f000 f8e1 	bl	8002746 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002584:	f000 fbe0 	bl	8002d48 <xTaskResumeAll>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	f47f af76 	bne.w	800247c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <xQueueSemaphoreTake+0x1f8>)
 8002592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	e76c      	b.n	800247c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80025a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025a4:	f000 f8cf 	bl	8002746 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025a8:	f000 fbce 	bl	8002d48 <xTaskResumeAll>
 80025ac:	e766      	b.n	800247c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80025ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025b0:	f000 f8c9 	bl	8002746 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025b4:	f000 fbc8 	bl	8002d48 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025ba:	f000 f916 	bl	80027ea <prvIsQueueEmpty>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f43f af5b 	beq.w	800247c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80025c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00d      	beq.n	80025e8 <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 80025cc:	f001 fed0 	bl	8004370 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80025d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025d2:	f000 f811 	bl	80025f8 <prvGetDisinheritPriorityAfterTimeout>
 80025d6:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	69f9      	ldr	r1, [r7, #28]
 80025de:	4618      	mov	r0, r3
 80025e0:	f001 fa04 	bl	80039ec <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80025e4:	f001 fef4 	bl	80043d0 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80025e8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3730      	adds	r7, #48	; 0x30
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000ed04 	.word	0xe000ed04

080025f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	2b00      	cmp	r3, #0
 8002606:	d006      	beq.n	8002616 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f1c3 0305 	rsb	r3, r3, #5
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	e001      	b.n	800261a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800261a:	68fb      	ldr	r3, [r7, #12]
    }
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b086      	sub	sp, #24
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10d      	bne.n	8002660 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d14d      	bne.n	80026e8 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4618      	mov	r0, r3
 8002652:	f001 f927 	bl	80038a4 <xTaskPriorityDisinherit>
 8002656:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	e043      	b.n	80026e8 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d119      	bne.n	800269a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6858      	ldr	r0, [r3, #4]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	461a      	mov	r2, r3
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	f002 f933 	bl	80048dc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	441a      	add	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	429a      	cmp	r2, r3
 800268e:	d32b      	bcc.n	80026e8 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	e026      	b.n	80026e8 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	68d8      	ldr	r0, [r3, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	461a      	mov	r2, r3
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	f002 f919 	bl	80048dc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	425b      	negs	r3, r3
 80026b4:	441a      	add	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d207      	bcs.n	80026d6 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	425b      	negs	r3, r3
 80026d0:	441a      	add	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d105      	bne.n	80026e8 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80026f0:	697b      	ldr	r3, [r7, #20]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d018      	beq.n	800273e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	441a      	add	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	429a      	cmp	r2, r3
 8002724:	d303      	bcc.n	800272e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68d9      	ldr	r1, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	461a      	mov	r2, r3
 8002738:	6838      	ldr	r0, [r7, #0]
 800273a:	f002 f8cf 	bl	80048dc <memcpy>
    }
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800274e:	f001 fe0f 	bl	8004370 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002758:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800275a:	e011      	b.n	8002780 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	2b00      	cmp	r3, #0
 8002762:	d012      	beq.n	800278a <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3324      	adds	r3, #36	; 0x24
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fdd1 	bl	8003310 <xTaskRemoveFromEventList>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002774:	f000 ff1e 	bl	80035b4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	3b01      	subs	r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002784:	2b00      	cmp	r3, #0
 8002786:	dce9      	bgt.n	800275c <prvUnlockQueue+0x16>
 8002788:	e000      	b.n	800278c <prvUnlockQueue+0x46>
                    break;
 800278a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	22ff      	movs	r2, #255	; 0xff
 8002790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002794:	f001 fe1c 	bl	80043d0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002798:	f001 fdea 	bl	8004370 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027a2:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80027a4:	e011      	b.n	80027ca <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d012      	beq.n	80027d4 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3310      	adds	r3, #16
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fdac 	bl	8003310 <xTaskRemoveFromEventList>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80027be:	f000 fef9 	bl	80035b4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80027c2:	7bbb      	ldrb	r3, [r7, #14]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80027ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	dce9      	bgt.n	80027a6 <prvUnlockQueue+0x60>
 80027d2:	e000      	b.n	80027d6 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80027d4:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	22ff      	movs	r2, #255	; 0xff
 80027da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80027de:	f001 fdf7 	bl	80043d0 <vPortExitCritical>
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80027f2:	f001 fdbd 	bl	8004370 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d102      	bne.n	8002804 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80027fe:	2301      	movs	r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	e001      	b.n	8002808 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002808:	f001 fde2 	bl	80043d0 <vPortExitCritical>

    return xReturn;
 800280c:	68fb      	ldr	r3, [r7, #12]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800281e:	f001 fda7 	bl	8004370 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282a:	429a      	cmp	r2, r3
 800282c:	d102      	bne.n	8002834 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800282e:	2301      	movs	r3, #1
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	e001      	b.n	8002838 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002838:	f001 fdca 	bl	80043d0 <vPortExitCritical>

    return xReturn;
 800283c:	68fb      	ldr	r3, [r7, #12]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800285c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	60fb      	str	r3, [r7, #12]
    }
 800286e:	bf00      	nop
 8002870:	e7fe      	b.n	8002870 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d024      	beq.n	80028c2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	e01e      	b.n	80028bc <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800287e:	4a18      	ldr	r2, [pc, #96]	; (80028e0 <vQueueAddToRegistry+0x98>)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	429a      	cmp	r2, r3
 800288c:	d105      	bne.n	800289a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <vQueueAddToRegistry+0x98>)
 8002894:	4413      	add	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
                    break;
 8002898:	e013      	b.n	80028c2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <vQueueAddToRegistry+0x6e>
 80028a0:	4a0f      	ldr	r2, [pc, #60]	; (80028e0 <vQueueAddToRegistry+0x98>)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d104      	bne.n	80028b6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <vQueueAddToRegistry+0x98>)
 80028b2:	4413      	add	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	3301      	adds	r3, #1
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b07      	cmp	r3, #7
 80028c0:	d9dd      	bls.n	800287e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80028d4:	bf00      	nop
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	200000cc 	.word	0x200000cc

080028e4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80028f4:	f001 fd3c 	bl	8004370 <vPortEnterCritical>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028fe:	b25b      	sxtb	r3, r3
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d103      	bne.n	800290e <vQueueWaitForMessageRestricted+0x2a>
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002914:	b25b      	sxtb	r3, r3
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291a:	d103      	bne.n	8002924 <vQueueWaitForMessageRestricted+0x40>
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002924:	f001 fd54 	bl	80043d0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	2b00      	cmp	r3, #0
 800292e:	d106      	bne.n	800293e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3324      	adds	r3, #36	; 0x24
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fca3 	bl	8003284 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800293e:	6978      	ldr	r0, [r7, #20]
 8002940:	f7ff ff01 	bl	8002746 <prvUnlockQueue>
    }
 8002944:	bf00      	nop
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800294c:	b580      	push	{r7, lr}
 800294e:	b08c      	sub	sp, #48	; 0x30
 8002950:	af04      	add	r7, sp, #16
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4618      	mov	r0, r3
 8002962:	f001 fdc5 	bl	80044f0 <pvPortMalloc>
 8002966:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d013      	beq.n	8002996 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800296e:	2058      	movs	r0, #88	; 0x58
 8002970:	f001 fdbe 	bl	80044f0 <pvPortMalloc>
 8002974:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800297c:	2258      	movs	r2, #88	; 0x58
 800297e:	2100      	movs	r1, #0
 8002980:	69f8      	ldr	r0, [r7, #28]
 8002982:	f001 ff7f 	bl	8004884 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
 800298c:	e005      	b.n	800299a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800298e:	6978      	ldr	r0, [r7, #20]
 8002990:	f001 fe68 	bl	8004664 <vPortFree>
 8002994:	e001      	b.n	800299a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d013      	beq.n	80029c8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029a0:	88fa      	ldrh	r2, [r7, #6]
 80029a2:	2300      	movs	r3, #0
 80029a4:	9303      	str	r3, [sp, #12]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	9302      	str	r3, [sp, #8]
 80029aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ac:	9301      	str	r3, [sp, #4]
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f80e 	bl	80029d8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80029bc:	69f8      	ldr	r0, [r7, #28]
 80029be:	f000 f899 	bl	8002af4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80029c2:	2301      	movs	r3, #1
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	e002      	b.n	80029ce <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295
 80029cc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80029ce:	69bb      	ldr	r3, [r7, #24]
    }
 80029d0:	4618      	mov	r0, r3
 80029d2:	3720      	adds	r7, #32
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	461a      	mov	r2, r3
 80029f0:	21a5      	movs	r1, #165	; 0xa5
 80029f2:	f001 ff47 	bl	8004884 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a00:	3b01      	subs	r3, #1
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f023 0307 	bic.w	r3, r3, #7
 8002a0e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	617b      	str	r3, [r7, #20]
    }
 8002a2c:	bf00      	nop
 8002a2e:	e7fe      	b.n	8002a2e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01e      	beq.n	8002a74 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	e012      	b.n	8002a62 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4413      	add	r3, r2
 8002a42:	7819      	ldrb	r1, [r3, #0]
 8002a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	3334      	adds	r3, #52	; 0x34
 8002a4c:	460a      	mov	r2, r1
 8002a4e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	4413      	add	r3, r2
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d006      	beq.n	8002a6a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	2b09      	cmp	r3, #9
 8002a66:	d9e9      	bls.n	8002a3c <prvInitialiseNewTask+0x64>
 8002a68:	e000      	b.n	8002a6c <prvInitialiseNewTask+0x94>
            {
                break;
 8002a6a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d90a      	bls.n	8002a90 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	613b      	str	r3, [r7, #16]
    }
 8002a8c:	bf00      	nop
 8002a8e:	e7fe      	b.n	8002a8e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d901      	bls.n	8002a9a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a96:	2304      	movs	r3, #4
 8002a98:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aa4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff f927 	bl	8001cfe <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab2:	3318      	adds	r3, #24
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff f922 	bl	8001cfe <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002abe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	f1c3 0205 	rsb	r2, r3, #5
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	68f9      	ldr	r1, [r7, #12]
 8002ad4:	69b8      	ldr	r0, [r7, #24]
 8002ad6:	f001 fb57 	bl	8004188 <pxPortInitialiseStack>
 8002ada:	4602      	mov	r2, r0
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aea:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002aec:	bf00      	nop
 8002aee:	3720      	adds	r7, #32
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002afc:	f001 fc38 	bl	8004370 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b00:	4b40      	ldr	r3, [pc, #256]	; (8002c04 <prvAddNewTaskToReadyList+0x110>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	4a3f      	ldr	r2, [pc, #252]	; (8002c04 <prvAddNewTaskToReadyList+0x110>)
 8002b08:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b0a:	4b3f      	ldr	r3, [pc, #252]	; (8002c08 <prvAddNewTaskToReadyList+0x114>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b12:	4a3d      	ldr	r2, [pc, #244]	; (8002c08 <prvAddNewTaskToReadyList+0x114>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b18:	4b3a      	ldr	r3, [pc, #232]	; (8002c04 <prvAddNewTaskToReadyList+0x110>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d110      	bne.n	8002b42 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002b20:	f000 fd6c 	bl	80035fc <prvInitialiseTaskLists>
 8002b24:	e00d      	b.n	8002b42 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002b26:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <prvAddNewTaskToReadyList+0x118>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b2e:	4b36      	ldr	r3, [pc, #216]	; (8002c08 <prvAddNewTaskToReadyList+0x114>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d802      	bhi.n	8002b42 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002b3c:	4a32      	ldr	r2, [pc, #200]	; (8002c08 <prvAddNewTaskToReadyList+0x114>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002b42:	4b33      	ldr	r3, [pc, #204]	; (8002c10 <prvAddNewTaskToReadyList+0x11c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3301      	adds	r3, #1
 8002b48:	4a31      	ldr	r2, [pc, #196]	; (8002c10 <prvAddNewTaskToReadyList+0x11c>)
 8002b4a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b4c:	4b30      	ldr	r3, [pc, #192]	; (8002c10 <prvAddNewTaskToReadyList+0x11c>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	2201      	movs	r2, #1
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <prvAddNewTaskToReadyList+0x120>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	4a2c      	ldr	r2, [pc, #176]	; (8002c14 <prvAddNewTaskToReadyList+0x120>)
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6a:	492b      	ldr	r1, [pc, #172]	; (8002c18 <prvAddNewTaskToReadyList+0x124>)
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	3304      	adds	r3, #4
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	3204      	adds	r2, #4
 8002b92:	605a      	str	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	1d1a      	adds	r2, r3, #4
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4a1b      	ldr	r2, [pc, #108]	; (8002c18 <prvAddNewTaskToReadyList+0x124>)
 8002baa:	441a      	add	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	615a      	str	r2, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb4:	4918      	ldr	r1, [pc, #96]	; (8002c18 <prvAddNewTaskToReadyList+0x124>)
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	1c59      	adds	r1, r3, #1
 8002bc4:	4814      	ldr	r0, [pc, #80]	; (8002c18 <prvAddNewTaskToReadyList+0x124>)
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4403      	add	r3, r0
 8002bd0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002bd2:	f001 fbfd 	bl	80043d0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <prvAddNewTaskToReadyList+0x118>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00e      	beq.n	8002bfc <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <prvAddNewTaskToReadyList+0x114>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d207      	bcs.n	8002bfc <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <prvAddNewTaskToReadyList+0x128>)
 8002bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	200001e4 	.word	0x200001e4
 8002c08:	2000010c 	.word	0x2000010c
 8002c0c:	200001f0 	.word	0x200001f0
 8002c10:	20000200 	.word	0x20000200
 8002c14:	200001ec 	.word	0x200001ec
 8002c18:	20000110 	.word	0x20000110
 8002c1c:	e000ed04 	.word	0xe000ed04

08002c20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d017      	beq.n	8002c62 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002c32:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <vTaskDelay+0x60>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <vTaskDelay+0x30>
        __asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	60bb      	str	r3, [r7, #8]
    }
 8002c4c:	bf00      	nop
 8002c4e:	e7fe      	b.n	8002c4e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002c50:	f000 f86c 	bl	8002d2c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c54:	2100      	movs	r1, #0
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 ff94 	bl	8003b84 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002c5c:	f000 f874 	bl	8002d48 <xTaskResumeAll>
 8002c60:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d107      	bne.n	8002c78 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <vTaskDelay+0x64>)
 8002c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	2000020c 	.word	0x2000020c
 8002c84:	e000ed04 	.word	0xe000ed04

08002c88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <vTaskStartScheduler+0x88>)
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	2300      	movs	r3, #0
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	2300      	movs	r3, #0
 8002c98:	2282      	movs	r2, #130	; 0x82
 8002c9a:	491e      	ldr	r1, [pc, #120]	; (8002d14 <vTaskStartScheduler+0x8c>)
 8002c9c:	481e      	ldr	r0, [pc, #120]	; (8002d18 <vTaskStartScheduler+0x90>)
 8002c9e:	f7ff fe55 	bl	800294c <xTaskCreate>
 8002ca2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d102      	bne.n	8002cb0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002caa:	f000 ffeb 	bl	8003c84 <xTimerCreateTimerTask>
 8002cae:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d116      	bne.n	8002ce4 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	60bb      	str	r3, [r7, #8]
    }
 8002cc8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <vTaskStartScheduler+0x94>)
 8002ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002cd2:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <vTaskStartScheduler+0x98>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <vTaskStartScheduler+0x9c>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002cde:	f001 fad5 	bl	800428c <xPortStartScheduler>
 8002ce2:	e00e      	b.n	8002d02 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cea:	d10a      	bne.n	8002d02 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	607b      	str	r3, [r7, #4]
    }
 8002cfe:	bf00      	nop
 8002d00:	e7fe      	b.n	8002d00 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <vTaskStartScheduler+0xa0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
}
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000208 	.word	0x20000208
 8002d14:	0800494c 	.word	0x0800494c
 8002d18:	080035cd 	.word	0x080035cd
 8002d1c:	20000204 	.word	0x20000204
 8002d20:	200001f0 	.word	0x200001f0
 8002d24:	200001e8 	.word	0x200001e8
 8002d28:	2000000c 	.word	0x2000000c

08002d2c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <vTaskSuspendAll+0x18>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3301      	adds	r3, #1
 8002d36:	4a03      	ldr	r2, [pc, #12]	; (8002d44 <vTaskSuspendAll+0x18>)
 8002d38:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	2000020c 	.word	0x2000020c

08002d48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d56:	4b71      	ldr	r3, [pc, #452]	; (8002f1c <xTaskResumeAll+0x1d4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <xTaskResumeAll+0x2c>
        __asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	607b      	str	r3, [r7, #4]
    }
 8002d70:	bf00      	nop
 8002d72:	e7fe      	b.n	8002d72 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002d74:	f001 fafc 	bl	8004370 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002d78:	4b68      	ldr	r3, [pc, #416]	; (8002f1c <xTaskResumeAll+0x1d4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	4a67      	ldr	r2, [pc, #412]	; (8002f1c <xTaskResumeAll+0x1d4>)
 8002d80:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d82:	4b66      	ldr	r3, [pc, #408]	; (8002f1c <xTaskResumeAll+0x1d4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f040 80c0 	bne.w	8002f0c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d8c:	4b64      	ldr	r3, [pc, #400]	; (8002f20 <xTaskResumeAll+0x1d8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80bb 	beq.w	8002f0c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d96:	e08a      	b.n	8002eae <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d98:	4b62      	ldr	r3, [pc, #392]	; (8002f24 <xTaskResumeAll+0x1dc>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	6a12      	ldr	r2, [r2, #32]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	69d2      	ldr	r2, [r2, #28]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3318      	adds	r3, #24
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d103      	bne.n	8002dce <xTaskResumeAll+0x86>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	6a1a      	ldr	r2, [r3, #32]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	1e5a      	subs	r2, r3, #1
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	68d2      	ldr	r2, [r2, #12]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	6892      	ldr	r2, [r2, #8]
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d103      	bne.n	8002e0c <xTaskResumeAll+0xc4>
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	615a      	str	r2, [r3, #20]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	1e5a      	subs	r2, r3, #1
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	2201      	movs	r2, #1
 8002e22:	409a      	lsls	r2, r3
 8002e24:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <xTaskResumeAll+0x1e0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	4a3f      	ldr	r2, [pc, #252]	; (8002f28 <xTaskResumeAll+0x1e0>)
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e32:	493e      	ldr	r1, [pc, #248]	; (8002f2c <xTaskResumeAll+0x1e4>)
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3304      	adds	r3, #4
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	3204      	adds	r2, #4
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	1d1a      	adds	r2, r3, #4
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4a2e      	ldr	r2, [pc, #184]	; (8002f2c <xTaskResumeAll+0x1e4>)
 8002e72:	441a      	add	r2, r3
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	615a      	str	r2, [r3, #20]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7c:	492b      	ldr	r1, [pc, #172]	; (8002f2c <xTaskResumeAll+0x1e4>)
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	1c59      	adds	r1, r3, #1
 8002e8c:	4827      	ldr	r0, [pc, #156]	; (8002f2c <xTaskResumeAll+0x1e4>)
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4403      	add	r3, r0
 8002e98:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <xTaskResumeAll+0x1e8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d302      	bcc.n	8002eae <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002ea8:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <xTaskResumeAll+0x1ec>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002eae:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <xTaskResumeAll+0x1dc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f47f af70 	bne.w	8002d98 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ebe:	f000 fc1b 	bl	80036f8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <xTaskResumeAll+0x1f0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d010      	beq.n	8002ef0 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ece:	f000 f845 	bl	8002f5c <xTaskIncrementTick>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002ed8:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <xTaskResumeAll+0x1ec>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f1      	bne.n	8002ece <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002eea:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <xTaskResumeAll+0x1f0>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ef0:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <xTaskResumeAll+0x1ec>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d009      	beq.n	8002f0c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <xTaskResumeAll+0x1f4>)
 8002efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f0c:	f001 fa60 	bl	80043d0 <vPortExitCritical>

    return xAlreadyYielded;
 8002f10:	69bb      	ldr	r3, [r7, #24]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3720      	adds	r7, #32
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	2000020c 	.word	0x2000020c
 8002f20:	200001e4 	.word	0x200001e4
 8002f24:	200001a4 	.word	0x200001a4
 8002f28:	200001ec 	.word	0x200001ec
 8002f2c:	20000110 	.word	0x20000110
 8002f30:	2000010c 	.word	0x2000010c
 8002f34:	200001f8 	.word	0x200001f8
 8002f38:	200001f4 	.word	0x200001f4
 8002f3c:	e000ed04 	.word	0xe000ed04

08002f40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002f46:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <xTaskGetTickCount+0x18>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002f4c:	687b      	ldr	r3, [r7, #4]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	200001e8 	.word	0x200001e8

08002f5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f66:	4b7d      	ldr	r3, [pc, #500]	; (800315c <xTaskIncrementTick+0x200>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f040 80ec 	bne.w	8003148 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f70:	4b7b      	ldr	r3, [pc, #492]	; (8003160 <xTaskIncrementTick+0x204>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f78:	4a79      	ldr	r2, [pc, #484]	; (8003160 <xTaskIncrementTick+0x204>)
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d120      	bne.n	8002fc6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f84:	4b77      	ldr	r3, [pc, #476]	; (8003164 <xTaskIncrementTick+0x208>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <xTaskIncrementTick+0x48>
        __asm volatile
 8002f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	607b      	str	r3, [r7, #4]
    }
 8002fa0:	bf00      	nop
 8002fa2:	e7fe      	b.n	8002fa2 <xTaskIncrementTick+0x46>
 8002fa4:	4b6f      	ldr	r3, [pc, #444]	; (8003164 <xTaskIncrementTick+0x208>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	4b6f      	ldr	r3, [pc, #444]	; (8003168 <xTaskIncrementTick+0x20c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6d      	ldr	r2, [pc, #436]	; (8003164 <xTaskIncrementTick+0x208>)
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4a6d      	ldr	r2, [pc, #436]	; (8003168 <xTaskIncrementTick+0x20c>)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b6c      	ldr	r3, [pc, #432]	; (800316c <xTaskIncrementTick+0x210>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	4a6b      	ldr	r2, [pc, #428]	; (800316c <xTaskIncrementTick+0x210>)
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	f000 fb99 	bl	80036f8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002fc6:	4b6a      	ldr	r3, [pc, #424]	; (8003170 <xTaskIncrementTick+0x214>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a3a      	ldr	r2, [r7, #32]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	f0c0 80a6 	bcc.w	800311e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fd2:	4b64      	ldr	r3, [pc, #400]	; (8003164 <xTaskIncrementTick+0x208>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d104      	bne.n	8002fe6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fdc:	4b64      	ldr	r3, [pc, #400]	; (8003170 <xTaskIncrementTick+0x214>)
 8002fde:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe2:	601a      	str	r2, [r3, #0]
                    break;
 8002fe4:	e09b      	b.n	800311e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fe6:	4b5f      	ldr	r3, [pc, #380]	; (8003164 <xTaskIncrementTick+0x208>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002ff6:	6a3a      	ldr	r2, [r7, #32]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d203      	bcs.n	8003006 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002ffe:	4a5c      	ldr	r2, [pc, #368]	; (8003170 <xTaskIncrementTick+0x214>)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003004:	e08b      	b.n	800311e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	68d2      	ldr	r2, [r2, #12]
 8003014:	609a      	str	r2, [r3, #8]
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	6892      	ldr	r2, [r2, #8]
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	3304      	adds	r3, #4
 8003028:	429a      	cmp	r2, r3
 800302a:	d103      	bne.n	8003034 <xTaskIncrementTick+0xd8>
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2200      	movs	r2, #0
 8003038:	615a      	str	r2, [r3, #20]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	1e5a      	subs	r2, r3, #1
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01e      	beq.n	800308a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	6a12      	ldr	r2, [r2, #32]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	69d2      	ldr	r2, [r2, #28]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	3318      	adds	r3, #24
 800306e:	429a      	cmp	r2, r3
 8003070:	d103      	bne.n	800307a <xTaskIncrementTick+0x11e>
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	6a1a      	ldr	r2, [r3, #32]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2200      	movs	r2, #0
 800307e:	629a      	str	r2, [r3, #40]	; 0x28
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	1e5a      	subs	r2, r3, #1
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	2201      	movs	r2, #1
 8003090:	409a      	lsls	r2, r3
 8003092:	4b38      	ldr	r3, [pc, #224]	; (8003174 <xTaskIncrementTick+0x218>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4313      	orrs	r3, r2
 8003098:	4a36      	ldr	r2, [pc, #216]	; (8003174 <xTaskIncrementTick+0x218>)
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	4935      	ldr	r1, [pc, #212]	; (8003178 <xTaskIncrementTick+0x21c>)
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	3304      	adds	r3, #4
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	60da      	str	r2, [r3, #12]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	3204      	adds	r2, #4
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	1d1a      	adds	r2, r3, #4
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	609a      	str	r2, [r3, #8]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4a26      	ldr	r2, [pc, #152]	; (8003178 <xTaskIncrementTick+0x21c>)
 80030e0:	441a      	add	r2, r3
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	615a      	str	r2, [r3, #20]
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ea:	4923      	ldr	r1, [pc, #140]	; (8003178 <xTaskIncrementTick+0x21c>)
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	1c59      	adds	r1, r3, #1
 80030fa:	481f      	ldr	r0, [pc, #124]	; (8003178 <xTaskIncrementTick+0x21c>)
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4403      	add	r3, r0
 8003106:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310c:	4b1b      	ldr	r3, [pc, #108]	; (800317c <xTaskIncrementTick+0x220>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	429a      	cmp	r2, r3
 8003114:	f67f af5d 	bls.w	8002fd2 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003118:	2301      	movs	r3, #1
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800311c:	e759      	b.n	8002fd2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800311e:	4b17      	ldr	r3, [pc, #92]	; (800317c <xTaskIncrementTick+0x220>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003124:	4914      	ldr	r1, [pc, #80]	; (8003178 <xTaskIncrementTick+0x21c>)
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d901      	bls.n	800313a <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8003136:	2301      	movs	r3, #1
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800313a:	4b11      	ldr	r3, [pc, #68]	; (8003180 <xTaskIncrementTick+0x224>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d007      	beq.n	8003152 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8003142:	2301      	movs	r3, #1
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
 8003146:	e004      	b.n	8003152 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003148:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <xTaskIncrementTick+0x228>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	4a0d      	ldr	r2, [pc, #52]	; (8003184 <xTaskIncrementTick+0x228>)
 8003150:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003154:	4618      	mov	r0, r3
 8003156:	3728      	adds	r7, #40	; 0x28
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	2000020c 	.word	0x2000020c
 8003160:	200001e8 	.word	0x200001e8
 8003164:	2000019c 	.word	0x2000019c
 8003168:	200001a0 	.word	0x200001a0
 800316c:	200001fc 	.word	0x200001fc
 8003170:	20000204 	.word	0x20000204
 8003174:	200001ec 	.word	0x200001ec
 8003178:	20000110 	.word	0x20000110
 800317c:	2000010c 	.word	0x2000010c
 8003180:	200001f8 	.word	0x200001f8
 8003184:	200001f4 	.word	0x200001f4

08003188 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <vTaskSwitchContext+0xa0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003196:	4b25      	ldr	r3, [pc, #148]	; (800322c <vTaskSwitchContext+0xa4>)
 8003198:	2201      	movs	r2, #1
 800319a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800319c:	e03f      	b.n	800321e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800319e:	4b23      	ldr	r3, [pc, #140]	; (800322c <vTaskSwitchContext+0xa4>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031a4:	4b22      	ldr	r3, [pc, #136]	; (8003230 <vTaskSwitchContext+0xa8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80031b2:	7afb      	ldrb	r3, [r7, #11]
 80031b4:	f1c3 031f 	rsb	r3, r3, #31
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	491e      	ldr	r1, [pc, #120]	; (8003234 <vTaskSwitchContext+0xac>)
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	607b      	str	r3, [r7, #4]
    }
 80031e0:	bf00      	nop
 80031e2:	e7fe      	b.n	80031e2 <vTaskSwitchContext+0x5a>
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4a11      	ldr	r2, [pc, #68]	; (8003234 <vTaskSwitchContext+0xac>)
 80031f0:	4413      	add	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	3308      	adds	r3, #8
 8003206:	429a      	cmp	r2, r3
 8003208:	d104      	bne.n	8003214 <vTaskSwitchContext+0x8c>
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	605a      	str	r2, [r3, #4]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	4a07      	ldr	r2, [pc, #28]	; (8003238 <vTaskSwitchContext+0xb0>)
 800321c:	6013      	str	r3, [r2, #0]
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	2000020c 	.word	0x2000020c
 800322c:	200001f8 	.word	0x200001f8
 8003230:	200001ec 	.word	0x200001ec
 8003234:	20000110 	.word	0x20000110
 8003238:	2000010c 	.word	0x2000010c

0800323c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	60fb      	str	r3, [r7, #12]
    }
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <vTaskPlaceOnEventList+0x44>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3318      	adds	r3, #24
 8003268:	4619      	mov	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fe fd53 	bl	8001d16 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003270:	2101      	movs	r1, #1
 8003272:	6838      	ldr	r0, [r7, #0]
 8003274:	f000 fc86 	bl	8003b84 <prvAddCurrentTaskToDelayedList>
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	2000010c 	.word	0x2000010c

08003284 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	613b      	str	r3, [r7, #16]
    }
 80032a8:	bf00      	nop
 80032aa:	e7fe      	b.n	80032aa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	4b16      	ldr	r3, [pc, #88]	; (800330c <vTaskPlaceOnEventListRestricted+0x88>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	61da      	str	r2, [r3, #28]
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <vTaskPlaceOnEventListRestricted+0x88>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	6892      	ldr	r2, [r2, #8]
 80032c2:	621a      	str	r2, [r3, #32]
 80032c4:	4b11      	ldr	r3, [pc, #68]	; (800330c <vTaskPlaceOnEventListRestricted+0x88>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	3218      	adds	r2, #24
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	4b0e      	ldr	r3, [pc, #56]	; (800330c <vTaskPlaceOnEventListRestricted+0x88>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f103 0218 	add.w	r2, r3, #24
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <vTaskPlaceOnEventListRestricted+0x88>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80032f4:	f04f 33ff 	mov.w	r3, #4294967295
 80032f8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	68b8      	ldr	r0, [r7, #8]
 80032fe:	f000 fc41 	bl	8003b84 <prvAddCurrentTaskToDelayedList>
    }
 8003302:	bf00      	nop
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	2000010c 	.word	0x2000010c

08003310 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003310:	b480      	push	{r7}
 8003312:	b08b      	sub	sp, #44	; 0x2c
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332a:	f383 8811 	msr	BASEPRI, r3
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	60fb      	str	r3, [r7, #12]
    }
 8003338:	bf00      	nop
 800333a:	e7fe      	b.n	800333a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	6a3a      	ldr	r2, [r7, #32]
 8003348:	6a12      	ldr	r2, [r2, #32]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	6a3a      	ldr	r2, [r7, #32]
 8003352:	69d2      	ldr	r2, [r2, #28]
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	3318      	adds	r3, #24
 800335e:	429a      	cmp	r2, r3
 8003360:	d103      	bne.n	800336a <xTaskRemoveFromEventList+0x5a>
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	6a1a      	ldr	r2, [r3, #32]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	2200      	movs	r2, #0
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	1e5a      	subs	r2, r3, #1
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800337a:	4b4a      	ldr	r3, [pc, #296]	; (80034a4 <xTaskRemoveFromEventList+0x194>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d15e      	bne.n	8003440 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	6a3a      	ldr	r2, [r7, #32]
 800338e:	68d2      	ldr	r2, [r2, #12]
 8003390:	609a      	str	r2, [r3, #8]
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	6a3a      	ldr	r2, [r7, #32]
 8003398:	6892      	ldr	r2, [r2, #8]
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	3304      	adds	r3, #4
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d103      	bne.n	80033b0 <xTaskRemoveFromEventList+0xa0>
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	605a      	str	r2, [r3, #4]
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	2200      	movs	r2, #0
 80033b4:	615a      	str	r2, [r3, #20]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	1e5a      	subs	r2, r3, #1
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	2201      	movs	r2, #1
 80033c6:	409a      	lsls	r2, r3
 80033c8:	4b37      	ldr	r3, [pc, #220]	; (80034a8 <xTaskRemoveFromEventList+0x198>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	4a36      	ldr	r2, [pc, #216]	; (80034a8 <xTaskRemoveFromEventList+0x198>)
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d6:	4935      	ldr	r1, [pc, #212]	; (80034ac <xTaskRemoveFromEventList+0x19c>)
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	3304      	adds	r3, #4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	6a3a      	ldr	r2, [r7, #32]
 80033fc:	3204      	adds	r2, #4
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	1d1a      	adds	r2, r3, #4
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4a25      	ldr	r2, [pc, #148]	; (80034ac <xTaskRemoveFromEventList+0x19c>)
 8003416:	441a      	add	r2, r3
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	615a      	str	r2, [r3, #20]
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003420:	4922      	ldr	r1, [pc, #136]	; (80034ac <xTaskRemoveFromEventList+0x19c>)
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	1c59      	adds	r1, r3, #1
 8003430:	481e      	ldr	r0, [pc, #120]	; (80034ac <xTaskRemoveFromEventList+0x19c>)
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4403      	add	r3, r0
 800343c:	6019      	str	r1, [r3, #0]
 800343e:	e01b      	b.n	8003478 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003440:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <xTaskRemoveFromEventList+0x1a0>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	61da      	str	r2, [r3, #28]
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	621a      	str	r2, [r3, #32]
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	6a3a      	ldr	r2, [r7, #32]
 800345a:	3218      	adds	r2, #24
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	f103 0218 	add.w	r2, r3, #24
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	4a11      	ldr	r2, [pc, #68]	; (80034b0 <xTaskRemoveFromEventList+0x1a0>)
 800346c:	629a      	str	r2, [r3, #40]	; 0x28
 800346e:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <xTaskRemoveFromEventList+0x1a0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3301      	adds	r3, #1
 8003474:	4a0e      	ldr	r2, [pc, #56]	; (80034b0 <xTaskRemoveFromEventList+0x1a0>)
 8003476:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <xTaskRemoveFromEventList+0x1a4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	429a      	cmp	r2, r3
 8003484:	d905      	bls.n	8003492 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003486:	2301      	movs	r3, #1
 8003488:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <xTaskRemoveFromEventList+0x1a8>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e001      	b.n	8003496 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8003492:	2300      	movs	r3, #0
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003498:	4618      	mov	r0, r3
 800349a:	372c      	adds	r7, #44	; 0x2c
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	2000020c 	.word	0x2000020c
 80034a8:	200001ec 	.word	0x200001ec
 80034ac:	20000110 	.word	0x20000110
 80034b0:	200001a4 	.word	0x200001a4
 80034b4:	2000010c 	.word	0x2000010c
 80034b8:	200001f8 	.word	0x200001f8

080034bc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <vTaskInternalSetTimeOutState+0x24>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <vTaskInternalSetTimeOutState+0x28>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	605a      	str	r2, [r3, #4]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	200001fc 	.word	0x200001fc
 80034e4:	200001e8 	.word	0x200001e8

080034e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	613b      	str	r3, [r7, #16]
    }
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	60fb      	str	r3, [r7, #12]
    }
 8003526:	bf00      	nop
 8003528:	e7fe      	b.n	8003528 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800352a:	f000 ff21 	bl	8004370 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800352e:	4b1f      	ldr	r3, [pc, #124]	; (80035ac <xTaskCheckForTimeOut+0xc4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d102      	bne.n	800354e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	e026      	b.n	800359c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <xTaskCheckForTimeOut+0xc8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d00a      	beq.n	8003570 <xTaskCheckForTimeOut+0x88>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	429a      	cmp	r2, r3
 8003562:	d305      	bcc.n	8003570 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003564:	2301      	movs	r3, #1
 8003566:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e015      	b.n	800359c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	429a      	cmp	r2, r3
 8003578:	d20b      	bcs.n	8003592 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	1ad2      	subs	r2, r2, r3
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ff98 	bl	80034bc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800358c:	2300      	movs	r3, #0
 800358e:	61fb      	str	r3, [r7, #28]
 8003590:	e004      	b.n	800359c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003598:	2301      	movs	r3, #1
 800359a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800359c:	f000 ff18 	bl	80043d0 <vPortExitCritical>

    return xReturn;
 80035a0:	69fb      	ldr	r3, [r7, #28]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	200001e8 	.word	0x200001e8
 80035b0:	200001fc 	.word	0x200001fc

080035b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <vTaskMissedYield+0x14>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	200001f8 	.word	0x200001f8

080035cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80035d4:	f000 f852 	bl	800367c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035d8:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <prvIdleTask+0x28>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d9f9      	bls.n	80035d4 <prvIdleTask+0x8>
            {
                taskYIELD();
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <prvIdleTask+0x2c>)
 80035e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80035f0:	e7f0      	b.n	80035d4 <prvIdleTask+0x8>
 80035f2:	bf00      	nop
 80035f4:	20000110 	.word	0x20000110
 80035f8:	e000ed04 	.word	0xe000ed04

080035fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003602:	2300      	movs	r3, #0
 8003604:	607b      	str	r3, [r7, #4]
 8003606:	e00c      	b.n	8003622 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4a12      	ldr	r2, [pc, #72]	; (800365c <prvInitialiseTaskLists+0x60>)
 8003614:	4413      	add	r3, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f7fe fb52 	bl	8001cc0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3301      	adds	r3, #1
 8003620:	607b      	str	r3, [r7, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b04      	cmp	r3, #4
 8003626:	d9ef      	bls.n	8003608 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003628:	480d      	ldr	r0, [pc, #52]	; (8003660 <prvInitialiseTaskLists+0x64>)
 800362a:	f7fe fb49 	bl	8001cc0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800362e:	480d      	ldr	r0, [pc, #52]	; (8003664 <prvInitialiseTaskLists+0x68>)
 8003630:	f7fe fb46 	bl	8001cc0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003634:	480c      	ldr	r0, [pc, #48]	; (8003668 <prvInitialiseTaskLists+0x6c>)
 8003636:	f7fe fb43 	bl	8001cc0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800363a:	480c      	ldr	r0, [pc, #48]	; (800366c <prvInitialiseTaskLists+0x70>)
 800363c:	f7fe fb40 	bl	8001cc0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003640:	480b      	ldr	r0, [pc, #44]	; (8003670 <prvInitialiseTaskLists+0x74>)
 8003642:	f7fe fb3d 	bl	8001cc0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <prvInitialiseTaskLists+0x78>)
 8003648:	4a05      	ldr	r2, [pc, #20]	; (8003660 <prvInitialiseTaskLists+0x64>)
 800364a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <prvInitialiseTaskLists+0x7c>)
 800364e:	4a05      	ldr	r2, [pc, #20]	; (8003664 <prvInitialiseTaskLists+0x68>)
 8003650:	601a      	str	r2, [r3, #0]
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000110 	.word	0x20000110
 8003660:	20000174 	.word	0x20000174
 8003664:	20000188 	.word	0x20000188
 8003668:	200001a4 	.word	0x200001a4
 800366c:	200001b8 	.word	0x200001b8
 8003670:	200001d0 	.word	0x200001d0
 8003674:	2000019c 	.word	0x2000019c
 8003678:	200001a0 	.word	0x200001a0

0800367c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003682:	e019      	b.n	80036b8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003684:	f000 fe74 	bl	8004370 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003688:	4b10      	ldr	r3, [pc, #64]	; (80036cc <prvCheckTasksWaitingTermination+0x50>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3304      	adds	r3, #4
 8003694:	4618      	mov	r0, r3
 8003696:	f7fe fb76 	bl	8001d86 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <prvCheckTasksWaitingTermination+0x54>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3b01      	subs	r3, #1
 80036a0:	4a0b      	ldr	r2, [pc, #44]	; (80036d0 <prvCheckTasksWaitingTermination+0x54>)
 80036a2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <prvCheckTasksWaitingTermination+0x58>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <prvCheckTasksWaitingTermination+0x58>)
 80036ac:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80036ae:	f000 fe8f 	bl	80043d0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f810 	bl	80036d8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <prvCheckTasksWaitingTermination+0x58>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e1      	bne.n	8003684 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200001b8 	.word	0x200001b8
 80036d0:	200001e4 	.word	0x200001e4
 80036d4:	200001cc 	.word	0x200001cc

080036d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 ffbd 	bl	8004664 <vPortFree>
            vPortFree( pxTCB );
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 ffba 	bl	8004664 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <prvResetNextTaskUnblockTime+0x2c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d104      	bne.n	8003710 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003706:	4b08      	ldr	r3, [pc, #32]	; (8003728 <prvResetNextTaskUnblockTime+0x30>)
 8003708:	f04f 32ff 	mov.w	r2, #4294967295
 800370c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800370e:	e005      	b.n	800371c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <prvResetNextTaskUnblockTime+0x2c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a03      	ldr	r2, [pc, #12]	; (8003728 <prvResetNextTaskUnblockTime+0x30>)
 800371a:	6013      	str	r3, [r2, #0]
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	2000019c 	.word	0x2000019c
 8003728:	20000204 	.word	0x20000204

0800372c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <xTaskGetSchedulerState+0x34>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d102      	bne.n	8003740 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800373a:	2301      	movs	r3, #1
 800373c:	607b      	str	r3, [r7, #4]
 800373e:	e008      	b.n	8003752 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003740:	4b08      	ldr	r3, [pc, #32]	; (8003764 <xTaskGetSchedulerState+0x38>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003748:	2302      	movs	r3, #2
 800374a:	607b      	str	r3, [r7, #4]
 800374c:	e001      	b.n	8003752 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800374e:	2300      	movs	r3, #0
 8003750:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003752:	687b      	ldr	r3, [r7, #4]
    }
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	200001f0 	.word	0x200001f0
 8003764:	2000020c 	.word	0x2000020c

08003768 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 8087 	beq.w	800388e <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	4b44      	ldr	r3, [pc, #272]	; (8003898 <xTaskPriorityInherit+0x130>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	429a      	cmp	r2, r3
 800378c:	d276      	bcs.n	800387c <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	db06      	blt.n	80037a4 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003796:	4b40      	ldr	r3, [pc, #256]	; (8003898 <xTaskPriorityInherit+0x130>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	f1c3 0205 	rsb	r2, r3, #5
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	6959      	ldr	r1, [r3, #20]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4a39      	ldr	r2, [pc, #228]	; (800389c <xTaskPriorityInherit+0x134>)
 80037b6:	4413      	add	r3, r2
 80037b8:	4299      	cmp	r1, r3
 80037ba:	d157      	bne.n	800386c <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	3304      	adds	r3, #4
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe fae0 	bl	8001d86 <uxListRemove>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	2201      	movs	r2, #1
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43da      	mvns	r2, r3
 80037d8:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <xTaskPriorityInherit+0x138>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4013      	ands	r3, r2
 80037de:	4a30      	ldr	r2, [pc, #192]	; (80038a0 <xTaskPriorityInherit+0x138>)
 80037e0:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80037e2:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <xTaskPriorityInherit+0x130>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	2201      	movs	r2, #1
 80037f2:	409a      	lsls	r2, r3
 80037f4:	4b2a      	ldr	r3, [pc, #168]	; (80038a0 <xTaskPriorityInherit+0x138>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	4a29      	ldr	r2, [pc, #164]	; (80038a0 <xTaskPriorityInherit+0x138>)
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003802:	4926      	ldr	r1, [pc, #152]	; (800389c <xTaskPriorityInherit+0x134>)
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	3304      	adds	r3, #4
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	609a      	str	r2, [r3, #8]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	3204      	adds	r2, #4
 800382a:	605a      	str	r2, [r3, #4]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1d1a      	adds	r2, r3, #4
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4a16      	ldr	r2, [pc, #88]	; (800389c <xTaskPriorityInherit+0x134>)
 8003842:	441a      	add	r2, r3
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	615a      	str	r2, [r3, #20]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384c:	4913      	ldr	r1, [pc, #76]	; (800389c <xTaskPriorityInherit+0x134>)
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	1c59      	adds	r1, r3, #1
 800385c:	480f      	ldr	r0, [pc, #60]	; (800389c <xTaskPriorityInherit+0x134>)
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4403      	add	r3, r0
 8003868:	6019      	str	r1, [r3, #0]
 800386a:	e004      	b.n	8003876 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <xTaskPriorityInherit+0x130>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003876:	2301      	movs	r3, #1
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	e008      	b.n	800388e <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <xTaskPriorityInherit+0x130>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	429a      	cmp	r2, r3
 8003888:	d201      	bcs.n	800388e <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800388a:	2301      	movs	r3, #1
 800388c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800388e:	697b      	ldr	r3, [r7, #20]
    }
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	2000010c 	.word	0x2000010c
 800389c:	20000110 	.word	0x20000110
 80038a0:	200001ec 	.word	0x200001ec

080038a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 808c 	beq.w	80039d4 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80038bc:	4b48      	ldr	r3, [pc, #288]	; (80039e0 <xTaskPriorityDisinherit+0x13c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d00a      	beq.n	80038dc <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80038c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ca:	f383 8811 	msr	BASEPRI, r3
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	613b      	str	r3, [r7, #16]
    }
 80038d8:	bf00      	nop
 80038da:	e7fe      	b.n	80038da <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <xTaskPriorityDisinherit+0x56>
        __asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	60fb      	str	r3, [r7, #12]
    }
 80038f6:	bf00      	nop
 80038f8:	e7fe      	b.n	80038f8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fe:	1e5a      	subs	r2, r3, #1
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390c:	429a      	cmp	r2, r3
 800390e:	d061      	beq.n	80039d4 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d15d      	bne.n	80039d4 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	3304      	adds	r3, #4
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe fa32 	bl	8001d86 <uxListRemove>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	2201      	movs	r2, #1
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43da      	mvns	r2, r3
 8003934:	4b2b      	ldr	r3, [pc, #172]	; (80039e4 <xTaskPriorityDisinherit+0x140>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4013      	ands	r3, r2
 800393a:	4a2a      	ldr	r2, [pc, #168]	; (80039e4 <xTaskPriorityDisinherit+0x140>)
 800393c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	f1c3 0205 	rsb	r2, r3, #5
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003956:	2201      	movs	r2, #1
 8003958:	409a      	lsls	r2, r3
 800395a:	4b22      	ldr	r3, [pc, #136]	; (80039e4 <xTaskPriorityDisinherit+0x140>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4313      	orrs	r3, r2
 8003960:	4a20      	ldr	r2, [pc, #128]	; (80039e4 <xTaskPriorityDisinherit+0x140>)
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	491f      	ldr	r1, [pc, #124]	; (80039e8 <xTaskPriorityDisinherit+0x144>)
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	3304      	adds	r3, #4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	60da      	str	r2, [r3, #12]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	3204      	adds	r2, #4
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	1d1a      	adds	r2, r3, #4
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399e:	4613      	mov	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4a10      	ldr	r2, [pc, #64]	; (80039e8 <xTaskPriorityDisinherit+0x144>)
 80039a8:	441a      	add	r2, r3
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	615a      	str	r2, [r3, #20]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b2:	490d      	ldr	r1, [pc, #52]	; (80039e8 <xTaskPriorityDisinherit+0x144>)
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	1c59      	adds	r1, r3, #1
 80039c2:	4809      	ldr	r0, [pc, #36]	; (80039e8 <xTaskPriorityDisinherit+0x144>)
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4403      	add	r3, r0
 80039ce:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80039d0:	2301      	movs	r3, #1
 80039d2:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80039d4:	69fb      	ldr	r3, [r7, #28]
    }
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	2000010c 	.word	0x2000010c
 80039e4:	200001ec 	.word	0x200001ec
 80039e8:	20000110 	.word	0x20000110

080039ec <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80039fa:	2301      	movs	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80a1 	beq.w	8003b48 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	613b      	str	r3, [r7, #16]
    }
 8003a20:	bf00      	nop
 8003a22:	e7fe      	b.n	8003a22 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d902      	bls.n	8003a34 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
 8003a32:	e002      	b.n	8003a3a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a40:	429a      	cmp	r2, r3
 8003a42:	f000 8081 	beq.w	8003b48 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d17b      	bne.n	8003b48 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8003a50:	4b3f      	ldr	r3, [pc, #252]	; (8003b50 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6a3a      	ldr	r2, [r7, #32]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d10a      	bne.n	8003a70 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8003a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	60fb      	str	r3, [r7, #12]
    }
 8003a6c:	bf00      	nop
 8003a6e:	e7fe      	b.n	8003a6e <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	db04      	blt.n	8003a8e <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	f1c3 0205 	rsb	r2, r3, #5
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	6959      	ldr	r1, [r3, #20]
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4a2d      	ldr	r2, [pc, #180]	; (8003b54 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003a9e:	4413      	add	r3, r2
 8003aa0:	4299      	cmp	r1, r3
 8003aa2:	d151      	bne.n	8003b48 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fe f96c 	bl	8001d86 <uxListRemove>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	2201      	movs	r2, #1
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	4a24      	ldr	r2, [pc, #144]	; (8003b58 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8003ac8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	2201      	movs	r2, #1
 8003ad0:	409a      	lsls	r2, r3
 8003ad2:	4b21      	ldr	r3, [pc, #132]	; (8003b58 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	4a1f      	ldr	r2, [pc, #124]	; (8003b58 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae0:	491c      	ldr	r1, [pc, #112]	; (8003b54 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	3304      	adds	r3, #4
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	60da      	str	r2, [r3, #12]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	6a3a      	ldr	r2, [r7, #32]
 8003b06:	3204      	adds	r2, #4
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	1d1a      	adds	r2, r3, #4
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	609a      	str	r2, [r3, #8]
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4a0d      	ldr	r2, [pc, #52]	; (8003b54 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003b20:	441a      	add	r2, r3
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	615a      	str	r2, [r3, #20]
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2a:	490a      	ldr	r1, [pc, #40]	; (8003b54 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	1c59      	adds	r1, r3, #1
 8003b3a:	4806      	ldr	r0, [pc, #24]	; (8003b54 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4403      	add	r3, r0
 8003b46:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003b48:	bf00      	nop
 8003b4a:	3728      	adds	r7, #40	; 0x28
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	2000010c 	.word	0x2000010c
 8003b54:	20000110 	.word	0x20000110
 8003b58:	200001ec 	.word	0x200001ec

08003b5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <pvTaskIncrementMutexHeldCount+0x24>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d004      	beq.n	8003b72 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <pvTaskIncrementMutexHeldCount+0x24>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b6e:	3201      	adds	r2, #1
 8003b70:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8003b72:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <pvTaskIncrementMutexHeldCount+0x24>)
 8003b74:	681b      	ldr	r3, [r3, #0]
    }
 8003b76:	4618      	mov	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	2000010c 	.word	0x2000010c

08003b84 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b8e:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b94:	4b35      	ldr	r3, [pc, #212]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe f8f3 	bl	8001d86 <uxListRemove>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10b      	bne.n	8003bbe <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ba6:	4b31      	ldr	r3, [pc, #196]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	2201      	movs	r2, #1
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43da      	mvns	r2, r3
 8003bb4:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <prvAddCurrentTaskToDelayedList+0xec>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	4a2d      	ldr	r2, [pc, #180]	; (8003c70 <prvAddCurrentTaskToDelayedList+0xec>)
 8003bbc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d124      	bne.n	8003c10 <prvAddCurrentTaskToDelayedList+0x8c>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d021      	beq.n	8003c10 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bcc:	4b29      	ldr	r3, [pc, #164]	; (8003c74 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	4b26      	ldr	r3, [pc, #152]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	609a      	str	r2, [r3, #8]
 8003bda:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	6892      	ldr	r2, [r2, #8]
 8003be2:	60da      	str	r2, [r3, #12]
 8003be4:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	3204      	adds	r2, #4
 8003bee:	605a      	str	r2, [r3, #4]
 8003bf0:	4b1e      	ldr	r3, [pc, #120]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	1d1a      	adds	r2, r3, #4
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	609a      	str	r2, [r3, #8]
 8003bfa:	4b1c      	ldr	r3, [pc, #112]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1d      	ldr	r2, [pc, #116]	; (8003c74 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c00:	615a      	str	r2, [r3, #20]
 8003c02:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3301      	adds	r3, #1
 8003c08:	4a1a      	ldr	r2, [pc, #104]	; (8003c74 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003c0e:	e026      	b.n	8003c5e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c18:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d209      	bcs.n	8003c3c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c28:	4b13      	ldr	r3, [pc, #76]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3304      	adds	r3, #4
 8003c32:	4619      	mov	r1, r3
 8003c34:	4610      	mov	r0, r2
 8003c36:	f7fe f86e 	bl	8001d16 <vListInsert>
}
 8003c3a:	e010      	b.n	8003c5e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <prvAddCurrentTaskToDelayedList+0xf8>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f7fe f864 	bl	8001d16 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003c4e:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d202      	bcs.n	8003c5e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003c58:	4a09      	ldr	r2, [pc, #36]	; (8003c80 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6013      	str	r3, [r2, #0]
}
 8003c5e:	bf00      	nop
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	200001e8 	.word	0x200001e8
 8003c6c:	2000010c 	.word	0x2000010c
 8003c70:	200001ec 	.word	0x200001ec
 8003c74:	200001d0 	.word	0x200001d0
 8003c78:	200001a0 	.word	0x200001a0
 8003c7c:	2000019c 	.word	0x2000019c
 8003c80:	20000204 	.word	0x20000204

08003c84 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c8e:	f000 fa45 	bl	800411c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c92:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <xTimerCreateTimerTask+0x54>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <xTimerCreateTimerTask+0x58>)
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ca8:	490d      	ldr	r1, [pc, #52]	; (8003ce0 <xTimerCreateTimerTask+0x5c>)
 8003caa:	480e      	ldr	r0, [pc, #56]	; (8003ce4 <xTimerCreateTimerTask+0x60>)
 8003cac:	f7fe fe4e 	bl	800294c <xTaskCreate>
 8003cb0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10a      	bne.n	8003cce <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	603b      	str	r3, [r7, #0]
    }
 8003cca:	bf00      	nop
 8003ccc:	e7fe      	b.n	8003ccc <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003cce:	687b      	ldr	r3, [r7, #4]
    }
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000240 	.word	0x20000240
 8003cdc:	20000244 	.word	0x20000244
 8003ce0:	08004954 	.word	0x08004954
 8003ce4:	08003d8d 	.word	0x08003d8d

08003ce8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003cf4:	e008      	b.n	8003d08 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	18d1      	adds	r1, r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f8db 	bl	8003ed0 <prvInsertTimerInActiveList>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1ea      	bne.n	8003cf6 <prvReloadTimer+0xe>
        }
    }
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d36:	4b14      	ldr	r3, [pc, #80]	; (8003d88 <prvProcessExpiredTimer+0x5c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3304      	adds	r3, #4
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fe f81e 	bl	8001d86 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f7ff ffc3 	bl	8003ce8 <prvReloadTimer>
 8003d62:	e008      	b.n	8003d76 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	4798      	blx	r3
    }
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000238 	.word	0x20000238

08003d8c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d94:	f107 0308 	add.w	r3, r7, #8
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 f857 	bl	8003e4c <prvGetNextExpireTime>
 8003d9e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4619      	mov	r1, r3
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f803 	bl	8003db0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003daa:	f000 f8d3 	bl	8003f54 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003dae:	e7f1      	b.n	8003d94 <prvTimerTask+0x8>

08003db0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003dba:	f7fe ffb7 	bl	8002d2c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dbe:	f107 0308 	add.w	r3, r7, #8
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 f864 	bl	8003e90 <prvSampleTimeNow>
 8003dc8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d130      	bne.n	8003e32 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <prvProcessTimerOrBlockTask+0x3c>
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d806      	bhi.n	8003dec <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003dde:	f7fe ffb3 	bl	8002d48 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003de2:	68f9      	ldr	r1, [r7, #12]
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff ffa1 	bl	8003d2c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003dea:	e024      	b.n	8003e36 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003df2:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <prvProcessTimerOrBlockTask+0x90>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <prvProcessTimerOrBlockTask+0x50>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <prvProcessTimerOrBlockTask+0x52>
 8003e00:	2300      	movs	r3, #0
 8003e02:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e04:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <prvProcessTimerOrBlockTask+0x94>)
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	4619      	mov	r1, r3
 8003e12:	f7fe fd67 	bl	80028e4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003e16:	f7fe ff97 	bl	8002d48 <xTaskResumeAll>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <prvProcessTimerOrBlockTask+0x98>)
 8003e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	f3bf 8f6f 	isb	sy
    }
 8003e30:	e001      	b.n	8003e36 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003e32:	f7fe ff89 	bl	8002d48 <xTaskResumeAll>
    }
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	2000023c 	.word	0x2000023c
 8003e44:	20000240 	.word	0x20000240
 8003e48:	e000ed04 	.word	0xe000ed04

08003e4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e54:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <prvGetNextExpireTime+0x40>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <prvGetNextExpireTime+0x16>
 8003e5e:	2201      	movs	r2, #1
 8003e60:	e000      	b.n	8003e64 <prvGetNextExpireTime+0x18>
 8003e62:	2200      	movs	r2, #0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e70:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <prvGetNextExpireTime+0x40>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	e001      	b.n	8003e80 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e80:	68fb      	ldr	r3, [r7, #12]
    }
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr
 8003e8c:	20000238 	.word	0x20000238

08003e90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e98:	f7ff f852 	bl	8002f40 <xTaskGetTickCount>
 8003e9c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <prvSampleTimeNow+0x3c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d205      	bcs.n	8003eb4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ea8:	f000 f912 	bl	80040d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e002      	b.n	8003eba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003eba:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <prvSampleTimeNow+0x3c>)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000248 	.word	0x20000248

08003ed0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d812      	bhi.n	8003f1c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	1ad2      	subs	r2, r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d302      	bcc.n	8003f0a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	e01b      	b.n	8003f42 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f0a:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <prvInsertTimerInActiveList+0x7c>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f7fd fefe 	bl	8001d16 <vListInsert>
 8003f1a:	e012      	b.n	8003f42 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d206      	bcs.n	8003f32 <prvInsertTimerInActiveList+0x62>
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d302      	bcc.n	8003f32 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	e007      	b.n	8003f42 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <prvInsertTimerInActiveList+0x80>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	f7fd feea 	bl	8001d16 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f42:	697b      	ldr	r3, [r7, #20]
    }
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	2000023c 	.word	0x2000023c
 8003f50:	20000238 	.word	0x20000238

08003f54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f5a:	e0a6      	b.n	80040aa <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f2c0 80a3 	blt.w	80040aa <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d004      	beq.n	8003f7a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fd ff06 	bl	8001d86 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f7a:	1d3b      	adds	r3, r7, #4
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff87 	bl	8003e90 <prvSampleTimeNow>
 8003f82:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	f200 808d 	bhi.w	80040a8 <prvProcessReceivedCommands+0x154>
 8003f8e:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <prvProcessReceivedCommands+0x40>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08003fb9 	.word	0x08003fb9
 8003f9c:	08004021 	.word	0x08004021
 8003fa0:	08004035 	.word	0x08004035
 8003fa4:	0800407f 	.word	0x0800407f
 8003fa8:	08003fb9 	.word	0x08003fb9
 8003fac:	08003fb9 	.word	0x08003fb9
 8003fb0:	08004021 	.word	0x08004021
 8003fb4:	08004035 	.word	0x08004035
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	18d1      	adds	r1, r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	69f8      	ldr	r0, [r7, #28]
 8003fd8:	f7ff ff7a 	bl	8003ed0 <prvInsertTimerInActiveList>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d063      	beq.n	80040aa <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	69f8      	ldr	r0, [r7, #28]
 8003ffe:	f7ff fe73 	bl	8003ce8 <prvReloadTimer>
 8004002:	e008      	b.n	8004016 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	b2da      	uxtb	r2, r3
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	69f8      	ldr	r0, [r7, #28]
 800401c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800401e:	e044      	b.n	80040aa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	b2da      	uxtb	r2, r3
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004032:	e03a      	b.n	80040aa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	b2da      	uxtb	r2, r3
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	617b      	str	r3, [r7, #20]
    }
 8004066:	bf00      	nop
 8004068:	e7fe      	b.n	8004068 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	699a      	ldr	r2, [r3, #24]
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	18d1      	adds	r1, r2, r3
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	69f8      	ldr	r0, [r7, #28]
 8004078:	f7ff ff2a 	bl	8003ed0 <prvInsertTimerInActiveList>
                        break;
 800407c:	e015      	b.n	80040aa <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d103      	bne.n	8004094 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800408c:	69f8      	ldr	r0, [r7, #28]
 800408e:	f000 fae9 	bl	8004664 <vPortFree>
 8004092:	e00a      	b.n	80040aa <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800409a:	f023 0301 	bic.w	r3, r3, #1
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80040a6:	e000      	b.n	80040aa <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 80040a8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040aa:	4b08      	ldr	r3, [pc, #32]	; (80040cc <prvProcessReceivedCommands+0x178>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f107 0108 	add.w	r1, r7, #8
 80040b2:	2200      	movs	r2, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fe f8c1 	bl	800223c <xQueueReceive>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f47f af4d 	bne.w	8003f5c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20000240 	.word	0x20000240

080040d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040d6:	e009      	b.n	80040ec <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040d8:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <prvSwitchTimerLists+0x44>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80040e2:	f04f 31ff 	mov.w	r1, #4294967295
 80040e6:	6838      	ldr	r0, [r7, #0]
 80040e8:	f7ff fe20 	bl	8003d2c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040ec:	4b09      	ldr	r3, [pc, #36]	; (8004114 <prvSwitchTimerLists+0x44>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80040f6:	4b07      	ldr	r3, [pc, #28]	; (8004114 <prvSwitchTimerLists+0x44>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <prvSwitchTimerLists+0x48>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a04      	ldr	r2, [pc, #16]	; (8004114 <prvSwitchTimerLists+0x44>)
 8004102:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004104:	4a04      	ldr	r2, [pc, #16]	; (8004118 <prvSwitchTimerLists+0x48>)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6013      	str	r3, [r2, #0]
    }
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000238 	.word	0x20000238
 8004118:	2000023c 	.word	0x2000023c

0800411c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004120:	f000 f926 	bl	8004370 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004124:	4b12      	ldr	r3, [pc, #72]	; (8004170 <prvCheckForValidListAndQueue+0x54>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d11d      	bne.n	8004168 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800412c:	4811      	ldr	r0, [pc, #68]	; (8004174 <prvCheckForValidListAndQueue+0x58>)
 800412e:	f7fd fdc7 	bl	8001cc0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004132:	4811      	ldr	r0, [pc, #68]	; (8004178 <prvCheckForValidListAndQueue+0x5c>)
 8004134:	f7fd fdc4 	bl	8001cc0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004138:	4b10      	ldr	r3, [pc, #64]	; (800417c <prvCheckForValidListAndQueue+0x60>)
 800413a:	4a0e      	ldr	r2, [pc, #56]	; (8004174 <prvCheckForValidListAndQueue+0x58>)
 800413c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <prvCheckForValidListAndQueue+0x64>)
 8004140:	4a0d      	ldr	r2, [pc, #52]	; (8004178 <prvCheckForValidListAndQueue+0x5c>)
 8004142:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004144:	2200      	movs	r2, #0
 8004146:	210c      	movs	r1, #12
 8004148:	200a      	movs	r0, #10
 800414a:	f7fd fed5 	bl	8001ef8 <xQueueGenericCreate>
 800414e:	4603      	mov	r3, r0
 8004150:	4a07      	ldr	r2, [pc, #28]	; (8004170 <prvCheckForValidListAndQueue+0x54>)
 8004152:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <prvCheckForValidListAndQueue+0x54>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <prvCheckForValidListAndQueue+0x54>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4908      	ldr	r1, [pc, #32]	; (8004184 <prvCheckForValidListAndQueue+0x68>)
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fb70 	bl	8002848 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004168:	f000 f932 	bl	80043d0 <vPortExitCritical>
    }
 800416c:	bf00      	nop
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000240 	.word	0x20000240
 8004174:	20000210 	.word	0x20000210
 8004178:	20000224 	.word	0x20000224
 800417c:	20000238 	.word	0x20000238
 8004180:	2000023c 	.word	0x2000023c
 8004184:	0800495c 	.word	0x0800495c

08004188 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3b04      	subs	r3, #4
 8004198:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3b04      	subs	r3, #4
 80041a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f023 0201 	bic.w	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3b04      	subs	r3, #4
 80041b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041b8:	4a08      	ldr	r2, [pc, #32]	; (80041dc <pxPortInitialiseStack+0x54>)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3b14      	subs	r3, #20
 80041c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3b20      	subs	r3, #32
 80041ce:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80041d0:	68fb      	ldr	r3, [r7, #12]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr
 80041dc:	080041e1 	.word	0x080041e1

080041e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <prvTaskExitError+0x54>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f2:	d00a      	beq.n	800420a <prvTaskExitError+0x2a>
        __asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	60fb      	str	r3, [r7, #12]
    }
 8004206:	bf00      	nop
 8004208:	e7fe      	b.n	8004208 <prvTaskExitError+0x28>
        __asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	60bb      	str	r3, [r7, #8]
    }
 800421c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800421e:	bf00      	nop
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0fc      	beq.n	8004220 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004226:	bf00      	nop
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20000010 	.word	0x20000010
	...

08004240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004240:	4b07      	ldr	r3, [pc, #28]	; (8004260 <pxCurrentTCBConst2>)
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	6808      	ldr	r0, [r1, #0]
 8004246:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800424a:	f380 8809 	msr	PSP, r0
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8811 	msr	BASEPRI, r0
 800425a:	f04e 0e0d 	orr.w	lr, lr, #13
 800425e:	4770      	bx	lr

08004260 <pxCurrentTCBConst2>:
 8004260:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop

08004268 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8004268:	4806      	ldr	r0, [pc, #24]	; (8004284 <prvPortStartFirstTask+0x1c>)
 800426a:	6800      	ldr	r0, [r0, #0]
 800426c:	6800      	ldr	r0, [r0, #0]
 800426e:	f380 8808 	msr	MSP, r0
 8004272:	b662      	cpsie	i
 8004274:	b661      	cpsie	f
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	df00      	svc	0
 8004280:	bf00      	nop
 8004282:	0000      	.short	0x0000
 8004284:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop

0800428c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004292:	4b32      	ldr	r3, [pc, #200]	; (800435c <xPortStartScheduler+0xd0>)
 8004294:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	22ff      	movs	r2, #255	; 0xff
 80042a2:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	4b2a      	ldr	r3, [pc, #168]	; (8004360 <xPortStartScheduler+0xd4>)
 80042b8:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042ba:	4b2a      	ldr	r3, [pc, #168]	; (8004364 <xPortStartScheduler+0xd8>)
 80042bc:	2207      	movs	r2, #7
 80042be:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042c0:	e009      	b.n	80042d6 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 80042c2:	4b28      	ldr	r3, [pc, #160]	; (8004364 <xPortStartScheduler+0xd8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	4a26      	ldr	r2, [pc, #152]	; (8004364 <xPortStartScheduler+0xd8>)
 80042ca:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042d6:	78fb      	ldrb	r3, [r7, #3]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042de:	2b80      	cmp	r3, #128	; 0x80
 80042e0:	d0ef      	beq.n	80042c2 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042e2:	4b20      	ldr	r3, [pc, #128]	; (8004364 <xPortStartScheduler+0xd8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f1c3 0307 	rsb	r3, r3, #7
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d00a      	beq.n	8004304 <xPortStartScheduler+0x78>
        __asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	60bb      	str	r3, [r7, #8]
    }
 8004300:	bf00      	nop
 8004302:	e7fe      	b.n	8004302 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004304:	4b17      	ldr	r3, [pc, #92]	; (8004364 <xPortStartScheduler+0xd8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	4a16      	ldr	r2, [pc, #88]	; (8004364 <xPortStartScheduler+0xd8>)
 800430c:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800430e:	4b15      	ldr	r3, [pc, #84]	; (8004364 <xPortStartScheduler+0xd8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004316:	4a13      	ldr	r2, [pc, #76]	; (8004364 <xPortStartScheduler+0xd8>)
 8004318:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	b2da      	uxtb	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004322:	4b11      	ldr	r3, [pc, #68]	; (8004368 <xPortStartScheduler+0xdc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a10      	ldr	r2, [pc, #64]	; (8004368 <xPortStartScheduler+0xdc>)
 8004328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800432c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800432e:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <xPortStartScheduler+0xdc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a0d      	ldr	r2, [pc, #52]	; (8004368 <xPortStartScheduler+0xdc>)
 8004334:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004338:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800433a:	f000 f8b7 	bl	80044ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800433e:	4b0b      	ldr	r3, [pc, #44]	; (800436c <xPortStartScheduler+0xe0>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004344:	f7ff ff90 	bl	8004268 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004348:	f7fe ff1e 	bl	8003188 <vTaskSwitchContext>
    prvTaskExitError();
 800434c:	f7ff ff48 	bl	80041e0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	e000e400 	.word	0xe000e400
 8004360:	2000024c 	.word	0x2000024c
 8004364:	20000250 	.word	0x20000250
 8004368:	e000ed20 	.word	0xe000ed20
 800436c:	20000010 	.word	0x20000010

08004370 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
        __asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	607b      	str	r3, [r7, #4]
    }
 8004388:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800438a:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <vPortEnterCritical+0x58>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3301      	adds	r3, #1
 8004390:	4a0d      	ldr	r2, [pc, #52]	; (80043c8 <vPortEnterCritical+0x58>)
 8004392:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004394:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <vPortEnterCritical+0x58>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d10f      	bne.n	80043bc <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <vPortEnterCritical+0x5c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <vPortEnterCritical+0x4c>
        __asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	603b      	str	r3, [r7, #0]
    }
 80043b8:	bf00      	nop
 80043ba:	e7fe      	b.n	80043ba <vPortEnterCritical+0x4a>
    }
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000010 	.word	0x20000010
 80043cc:	e000ed04 	.word	0xe000ed04

080043d0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80043d6:	4b11      	ldr	r3, [pc, #68]	; (800441c <vPortExitCritical+0x4c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10a      	bne.n	80043f4 <vPortExitCritical+0x24>
        __asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	607b      	str	r3, [r7, #4]
    }
 80043f0:	bf00      	nop
 80043f2:	e7fe      	b.n	80043f2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80043f4:	4b09      	ldr	r3, [pc, #36]	; (800441c <vPortExitCritical+0x4c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	4a08      	ldr	r2, [pc, #32]	; (800441c <vPortExitCritical+0x4c>)
 80043fc:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80043fe:	4b07      	ldr	r3, [pc, #28]	; (800441c <vPortExitCritical+0x4c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d105      	bne.n	8004412 <vPortExitCritical+0x42>
 8004406:	2300      	movs	r3, #0
 8004408:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004410:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr
 800441c:	20000010 	.word	0x20000010

08004420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004420:	f3ef 8009 	mrs	r0, PSP
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <pxCurrentTCBConst>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004430:	6010      	str	r0, [r2, #0]
 8004432:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004436:	f04f 0050 	mov.w	r0, #80	; 0x50
 800443a:	f380 8811 	msr	BASEPRI, r0
 800443e:	f7fe fea3 	bl	8003188 <vTaskSwitchContext>
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f380 8811 	msr	BASEPRI, r0
 800444a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800444e:	6819      	ldr	r1, [r3, #0]
 8004450:	6808      	ldr	r0, [r1, #0]
 8004452:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004456:	f380 8809 	msr	PSP, r0
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	4770      	bx	lr

08004460 <pxCurrentTCBConst>:
 8004460:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop

08004468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
        __asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	607b      	str	r3, [r7, #4]
    }
 8004480:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004482:	f7fe fd6b 	bl	8002f5c <xTaskIncrementTick>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <SysTick_Handler+0x40>)
 800448e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	2300      	movs	r3, #0
 8004496:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	f383 8811 	msr	BASEPRI, r3
    }
 800449e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	e000ed04 	.word	0xe000ed04

080044ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044b0:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <vPortSetupTimerInterrupt+0x30>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <vPortSetupTimerInterrupt+0x34>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <vPortSetupTimerInterrupt+0x38>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a09      	ldr	r2, [pc, #36]	; (80044e8 <vPortSetupTimerInterrupt+0x3c>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	4a08      	ldr	r2, [pc, #32]	; (80044ec <vPortSetupTimerInterrupt+0x40>)
 80044ca:	3b01      	subs	r3, #1
 80044cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ce:	4b03      	ldr	r3, [pc, #12]	; (80044dc <vPortSetupTimerInterrupt+0x30>)
 80044d0:	2207      	movs	r2, #7
 80044d2:	601a      	str	r2, [r3, #0]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	e000e010 	.word	0xe000e010
 80044e0:	e000e018 	.word	0xe000e018
 80044e4:	20000000 	.word	0x20000000
 80044e8:	10624dd3 	.word	0x10624dd3
 80044ec:	e000e014 	.word	0xe000e014

080044f0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	; 0x28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80044fc:	f7fe fc16 	bl	8002d2c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004500:	4b53      	ldr	r3, [pc, #332]	; (8004650 <pvPortMalloc+0x160>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004508:	f000 f908 	bl	800471c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d012      	beq.n	8004538 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004512:	2208      	movs	r2, #8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	3308      	adds	r3, #8
 800451e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	43db      	mvns	r3, r3
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	d804      	bhi.n	8004534 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	4413      	add	r3, r2
 8004530:	607b      	str	r3, [r7, #4]
 8004532:	e001      	b.n	8004538 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	db70      	blt.n	8004620 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d06d      	beq.n	8004620 <pvPortMalloc+0x130>
 8004544:	4b43      	ldr	r3, [pc, #268]	; (8004654 <pvPortMalloc+0x164>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	429a      	cmp	r2, r3
 800454c:	d868      	bhi.n	8004620 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800454e:	4b42      	ldr	r3, [pc, #264]	; (8004658 <pvPortMalloc+0x168>)
 8004550:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004552:	4b41      	ldr	r3, [pc, #260]	; (8004658 <pvPortMalloc+0x168>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004558:	e004      	b.n	8004564 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	429a      	cmp	r2, r3
 800456c:	d903      	bls.n	8004576 <pvPortMalloc+0x86>
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f1      	bne.n	800455a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004576:	4b36      	ldr	r3, [pc, #216]	; (8004650 <pvPortMalloc+0x160>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457c:	429a      	cmp	r2, r3
 800457e:	d04f      	beq.n	8004620 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2208      	movs	r2, #8
 8004586:	4413      	add	r3, r2
 8004588:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	1ad2      	subs	r2, r2, r3
 800459a:	2308      	movs	r3, #8
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	429a      	cmp	r2, r3
 80045a0:	d91f      	bls.n	80045e2 <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4413      	add	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <pvPortMalloc+0xda>
        __asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	613b      	str	r3, [r7, #16]
    }
 80045c6:	bf00      	nop
 80045c8:	e7fe      	b.n	80045c8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	1ad2      	subs	r2, r2, r3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045dc:	6978      	ldr	r0, [r7, #20]
 80045de:	f000 f8f9 	bl	80047d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045e2:	4b1c      	ldr	r3, [pc, #112]	; (8004654 <pvPortMalloc+0x164>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	4a19      	ldr	r2, [pc, #100]	; (8004654 <pvPortMalloc+0x164>)
 80045ee:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045f0:	4b18      	ldr	r3, [pc, #96]	; (8004654 <pvPortMalloc+0x164>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b19      	ldr	r3, [pc, #100]	; (800465c <pvPortMalloc+0x16c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d203      	bcs.n	8004604 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045fc:	4b15      	ldr	r3, [pc, #84]	; (8004654 <pvPortMalloc+0x164>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a16      	ldr	r2, [pc, #88]	; (800465c <pvPortMalloc+0x16c>)
 8004602:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004616:	4b12      	ldr	r3, [pc, #72]	; (8004660 <pvPortMalloc+0x170>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3301      	adds	r3, #1
 800461c:	4a10      	ldr	r2, [pc, #64]	; (8004660 <pvPortMalloc+0x170>)
 800461e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004620:	f7fe fb92 	bl	8002d48 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <pvPortMalloc+0x154>
        __asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	60fb      	str	r3, [r7, #12]
    }
 8004640:	bf00      	nop
 8004642:	e7fe      	b.n	8004642 <pvPortMalloc+0x152>
    return pvReturn;
 8004644:	69fb      	ldr	r3, [r7, #28]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3728      	adds	r7, #40	; 0x28
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	20003e5c 	.word	0x20003e5c
 8004654:	20003e60 	.word	0x20003e60
 8004658:	20003e54 	.word	0x20003e54
 800465c:	20003e64 	.word	0x20003e64
 8004660:	20003e68 	.word	0x20003e68

08004664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d049      	beq.n	800470a <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004676:	2308      	movs	r3, #8
 8004678:	425b      	negs	r3, r3
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4413      	add	r3, r2
 800467e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	db0a      	blt.n	80046a2 <vPortFree+0x3e>
        __asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	60fb      	str	r3, [r7, #12]
    }
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <vPortFree+0x5c>
        __asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	60bb      	str	r3, [r7, #8]
    }
 80046bc:	bf00      	nop
 80046be:	e7fe      	b.n	80046be <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	0fdb      	lsrs	r3, r3, #31
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01c      	beq.n	800470a <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d118      	bne.n	800470a <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80046e4:	f7fe fb22 	bl	8002d2c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	4b09      	ldr	r3, [pc, #36]	; (8004714 <vPortFree+0xb0>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4413      	add	r3, r2
 80046f2:	4a08      	ldr	r2, [pc, #32]	; (8004714 <vPortFree+0xb0>)
 80046f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046f6:	6938      	ldr	r0, [r7, #16]
 80046f8:	f000 f86c 	bl	80047d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80046fc:	4b06      	ldr	r3, [pc, #24]	; (8004718 <vPortFree+0xb4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3301      	adds	r3, #1
 8004702:	4a05      	ldr	r2, [pc, #20]	; (8004718 <vPortFree+0xb4>)
 8004704:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004706:	f7fe fb1f 	bl	8002d48 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800470a:	bf00      	nop
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20003e60 	.word	0x20003e60
 8004718:	20003e6c 	.word	0x20003e6c

0800471c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004722:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004726:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004728:	4b25      	ldr	r3, [pc, #148]	; (80047c0 <prvHeapInit+0xa4>)
 800472a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00c      	beq.n	8004750 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3307      	adds	r3, #7
 800473a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0307 	bic.w	r3, r3, #7
 8004742:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	4a1d      	ldr	r2, [pc, #116]	; (80047c0 <prvHeapInit+0xa4>)
 800474c:	4413      	add	r3, r2
 800474e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004754:	4a1b      	ldr	r2, [pc, #108]	; (80047c4 <prvHeapInit+0xa8>)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800475a:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <prvHeapInit+0xa8>)
 800475c:	2200      	movs	r2, #0
 800475e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4413      	add	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004768:	2208      	movs	r2, #8
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0307 	bic.w	r3, r3, #7
 8004776:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <prvHeapInit+0xac>)
 800477c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <prvHeapInit+0xac>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2200      	movs	r2, #0
 8004784:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <prvHeapInit+0xac>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	1ad2      	subs	r2, r2, r3
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <prvHeapInit+0xac>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	4a08      	ldr	r2, [pc, #32]	; (80047cc <prvHeapInit+0xb0>)
 80047aa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	4a07      	ldr	r2, [pc, #28]	; (80047d0 <prvHeapInit+0xb4>)
 80047b2:	6013      	str	r3, [r2, #0]
}
 80047b4:	bf00      	nop
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	20000254 	.word	0x20000254
 80047c4:	20003e54 	.word	0x20003e54
 80047c8:	20003e5c 	.word	0x20003e5c
 80047cc:	20003e64 	.word	0x20003e64
 80047d0:	20003e60 	.word	0x20003e60

080047d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047dc:	4b27      	ldr	r3, [pc, #156]	; (800487c <prvInsertBlockIntoFreeList+0xa8>)
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	e002      	b.n	80047e8 <prvInsertBlockIntoFreeList+0x14>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d8f7      	bhi.n	80047e2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	4413      	add	r3, r2
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	429a      	cmp	r2, r3
 8004802:	d108      	bne.n	8004816 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	441a      	add	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	441a      	add	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d118      	bne.n	800485c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	4b14      	ldr	r3, [pc, #80]	; (8004880 <prvInsertBlockIntoFreeList+0xac>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d00d      	beq.n	8004852 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	441a      	add	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	e008      	b.n	8004864 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <prvInsertBlockIntoFreeList+0xac>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e003      	b.n	8004864 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	429a      	cmp	r2, r3
 800486a:	d002      	beq.n	8004872 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr
 800487c:	20003e54 	.word	0x20003e54
 8004880:	20003e5c 	.word	0x20003e5c

08004884 <memset>:
 8004884:	4603      	mov	r3, r0
 8004886:	4402      	add	r2, r0
 8004888:	4293      	cmp	r3, r2
 800488a:	d100      	bne.n	800488e <memset+0xa>
 800488c:	4770      	bx	lr
 800488e:	f803 1b01 	strb.w	r1, [r3], #1
 8004892:	e7f9      	b.n	8004888 <memset+0x4>

08004894 <__libc_init_array>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	2600      	movs	r6, #0
 8004898:	4d0c      	ldr	r5, [pc, #48]	; (80048cc <__libc_init_array+0x38>)
 800489a:	4c0d      	ldr	r4, [pc, #52]	; (80048d0 <__libc_init_array+0x3c>)
 800489c:	1b64      	subs	r4, r4, r5
 800489e:	10a4      	asrs	r4, r4, #2
 80048a0:	42a6      	cmp	r6, r4
 80048a2:	d109      	bne.n	80048b8 <__libc_init_array+0x24>
 80048a4:	f000 f828 	bl	80048f8 <_init>
 80048a8:	2600      	movs	r6, #0
 80048aa:	4d0a      	ldr	r5, [pc, #40]	; (80048d4 <__libc_init_array+0x40>)
 80048ac:	4c0a      	ldr	r4, [pc, #40]	; (80048d8 <__libc_init_array+0x44>)
 80048ae:	1b64      	subs	r4, r4, r5
 80048b0:	10a4      	asrs	r4, r4, #2
 80048b2:	42a6      	cmp	r6, r4
 80048b4:	d105      	bne.n	80048c2 <__libc_init_array+0x2e>
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
 80048b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048bc:	4798      	blx	r3
 80048be:	3601      	adds	r6, #1
 80048c0:	e7ee      	b.n	80048a0 <__libc_init_array+0xc>
 80048c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c6:	4798      	blx	r3
 80048c8:	3601      	adds	r6, #1
 80048ca:	e7f2      	b.n	80048b2 <__libc_init_array+0x1e>
 80048cc:	08004990 	.word	0x08004990
 80048d0:	08004990 	.word	0x08004990
 80048d4:	08004990 	.word	0x08004990
 80048d8:	08004994 	.word	0x08004994

080048dc <memcpy>:
 80048dc:	440a      	add	r2, r1
 80048de:	4291      	cmp	r1, r2
 80048e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80048e4:	d100      	bne.n	80048e8 <memcpy+0xc>
 80048e6:	4770      	bx	lr
 80048e8:	b510      	push	{r4, lr}
 80048ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048ee:	4291      	cmp	r1, r2
 80048f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048f4:	d1f9      	bne.n	80048ea <memcpy+0xe>
 80048f6:	bd10      	pop	{r4, pc}

080048f8 <_init>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	bf00      	nop
 80048fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fe:	bc08      	pop	{r3}
 8004900:	469e      	mov	lr, r3
 8004902:	4770      	bx	lr

08004904 <_fini>:
 8004904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004906:	bf00      	nop
 8004908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490a:	bc08      	pop	{r3}
 800490c:	469e      	mov	lr, r3
 800490e:	4770      	bx	lr
