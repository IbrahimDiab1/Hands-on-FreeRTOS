
exercise_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005848  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08005958  08005958  00015958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a8c  08005a8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005a8c  08005a8c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a8c  08005a8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a8c  08005a8c  00015a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fb0  20000070  08005b04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004020  08005b04  00024020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   000111e8  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ab0  00000000  00000000  000312c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000094d0  00000000  00000000  00033d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010c0  00000000  00000000  0003d248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000f78  00000000  00000000  0003e308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019e52  00000000  00000000  0003f280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012735  00000000  00000000  000590d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00094df0  00000000  00000000  0006b807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004eac  00000000  00000000  001005f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005940 	.word	0x08005940

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005940 	.word	0x08005940

08000150 <Task_1_Handler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Task_1_Handler(void * parameters)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	int seed,random_number;
	 srand(seed);
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	4618      	mov	r0, r3
 800015c:	f004 fbda 	bl	8004914 <srand>
	 xSemaphoreGive( xSemaphore );
 8000160:	4b0d      	ldr	r3, [pc, #52]	; (8000198 <Task_1_Handler+0x48>)
 8000162:	6818      	ldr	r0, [r3, #0]
 8000164:	2300      	movs	r3, #0
 8000166:	2200      	movs	r2, #0
 8000168:	2100      	movs	r1, #0
 800016a:	f001 ffe3 	bl	8002134 <xQueueGenericSend>

	while(1)
	{
		xSemaphoreTake(xSemaphore, 1000);
 800016e:	4b0a      	ldr	r3, [pc, #40]	; (8000198 <Task_1_Handler+0x48>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000176:	4618      	mov	r0, r3
 8000178:	f002 f9ba 	bl	80024f0 <xQueueSemaphoreTake>

		random_number = rand();
 800017c:	f004 fbf8 	bl	8004970 <rand>
 8000180:	4603      	mov	r3, r0
 8000182:	60bb      	str	r3, [r7, #8]
		xQueueSend( main_queue, ( void *)&random_number,( TickType_t ) 1000 );
 8000184:	4b05      	ldr	r3, [pc, #20]	; (800019c <Task_1_Handler+0x4c>)
 8000186:	6818      	ldr	r0, [r3, #0]
 8000188:	f107 0108 	add.w	r1, r7, #8
 800018c:	2300      	movs	r3, #0
 800018e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000192:	f001 ffcf 	bl	8002134 <xQueueGenericSend>
		xSemaphoreTake(xSemaphore, 1000);
 8000196:	e7ea      	b.n	800016e <Task_1_Handler+0x1e>
 8000198:	200000dc 	.word	0x200000dc
 800019c:	200000d8 	.word	0x200000d8

080001a0 <Task_2_Handler>:

	}
}

void Task_2_Handler(void * parameters)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b084      	sub	sp, #16
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	int receiver;

	while(1)
	{
		xSemaphoreGive( xSemaphore );
 80001a8:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <Task_2_Handler+0x38>)
 80001aa:	6818      	ldr	r0, [r3, #0]
 80001ac:	2300      	movs	r3, #0
 80001ae:	2200      	movs	r2, #0
 80001b0:	2100      	movs	r1, #0
 80001b2:	f001 ffbf 	bl	8002134 <xQueueGenericSend>
		xQueueReceive( main_queue, &(receiver ), ( TickType_t ) 100 );
 80001b6:	4b09      	ldr	r3, [pc, #36]	; (80001dc <Task_2_Handler+0x3c>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	f107 010c 	add.w	r1, r7, #12
 80001be:	2264      	movs	r2, #100	; 0x64
 80001c0:	4618      	mov	r0, r3
 80001c2:	f002 f8b5 	bl	8002330 <xQueueReceive>
		HAL_USART_Transmit(&husart1, &receiver, 1, 1000);
 80001c6:	f107 010c 	add.w	r1, r7, #12
 80001ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ce:	2201      	movs	r2, #1
 80001d0:	4803      	ldr	r0, [pc, #12]	; (80001e0 <Task_2_Handler+0x40>)
 80001d2:	f001 fc42 	bl	8001a5a <HAL_USART_Transmit>
		xSemaphoreGive( xSemaphore );
 80001d6:	e7e7      	b.n	80001a8 <Task_2_Handler+0x8>
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	200000d8 	.word	0x200000d8
 80001e0:	2000008c 	.word	0x2000008c

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	main_queue = xQueueCreate( 10, sizeof(char));
 80001ea:	2200      	movs	r2, #0
 80001ec:	2101      	movs	r1, #1
 80001ee:	200a      	movs	r0, #10
 80001f0:	f001 ff2e 	bl	8002050 <xQueueGenericCreate>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4a14      	ldr	r2, [pc, #80]	; (8000248 <main+0x64>)
 80001f8:	6013      	str	r3, [r2, #0]
	xSemaphore = xSemaphoreCreateBinary();
 80001fa:	2203      	movs	r2, #3
 80001fc:	2100      	movs	r1, #0
 80001fe:	2001      	movs	r0, #1
 8000200:	f001 ff26 	bl	8002050 <xQueueGenericCreate>
 8000204:	4603      	mov	r3, r0
 8000206:	4a11      	ldr	r2, [pc, #68]	; (800024c <main+0x68>)
 8000208:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fac5 	bl	8000798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f82b 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f891 	bl	8000338 <MX_GPIO_Init>
  MX_USART1_Init();
 8000216:	f000 f863 	bl	80002e0 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate( Task_1_Handler, "manager" , 150, NULL, 2, &Task_1_handle );
 800021a:	4b0d      	ldr	r3, [pc, #52]	; (8000250 <main+0x6c>)
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	2302      	movs	r3, #2
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	2300      	movs	r3, #0
 8000224:	2296      	movs	r2, #150	; 0x96
 8000226:	490b      	ldr	r1, [pc, #44]	; (8000254 <main+0x70>)
 8000228:	480b      	ldr	r0, [pc, #44]	; (8000258 <main+0x74>)
 800022a:	f002 fc09 	bl	8002a40 <xTaskCreate>
  xTaskCreate( Task_2_Handler, "employer", 150, NULL, 1, &Task_2_handle );
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <main+0x78>)
 8000230:	9301      	str	r3, [sp, #4]
 8000232:	2301      	movs	r3, #1
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	2300      	movs	r3, #0
 8000238:	2296      	movs	r2, #150	; 0x96
 800023a:	4909      	ldr	r1, [pc, #36]	; (8000260 <main+0x7c>)
 800023c:	4809      	ldr	r0, [pc, #36]	; (8000264 <main+0x80>)
 800023e:	f002 fbff 	bl	8002a40 <xTaskCreate>

  vTaskStartScheduler();
 8000242:	f002 fd67 	bl	8002d14 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000246:	e7fe      	b.n	8000246 <main+0x62>
 8000248:	200000d8 	.word	0x200000d8
 800024c:	200000dc 	.word	0x200000dc
 8000250:	200000d0 	.word	0x200000d0
 8000254:	08005958 	.word	0x08005958
 8000258:	08000151 	.word	0x08000151
 800025c:	200000d4 	.word	0x200000d4
 8000260:	08005960 	.word	0x08005960
 8000264:	080001a1 	.word	0x080001a1

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b090      	sub	sp, #64	; 0x40
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	2228      	movs	r2, #40	; 0x28
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f004 fcab 	bl	8004bd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
 8000288:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028a:	2302      	movs	r3, #2
 800028c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028e:	2301      	movs	r3, #1
 8000290:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000292:	2310      	movs	r3, #16
 8000294:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000296:	2300      	movs	r3, #0
 8000298:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	f107 0318 	add.w	r3, r7, #24
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fd10 	bl	8000cc4 <HAL_RCC_OscConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002aa:	f000 f86a 	bl	8000382 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	230f      	movs	r3, #15
 80002b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 ff7e 	bl	80011c8 <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002d2:	f000 f856 	bl	8000382 <Error_Handler>
  }
}
 80002d6:	bf00      	nop
 80002d8:	3740      	adds	r7, #64	; 0x40
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <MX_USART1_Init+0x50>)
 80002e6:	4a13      	ldr	r2, [pc, #76]	; (8000334 <MX_USART1_Init+0x54>)
 80002e8:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80002ea:	4b11      	ldr	r3, [pc, #68]	; (8000330 <MX_USART1_Init+0x50>)
 80002ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f0:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <MX_USART1_Init+0x50>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80002f8:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <MX_USART1_Init+0x50>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80002fe:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <MX_USART1_Init+0x50>)
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000304:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <MX_USART1_Init+0x50>)
 8000306:	220c      	movs	r2, #12
 8000308:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800030a:	4b09      	ldr	r3, [pc, #36]	; (8000330 <MX_USART1_Init+0x50>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000310:	4b07      	ldr	r3, [pc, #28]	; (8000330 <MX_USART1_Init+0x50>)
 8000312:	2200      	movs	r2, #0
 8000314:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <MX_USART1_Init+0x50>)
 8000318:	2200      	movs	r2, #0
 800031a:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 800031c:	4804      	ldr	r0, [pc, #16]	; (8000330 <MX_USART1_Init+0x50>)
 800031e:	f001 fb5b 	bl	80019d8 <HAL_USART_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000328:	f000 f82b 	bl	8000382 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	2000008c 	.word	0x2000008c
 8000334:	40013800 	.word	0x40013800

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <MX_GPIO_Init+0x28>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	4a07      	ldr	r2, [pc, #28]	; (8000360 <MX_GPIO_Init+0x28>)
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	6193      	str	r3, [r2, #24]
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <MX_GPIO_Init+0x28>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f003 0304 	and.w	r3, r3, #4
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000

08000364 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000374:	d101      	bne.n	800037a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000376:	f000 fa25 	bl	80007c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000386:	b672      	cpsid	i
}
 8000388:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800038a:	e7fe      	b.n	800038a <Error_Handler+0x8>

0800038c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <HAL_MspInit+0x5c>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <HAL_MspInit+0x5c>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <HAL_MspInit+0x5c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	60bb      	str	r3, [r7, #8]
 80003a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <HAL_MspInit+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <HAL_MspInit+0x5c>)
 80003b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b4:	61d3      	str	r3, [r2, #28]
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <HAL_MspInit+0x5c>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <HAL_MspInit+0x60>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	4a04      	ldr	r2, [pc, #16]	; (80003ec <HAL_MspInit+0x60>)
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010000 	.word	0x40010000

080003f0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART1)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a1c      	ldr	r2, [pc, #112]	; (800047c <HAL_USART_MspInit+0x8c>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d131      	bne.n	8000474 <HAL_USART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <HAL_USART_MspInit+0x90>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a1a      	ldr	r2, [pc, #104]	; (8000480 <HAL_USART_MspInit+0x90>)
 8000416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <HAL_USART_MspInit+0x90>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_USART_MspInit+0x90>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a14      	ldr	r2, [pc, #80]	; (8000480 <HAL_USART_MspInit+0x90>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_USART_MspInit+0x90>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000440:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000444:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000446:	2302      	movs	r3, #2
 8000448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800044a:	2303      	movs	r3, #3
 800044c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	4619      	mov	r1, r3
 8000454:	480b      	ldr	r0, [pc, #44]	; (8000484 <HAL_USART_MspInit+0x94>)
 8000456:	f000 fab1 	bl	80009bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800045a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800045e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	4805      	ldr	r0, [pc, #20]	; (8000484 <HAL_USART_MspInit+0x94>)
 8000470:	f000 faa4 	bl	80009bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000474:	bf00      	nop
 8000476:	3720      	adds	r7, #32
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40013800 	.word	0x40013800
 8000480:	40021000 	.word	0x40021000
 8000484:	40010800 	.word	0x40010800

08000488 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08e      	sub	sp, #56	; 0x38
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000490:	2300      	movs	r3, #0
 8000492:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000494:	2300      	movs	r3, #0
 8000496:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000498:	2300      	movs	r3, #0
 800049a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800049e:	4b34      	ldr	r3, [pc, #208]	; (8000570 <HAL_InitTick+0xe8>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4a33      	ldr	r2, [pc, #204]	; (8000570 <HAL_InitTick+0xe8>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	61d3      	str	r3, [r2, #28]
 80004aa:	4b31      	ldr	r3, [pc, #196]	; (8000570 <HAL_InitTick+0xe8>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004b6:	f107 0210 	add.w	r2, r7, #16
 80004ba:	f107 0314 	add.w	r3, r7, #20
 80004be:	4611      	mov	r1, r2
 80004c0:	4618      	mov	r0, r3
 80004c2:	f000 fff1 	bl	80014a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004c6:	6a3b      	ldr	r3, [r7, #32]
 80004c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d103      	bne.n	80004d8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004d0:	f000 ffc2 	bl	8001458 <HAL_RCC_GetPCLK1Freq>
 80004d4:	6378      	str	r0, [r7, #52]	; 0x34
 80004d6:	e004      	b.n	80004e2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004d8:	f000 ffbe 	bl	8001458 <HAL_RCC_GetPCLK1Freq>
 80004dc:	4603      	mov	r3, r0
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004e4:	4a23      	ldr	r2, [pc, #140]	; (8000574 <HAL_InitTick+0xec>)
 80004e6:	fba2 2303 	umull	r2, r3, r2, r3
 80004ea:	0c9b      	lsrs	r3, r3, #18
 80004ec:	3b01      	subs	r3, #1
 80004ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80004f0:	4b21      	ldr	r3, [pc, #132]	; (8000578 <HAL_InitTick+0xf0>)
 80004f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <HAL_InitTick+0xf0>)
 80004fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004fe:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000500:	4a1d      	ldr	r2, [pc, #116]	; (8000578 <HAL_InitTick+0xf0>)
 8000502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000504:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000506:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <HAL_InitTick+0xf0>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <HAL_InitTick+0xf0>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <HAL_InitTick+0xf0>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000518:	4817      	ldr	r0, [pc, #92]	; (8000578 <HAL_InitTick+0xf0>)
 800051a:	f001 f813 	bl	8001544 <HAL_TIM_Base_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000524:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000528:	2b00      	cmp	r3, #0
 800052a:	d11b      	bne.n	8000564 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800052c:	4812      	ldr	r0, [pc, #72]	; (8000578 <HAL_InitTick+0xf0>)
 800052e:	f001 f861 	bl	80015f4 <HAL_TIM_Base_Start_IT>
 8000532:	4603      	mov	r3, r0
 8000534:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000538:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800053c:	2b00      	cmp	r3, #0
 800053e:	d111      	bne.n	8000564 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000540:	201c      	movs	r0, #28
 8000542:	f000 fa2c 	bl	800099e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b0f      	cmp	r3, #15
 800054a:	d808      	bhi.n	800055e <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800054c:	2200      	movs	r2, #0
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	201c      	movs	r0, #28
 8000552:	f000 fa08 	bl	8000966 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000556:	4a09      	ldr	r2, [pc, #36]	; (800057c <HAL_InitTick+0xf4>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	e002      	b.n	8000564 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000564:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000568:	4618      	mov	r0, r3
 800056a:	3738      	adds	r7, #56	; 0x38
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000
 8000574:	431bde83 	.word	0x431bde83
 8000578:	200000e0 	.word	0x200000e0
 800057c:	20000004 	.word	0x20000004

08000580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <NMI_Handler+0x4>

08000586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <MemManage_Handler+0x4>

08000592 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <BusFault_Handler+0x4>

08000598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <UsageFault_Handler+0x4>

0800059e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
	...

080005ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <TIM2_IRQHandler+0x10>)
 80005b2:	f001 f871 	bl	8001698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000e0 	.word	0x200000e0

080005c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return 1;
 80005c4:	2301      	movs	r3, #1
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <_kill>:

int _kill(int pid, int sig)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80005d8:	f004 fb4a 	bl	8004c70 <__errno>
 80005dc:	4603      	mov	r3, r0
 80005de:	2216      	movs	r2, #22
 80005e0:	601a      	str	r2, [r3, #0]
  return -1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_exit>:

void _exit (int status)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80005f6:	f04f 31ff 	mov.w	r1, #4294967295
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff ffe7 	bl	80005ce <_kill>
  while (1) {}    /* Make sure we hang here */
 8000600:	e7fe      	b.n	8000600 <_exit+0x12>

08000602 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b086      	sub	sp, #24
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	e00a      	b.n	800062a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000614:	f3af 8000 	nop.w
 8000618:	4601      	mov	r1, r0
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	1c5a      	adds	r2, r3, #1
 800061e:	60ba      	str	r2, [r7, #8]
 8000620:	b2ca      	uxtb	r2, r1
 8000622:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	3301      	adds	r3, #1
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	697a      	ldr	r2, [r7, #20]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	429a      	cmp	r2, r3
 8000630:	dbf0      	blt.n	8000614 <_read+0x12>
  }

  return len;
 8000632:	687b      	ldr	r3, [r7, #4]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	e009      	b.n	8000662 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	1c5a      	adds	r2, r3, #1
 8000652:	60ba      	str	r2, [r7, #8]
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	3301      	adds	r3, #1
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	697a      	ldr	r2, [r7, #20]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	429a      	cmp	r2, r3
 8000668:	dbf1      	blt.n	800064e <_write+0x12>
  }
  return len;
 800066a:	687b      	ldr	r3, [r7, #4]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <_close>:

int _close(int file)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800069a:	605a      	str	r2, [r3, #4]
  return 0;
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <_isatty>:

int _isatty(int file)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006b0:	2301      	movs	r3, #1
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006dc:	4a14      	ldr	r2, [pc, #80]	; (8000730 <_sbrk+0x5c>)
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <_sbrk+0x60>)
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <_sbrk+0x64>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d102      	bne.n	80006f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <_sbrk+0x64>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <_sbrk+0x68>)
 80006f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <_sbrk+0x64>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	429a      	cmp	r2, r3
 8000702:	d207      	bcs.n	8000714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000704:	f004 fab4 	bl	8004c70 <__errno>
 8000708:	4603      	mov	r3, r0
 800070a:	220c      	movs	r2, #12
 800070c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
 8000712:	e009      	b.n	8000728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <_sbrk+0x64>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800071a:	4b07      	ldr	r3, [pc, #28]	; (8000738 <_sbrk+0x64>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <_sbrk+0x64>)
 8000724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000726:	68fb      	ldr	r3, [r7, #12]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20005000 	.word	0x20005000
 8000734:	00000400 	.word	0x00000400
 8000738:	20000128 	.word	0x20000128
 800073c:	20004020 	.word	0x20004020

08000740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800074c:	f7ff fff8 	bl	8000740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000750:	480b      	ldr	r0, [pc, #44]	; (8000780 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000752:	490c      	ldr	r1, [pc, #48]	; (8000784 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000754:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a09      	ldr	r2, [pc, #36]	; (800078c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000768:	4c09      	ldr	r4, [pc, #36]	; (8000790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000776:	f004 fa81 	bl	8004c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077a:	f7ff fd33 	bl	80001e4 <main>
  bx lr
 800077e:	4770      	bx	lr
  ldr r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000784:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000788:	08005a94 	.word	0x08005a94
  ldr r2, =_sbss
 800078c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000790:	20004020 	.word	0x20004020

08000794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC1_2_IRQHandler>
	...

08000798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_Init+0x28>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <HAL_Init+0x28>)
 80007a2:	f043 0310 	orr.w	r3, r3, #16
 80007a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a8:	2003      	movs	r0, #3
 80007aa:	f000 f8d1 	bl	8000950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ae:	200f      	movs	r0, #15
 80007b0:	f7ff fe6a 	bl	8000488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b4:	f7ff fdea 	bl	800038c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40022000 	.word	0x40022000

080007c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_IncTick+0x1c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_IncTick+0x20>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	4a03      	ldr	r2, [pc, #12]	; (80007e4 <HAL_IncTick+0x20>)
 80007d6:	6013      	str	r3, [r2, #0]
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	20000008 	.word	0x20000008
 80007e4:	2000012c 	.word	0x2000012c

080007e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return uwTick;
 80007ec:	4b02      	ldr	r3, [pc, #8]	; (80007f8 <HAL_GetTick+0x10>)
 80007ee:	681b      	ldr	r3, [r3, #0]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	2000012c 	.word	0x2000012c

080007fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082e:	4a04      	ldr	r2, [pc, #16]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	60d3      	str	r3, [r2, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <__NVIC_GetPriorityGrouping+0x18>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	f003 0307 	and.w	r3, r3, #7
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	db0b      	blt.n	800088a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	f003 021f 	and.w	r2, r3, #31
 8000878:	4906      	ldr	r1, [pc, #24]	; (8000894 <__NVIC_EnableIRQ+0x34>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	095b      	lsrs	r3, r3, #5
 8000880:	2001      	movs	r0, #1
 8000882:	fa00 f202 	lsl.w	r2, r0, r2
 8000886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100

08000898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	; (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	; (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f1c3 0307 	rsb	r3, r3, #7
 8000906:	2b04      	cmp	r3, #4
 8000908:	bf28      	it	cs
 800090a:	2304      	movcs	r3, #4
 800090c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3304      	adds	r3, #4
 8000912:	2b06      	cmp	r3, #6
 8000914:	d902      	bls.n	800091c <NVIC_EncodePriority+0x30>
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3b03      	subs	r3, #3
 800091a:	e000      	b.n	800091e <NVIC_EncodePriority+0x32>
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	f04f 32ff 	mov.w	r2, #4294967295
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43da      	mvns	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	401a      	ands	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000934:	f04f 31ff 	mov.w	r1, #4294967295
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43d9      	mvns	r1, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	4313      	orrs	r3, r2
         );
}
 8000946:	4618      	mov	r0, r3
 8000948:	3724      	adds	r7, #36	; 0x24
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ff4f 	bl	80007fc <__NVIC_SetPriorityGrouping>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000966:	b580      	push	{r7, lr}
 8000968:	b086      	sub	sp, #24
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000978:	f7ff ff64 	bl	8000844 <__NVIC_GetPriorityGrouping>
 800097c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	68b9      	ldr	r1, [r7, #8]
 8000982:	6978      	ldr	r0, [r7, #20]
 8000984:	f7ff ffb2 	bl	80008ec <NVIC_EncodePriority>
 8000988:	4602      	mov	r2, r0
 800098a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff81 	bl	8000898 <__NVIC_SetPriority>
}
 8000996:	bf00      	nop
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff57 	bl	8000860 <__NVIC_EnableIRQ>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009bc:	b480      	push	{r7}
 80009be:	b08b      	sub	sp, #44	; 0x2c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ce:	e169      	b.n	8000ca4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009d0:	2201      	movs	r2, #1
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	69fa      	ldr	r2, [r7, #28]
 80009e0:	4013      	ands	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	f040 8158 	bne.w	8000c9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	4a9a      	ldr	r2, [pc, #616]	; (8000c5c <HAL_GPIO_Init+0x2a0>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d05e      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 80009f8:	4a98      	ldr	r2, [pc, #608]	; (8000c5c <HAL_GPIO_Init+0x2a0>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d875      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 80009fe:	4a98      	ldr	r2, [pc, #608]	; (8000c60 <HAL_GPIO_Init+0x2a4>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d058      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a04:	4a96      	ldr	r2, [pc, #600]	; (8000c60 <HAL_GPIO_Init+0x2a4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d86f      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a0a:	4a96      	ldr	r2, [pc, #600]	; (8000c64 <HAL_GPIO_Init+0x2a8>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d052      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a10:	4a94      	ldr	r2, [pc, #592]	; (8000c64 <HAL_GPIO_Init+0x2a8>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d869      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a16:	4a94      	ldr	r2, [pc, #592]	; (8000c68 <HAL_GPIO_Init+0x2ac>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d04c      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a1c:	4a92      	ldr	r2, [pc, #584]	; (8000c68 <HAL_GPIO_Init+0x2ac>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d863      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a22:	4a92      	ldr	r2, [pc, #584]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d046      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a28:	4a90      	ldr	r2, [pc, #576]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d85d      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a2e:	2b12      	cmp	r3, #18
 8000a30:	d82a      	bhi.n	8000a88 <HAL_GPIO_Init+0xcc>
 8000a32:	2b12      	cmp	r3, #18
 8000a34:	d859      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a36:	a201      	add	r2, pc, #4	; (adr r2, 8000a3c <HAL_GPIO_Init+0x80>)
 8000a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3c:	08000ab7 	.word	0x08000ab7
 8000a40:	08000a91 	.word	0x08000a91
 8000a44:	08000aa3 	.word	0x08000aa3
 8000a48:	08000ae5 	.word	0x08000ae5
 8000a4c:	08000aeb 	.word	0x08000aeb
 8000a50:	08000aeb 	.word	0x08000aeb
 8000a54:	08000aeb 	.word	0x08000aeb
 8000a58:	08000aeb 	.word	0x08000aeb
 8000a5c:	08000aeb 	.word	0x08000aeb
 8000a60:	08000aeb 	.word	0x08000aeb
 8000a64:	08000aeb 	.word	0x08000aeb
 8000a68:	08000aeb 	.word	0x08000aeb
 8000a6c:	08000aeb 	.word	0x08000aeb
 8000a70:	08000aeb 	.word	0x08000aeb
 8000a74:	08000aeb 	.word	0x08000aeb
 8000a78:	08000aeb 	.word	0x08000aeb
 8000a7c:	08000aeb 	.word	0x08000aeb
 8000a80:	08000a99 	.word	0x08000a99
 8000a84:	08000aad 	.word	0x08000aad
 8000a88:	4a79      	ldr	r2, [pc, #484]	; (8000c70 <HAL_GPIO_Init+0x2b4>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d013      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a8e:	e02c      	b.n	8000aea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	623b      	str	r3, [r7, #32]
          break;
 8000a96:	e029      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	623b      	str	r3, [r7, #32]
          break;
 8000aa0:	e024      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	3308      	adds	r3, #8
 8000aa8:	623b      	str	r3, [r7, #32]
          break;
 8000aaa:	e01f      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	330c      	adds	r3, #12
 8000ab2:	623b      	str	r3, [r7, #32]
          break;
 8000ab4:	e01a      	b.n	8000aec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d102      	bne.n	8000ac4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	623b      	str	r3, [r7, #32]
          break;
 8000ac2:	e013      	b.n	8000aec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d105      	bne.n	8000ad8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000acc:	2308      	movs	r3, #8
 8000ace:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	69fa      	ldr	r2, [r7, #28]
 8000ad4:	611a      	str	r2, [r3, #16]
          break;
 8000ad6:	e009      	b.n	8000aec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	615a      	str	r2, [r3, #20]
          break;
 8000ae2:	e003      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
          break;
 8000ae8:	e000      	b.n	8000aec <HAL_GPIO_Init+0x130>
          break;
 8000aea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	2bff      	cmp	r3, #255	; 0xff
 8000af0:	d801      	bhi.n	8000af6 <HAL_GPIO_Init+0x13a>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	e001      	b.n	8000afa <HAL_GPIO_Init+0x13e>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3304      	adds	r3, #4
 8000afa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	2bff      	cmp	r3, #255	; 0xff
 8000b00:	d802      	bhi.n	8000b08 <HAL_GPIO_Init+0x14c>
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	e002      	b.n	8000b0e <HAL_GPIO_Init+0x152>
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	3b08      	subs	r3, #8
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	210f      	movs	r1, #15
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	401a      	ands	r2, r3
 8000b20:	6a39      	ldr	r1, [r7, #32]
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	fa01 f303 	lsl.w	r3, r1, r3
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 80b1 	beq.w	8000c9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b3c:	4b4d      	ldr	r3, [pc, #308]	; (8000c74 <HAL_GPIO_Init+0x2b8>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a4c      	ldr	r2, [pc, #304]	; (8000c74 <HAL_GPIO_Init+0x2b8>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b4a      	ldr	r3, [pc, #296]	; (8000c74 <HAL_GPIO_Init+0x2b8>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b54:	4a48      	ldr	r2, [pc, #288]	; (8000c78 <HAL_GPIO_Init+0x2bc>)
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	089b      	lsrs	r3, r3, #2
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	f003 0303 	and.w	r3, r3, #3
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	220f      	movs	r2, #15
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a40      	ldr	r2, [pc, #256]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d013      	beq.n	8000ba8 <HAL_GPIO_Init+0x1ec>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a3f      	ldr	r2, [pc, #252]	; (8000c80 <HAL_GPIO_Init+0x2c4>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d00d      	beq.n	8000ba4 <HAL_GPIO_Init+0x1e8>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a3e      	ldr	r2, [pc, #248]	; (8000c84 <HAL_GPIO_Init+0x2c8>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d007      	beq.n	8000ba0 <HAL_GPIO_Init+0x1e4>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a3d      	ldr	r2, [pc, #244]	; (8000c88 <HAL_GPIO_Init+0x2cc>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d101      	bne.n	8000b9c <HAL_GPIO_Init+0x1e0>
 8000b98:	2303      	movs	r3, #3
 8000b9a:	e006      	b.n	8000baa <HAL_GPIO_Init+0x1ee>
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	e004      	b.n	8000baa <HAL_GPIO_Init+0x1ee>
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	e002      	b.n	8000baa <HAL_GPIO_Init+0x1ee>
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e000      	b.n	8000baa <HAL_GPIO_Init+0x1ee>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bac:	f002 0203 	and.w	r2, r2, #3
 8000bb0:	0092      	lsls	r2, r2, #2
 8000bb2:	4093      	lsls	r3, r2
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bba:	492f      	ldr	r1, [pc, #188]	; (8000c78 <HAL_GPIO_Init+0x2bc>)
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d006      	beq.n	8000be2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000bd6:	689a      	ldr	r2, [r3, #8]
 8000bd8:	492c      	ldr	r1, [pc, #176]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	608b      	str	r3, [r1, #8]
 8000be0:	e006      	b.n	8000bf0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000be2:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	4928      	ldr	r1, [pc, #160]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000bec:	4013      	ands	r3, r2
 8000bee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d006      	beq.n	8000c0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bfc:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	4922      	ldr	r1, [pc, #136]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	60cb      	str	r3, [r1, #12]
 8000c08:	e006      	b.n	8000c18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c0c:	68da      	ldr	r2, [r3, #12]
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	491e      	ldr	r1, [pc, #120]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c14:	4013      	ands	r3, r2
 8000c16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d006      	beq.n	8000c32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	4918      	ldr	r1, [pc, #96]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	604b      	str	r3, [r1, #4]
 8000c30:	e006      	b.n	8000c40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	4914      	ldr	r1, [pc, #80]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d021      	beq.n	8000c90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	490e      	ldr	r1, [pc, #56]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	600b      	str	r3, [r1, #0]
 8000c58:	e021      	b.n	8000c9e <HAL_GPIO_Init+0x2e2>
 8000c5a:	bf00      	nop
 8000c5c:	10320000 	.word	0x10320000
 8000c60:	10310000 	.word	0x10310000
 8000c64:	10220000 	.word	0x10220000
 8000c68:	10210000 	.word	0x10210000
 8000c6c:	10120000 	.word	0x10120000
 8000c70:	10110000 	.word	0x10110000
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010000 	.word	0x40010000
 8000c7c:	40010800 	.word	0x40010800
 8000c80:	40010c00 	.word	0x40010c00
 8000c84:	40011000 	.word	0x40011000
 8000c88:	40011400 	.word	0x40011400
 8000c8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_GPIO_Init+0x304>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	43db      	mvns	r3, r3
 8000c98:	4909      	ldr	r1, [pc, #36]	; (8000cc0 <HAL_GPIO_Init+0x304>)
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	fa22 f303 	lsr.w	r3, r2, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f47f ae8e 	bne.w	80009d0 <HAL_GPIO_Init+0x14>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	bf00      	nop
 8000cb8:	372c      	adds	r7, #44	; 0x2c
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	40010400 	.word	0x40010400

08000cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e272      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 8087 	beq.w	8000df2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce4:	4b92      	ldr	r3, [pc, #584]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 030c 	and.w	r3, r3, #12
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	d00c      	beq.n	8000d0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf0:	4b8f      	ldr	r3, [pc, #572]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 030c 	and.w	r3, r3, #12
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d112      	bne.n	8000d22 <HAL_RCC_OscConfig+0x5e>
 8000cfc:	4b8c      	ldr	r3, [pc, #560]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d08:	d10b      	bne.n	8000d22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d0a:	4b89      	ldr	r3, [pc, #548]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d06c      	beq.n	8000df0 <HAL_RCC_OscConfig+0x12c>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d168      	bne.n	8000df0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e24c      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d2a:	d106      	bne.n	8000d3a <HAL_RCC_OscConfig+0x76>
 8000d2c:	4b80      	ldr	r3, [pc, #512]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a7f      	ldr	r2, [pc, #508]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	e02e      	b.n	8000d98 <HAL_RCC_OscConfig+0xd4>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10c      	bne.n	8000d5c <HAL_RCC_OscConfig+0x98>
 8000d42:	4b7b      	ldr	r3, [pc, #492]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a7a      	ldr	r2, [pc, #488]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	4b78      	ldr	r3, [pc, #480]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a77      	ldr	r2, [pc, #476]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e01d      	b.n	8000d98 <HAL_RCC_OscConfig+0xd4>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d64:	d10c      	bne.n	8000d80 <HAL_RCC_OscConfig+0xbc>
 8000d66:	4b72      	ldr	r3, [pc, #456]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a71      	ldr	r2, [pc, #452]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	4b6f      	ldr	r3, [pc, #444]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a6e      	ldr	r2, [pc, #440]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e00b      	b.n	8000d98 <HAL_RCC_OscConfig+0xd4>
 8000d80:	4b6b      	ldr	r3, [pc, #428]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a6a      	ldr	r2, [pc, #424]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	4b68      	ldr	r3, [pc, #416]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a67      	ldr	r2, [pc, #412]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d013      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da0:	f7ff fd22 	bl	80007e8 <HAL_GetTick>
 8000da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da6:	e008      	b.n	8000dba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da8:	f7ff fd1e 	bl	80007e8 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b64      	cmp	r3, #100	; 0x64
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e200      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dba:	4b5d      	ldr	r3, [pc, #372]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f0      	beq.n	8000da8 <HAL_RCC_OscConfig+0xe4>
 8000dc6:	e014      	b.n	8000df2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc8:	f7ff fd0e 	bl	80007e8 <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd0:	f7ff fd0a 	bl	80007e8 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b64      	cmp	r3, #100	; 0x64
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e1ec      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de2:	4b53      	ldr	r3, [pc, #332]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1f0      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x10c>
 8000dee:	e000      	b.n	8000df2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d063      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dfe:	4b4c      	ldr	r3, [pc, #304]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 030c 	and.w	r3, r3, #12
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00b      	beq.n	8000e22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e0a:	4b49      	ldr	r3, [pc, #292]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 030c 	and.w	r3, r3, #12
 8000e12:	2b08      	cmp	r3, #8
 8000e14:	d11c      	bne.n	8000e50 <HAL_RCC_OscConfig+0x18c>
 8000e16:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d116      	bne.n	8000e50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e22:	4b43      	ldr	r3, [pc, #268]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d005      	beq.n	8000e3a <HAL_RCC_OscConfig+0x176>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d001      	beq.n	8000e3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e1c0      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3a:	4b3d      	ldr	r3, [pc, #244]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	4939      	ldr	r1, [pc, #228]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4e:	e03a      	b.n	8000ec6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d020      	beq.n	8000e9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e58:	4b36      	ldr	r3, [pc, #216]	; (8000f34 <HAL_RCC_OscConfig+0x270>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fcc3 	bl	80007e8 <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e66:	f7ff fcbf 	bl	80007e8 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e1a1      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e78:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f0      	beq.n	8000e66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e84:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	4927      	ldr	r1, [pc, #156]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	4313      	orrs	r3, r2
 8000e96:	600b      	str	r3, [r1, #0]
 8000e98:	e015      	b.n	8000ec6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e9a:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <HAL_RCC_OscConfig+0x270>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fca2 	bl	80007e8 <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fc9e 	bl	80007e8 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e180      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f0      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d03a      	beq.n	8000f48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d019      	beq.n	8000f0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee0:	f7ff fc82 	bl	80007e8 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ee8:	f7ff fc7e 	bl	80007e8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e160      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f0      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f000 fafe 	bl	8001508 <RCC_Delay>
 8000f0c:	e01c      	b.n	8000f48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f14:	f7ff fc68 	bl	80007e8 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f1a:	e00f      	b.n	8000f3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fc64 	bl	80007e8 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d908      	bls.n	8000f3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e146      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000
 8000f34:	42420000 	.word	0x42420000
 8000f38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3c:	4b92      	ldr	r3, [pc, #584]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1e9      	bne.n	8000f1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 80a6 	beq.w	80010a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f5a:	4b8b      	ldr	r3, [pc, #556]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10d      	bne.n	8000f82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b88      	ldr	r3, [pc, #544]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a87      	ldr	r2, [pc, #540]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b85      	ldr	r3, [pc, #532]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f82:	4b82      	ldr	r3, [pc, #520]	; (800118c <HAL_RCC_OscConfig+0x4c8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d118      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f8e:	4b7f      	ldr	r3, [pc, #508]	; (800118c <HAL_RCC_OscConfig+0x4c8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a7e      	ldr	r2, [pc, #504]	; (800118c <HAL_RCC_OscConfig+0x4c8>)
 8000f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f9a:	f7ff fc25 	bl	80007e8 <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa2:	f7ff fc21 	bl	80007e8 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b64      	cmp	r3, #100	; 0x64
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e103      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb4:	4b75      	ldr	r3, [pc, #468]	; (800118c <HAL_RCC_OscConfig+0x4c8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f0      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d106      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x312>
 8000fc8:	4b6f      	ldr	r3, [pc, #444]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	4a6e      	ldr	r2, [pc, #440]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6213      	str	r3, [r2, #32]
 8000fd4:	e02d      	b.n	8001032 <HAL_RCC_OscConfig+0x36e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x334>
 8000fde:	4b6a      	ldr	r3, [pc, #424]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	4a69      	ldr	r2, [pc, #420]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	f023 0301 	bic.w	r3, r3, #1
 8000fe8:	6213      	str	r3, [r2, #32]
 8000fea:	4b67      	ldr	r3, [pc, #412]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	4a66      	ldr	r2, [pc, #408]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	f023 0304 	bic.w	r3, r3, #4
 8000ff4:	6213      	str	r3, [r2, #32]
 8000ff6:	e01c      	b.n	8001032 <HAL_RCC_OscConfig+0x36e>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b05      	cmp	r3, #5
 8000ffe:	d10c      	bne.n	800101a <HAL_RCC_OscConfig+0x356>
 8001000:	4b61      	ldr	r3, [pc, #388]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	4a60      	ldr	r2, [pc, #384]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6213      	str	r3, [r2, #32]
 800100c:	4b5e      	ldr	r3, [pc, #376]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4a5d      	ldr	r2, [pc, #372]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6213      	str	r3, [r2, #32]
 8001018:	e00b      	b.n	8001032 <HAL_RCC_OscConfig+0x36e>
 800101a:	4b5b      	ldr	r3, [pc, #364]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a5a      	ldr	r2, [pc, #360]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	6213      	str	r3, [r2, #32]
 8001026:	4b58      	ldr	r3, [pc, #352]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	4a57      	ldr	r2, [pc, #348]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	f023 0304 	bic.w	r3, r3, #4
 8001030:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d015      	beq.n	8001066 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103a:	f7ff fbd5 	bl	80007e8 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001040:	e00a      	b.n	8001058 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001042:	f7ff fbd1 	bl	80007e8 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001050:	4293      	cmp	r3, r2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e0b1      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001058:	4b4b      	ldr	r3, [pc, #300]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0ee      	beq.n	8001042 <HAL_RCC_OscConfig+0x37e>
 8001064:	e014      	b.n	8001090 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001066:	f7ff fbbf 	bl	80007e8 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106c:	e00a      	b.n	8001084 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106e:	f7ff fbbb 	bl	80007e8 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	f241 3288 	movw	r2, #5000	; 0x1388
 800107c:	4293      	cmp	r3, r2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e09b      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001084:	4b40      	ldr	r3, [pc, #256]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1ee      	bne.n	800106e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d105      	bne.n	80010a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001096:	4b3c      	ldr	r3, [pc, #240]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4a3b      	ldr	r2, [pc, #236]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800109c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 8087 	beq.w	80011ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ac:	4b36      	ldr	r3, [pc, #216]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d061      	beq.n	800117c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d146      	bne.n	800114e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c0:	4b33      	ldr	r3, [pc, #204]	; (8001190 <HAL_RCC_OscConfig+0x4cc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c6:	f7ff fb8f 	bl	80007e8 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ce:	f7ff fb8b 	bl	80007e8 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e06d      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f0      	bne.n	80010ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f4:	d108      	bne.n	8001108 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010f6:	4b24      	ldr	r3, [pc, #144]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	4921      	ldr	r1, [pc, #132]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	4313      	orrs	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a19      	ldr	r1, [r3, #32]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	430b      	orrs	r3, r1
 800111a:	491b      	ldr	r1, [pc, #108]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800111c:	4313      	orrs	r3, r2
 800111e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <HAL_RCC_OscConfig+0x4cc>)
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001126:	f7ff fb5f 	bl	80007e8 <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112e:	f7ff fb5b 	bl	80007e8 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e03d      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x46a>
 800114c:	e035      	b.n	80011ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_RCC_OscConfig+0x4cc>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fb48 	bl	80007e8 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115c:	f7ff fb44 	bl	80007e8 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e026      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x498>
 800117a:	e01e      	b.n	80011ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d107      	bne.n	8001194 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e019      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
 8001188:	40021000 	.word	0x40021000
 800118c:	40007000 	.word	0x40007000
 8001190:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_RCC_OscConfig+0x500>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d106      	bne.n	80011b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d001      	beq.n	80011ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000

080011c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0d0      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011dc:	4b6a      	ldr	r3, [pc, #424]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d910      	bls.n	800120c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4b67      	ldr	r3, [pc, #412]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 0207 	bic.w	r2, r3, #7
 80011f2:	4965      	ldr	r1, [pc, #404]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b63      	ldr	r3, [pc, #396]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0b8      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d020      	beq.n	800125a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001224:	4b59      	ldr	r3, [pc, #356]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a58      	ldr	r2, [pc, #352]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800122e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800123c:	4b53      	ldr	r3, [pc, #332]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	4a52      	ldr	r2, [pc, #328]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001246:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001248:	4b50      	ldr	r3, [pc, #320]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	494d      	ldr	r1, [pc, #308]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	4313      	orrs	r3, r2
 8001258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d040      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d107      	bne.n	800127e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	4b47      	ldr	r3, [pc, #284]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d115      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e07f      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d107      	bne.n	8001296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001286:	4b41      	ldr	r3, [pc, #260]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d109      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e073      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001296:	4b3d      	ldr	r3, [pc, #244]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e06b      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a6:	4b39      	ldr	r3, [pc, #228]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f023 0203 	bic.w	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4936      	ldr	r1, [pc, #216]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b8:	f7ff fa96 	bl	80007e8 <HAL_GetTick>
 80012bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012be:	e00a      	b.n	80012d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c0:	f7ff fa92 	bl	80007e8 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e053      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d6:	4b2d      	ldr	r3, [pc, #180]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 020c 	and.w	r2, r3, #12
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d1eb      	bne.n	80012c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012e8:	4b27      	ldr	r3, [pc, #156]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d210      	bcs.n	8001318 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f6:	4b24      	ldr	r3, [pc, #144]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 0207 	bic.w	r2, r3, #7
 80012fe:	4922      	ldr	r1, [pc, #136]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d001      	beq.n	8001318 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e032      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	4916      	ldr	r1, [pc, #88]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	490e      	ldr	r1, [pc, #56]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001356:	f000 f821 	bl	800139c <HAL_RCC_GetSysClockFreq>
 800135a:	4602      	mov	r2, r0
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	490a      	ldr	r1, [pc, #40]	; (8001390 <HAL_RCC_ClockConfig+0x1c8>)
 8001368:	5ccb      	ldrb	r3, [r1, r3]
 800136a:	fa22 f303 	lsr.w	r3, r2, r3
 800136e:	4a09      	ldr	r2, [pc, #36]	; (8001394 <HAL_RCC_ClockConfig+0x1cc>)
 8001370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_RCC_ClockConfig+0x1d0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f886 	bl	8000488 <HAL_InitTick>

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40022000 	.word	0x40022000
 800138c:	40021000 	.word	0x40021000
 8001390:	08005984 	.word	0x08005984
 8001394:	20000000 	.word	0x20000000
 8001398:	20000004 	.word	0x20000004

0800139c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013b6:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <HAL_RCC_GetSysClockFreq+0x94>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d002      	beq.n	80013cc <HAL_RCC_GetSysClockFreq+0x30>
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d003      	beq.n	80013d2 <HAL_RCC_GetSysClockFreq+0x36>
 80013ca:	e027      	b.n	800141c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ce:	613b      	str	r3, [r7, #16]
      break;
 80013d0:	e027      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	0c9b      	lsrs	r3, r3, #18
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	4a17      	ldr	r2, [pc, #92]	; (8001438 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013dc:	5cd3      	ldrb	r3, [r2, r3]
 80013de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d010      	beq.n	800140c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_RCC_GetSysClockFreq+0x94>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	0c5b      	lsrs	r3, r3, #17
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	4a11      	ldr	r2, [pc, #68]	; (800143c <HAL_RCC_GetSysClockFreq+0xa0>)
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <HAL_RCC_GetSysClockFreq+0x98>)
 80013fe:	fb03 f202 	mul.w	r2, r3, r2
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	fbb2 f3f3 	udiv	r3, r2, r3
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e004      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001410:	fb02 f303 	mul.w	r3, r2, r3
 8001414:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	613b      	str	r3, [r7, #16]
      break;
 800141a:	e002      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_RCC_GetSysClockFreq+0x98>)
 800141e:	613b      	str	r3, [r7, #16]
      break;
 8001420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001422:	693b      	ldr	r3, [r7, #16]
}
 8001424:	4618      	mov	r0, r3
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	007a1200 	.word	0x007a1200
 8001438:	0800599c 	.word	0x0800599c
 800143c:	080059ac 	.word	0x080059ac
 8001440:	003d0900 	.word	0x003d0900

08001444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001448:	4b02      	ldr	r3, [pc, #8]	; (8001454 <HAL_RCC_GetHCLKFreq+0x10>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000000 	.word	0x20000000

08001458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800145c:	f7ff fff2 	bl	8001444 <HAL_RCC_GetHCLKFreq>
 8001460:	4602      	mov	r2, r0
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	4903      	ldr	r1, [pc, #12]	; (800147c <HAL_RCC_GetPCLK1Freq+0x24>)
 800146e:	5ccb      	ldrb	r3, [r1, r3]
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	08005994 	.word	0x08005994

08001480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001484:	f7ff ffde 	bl	8001444 <HAL_RCC_GetHCLKFreq>
 8001488:	4602      	mov	r2, r0
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	0adb      	lsrs	r3, r3, #11
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	4903      	ldr	r1, [pc, #12]	; (80014a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001496:	5ccb      	ldrb	r3, [r1, r3]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800149c:	4618      	mov	r0, r3
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000
 80014a4:	08005994 	.word	0x08005994

080014a8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	220f      	movs	r2, #15
 80014b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_RCC_GetClockConfig+0x58>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_RCC_GetClockConfig+0x58>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_RCC_GetClockConfig+0x58>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_RCC_GetClockConfig+0x58>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	08db      	lsrs	r3, r3, #3
 80014e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_RCC_GetClockConfig+0x5c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0207 	and.w	r2, r3, #7
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	40021000 	.word	0x40021000
 8001504:	40022000 	.word	0x40022000

08001508 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <RCC_Delay+0x34>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <RCC_Delay+0x38>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0a5b      	lsrs	r3, r3, #9
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001524:	bf00      	nop
  }
  while (Delay --);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1e5a      	subs	r2, r3, #1
 800152a:	60fa      	str	r2, [r7, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f9      	bne.n	8001524 <RCC_Delay+0x1c>
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	20000000 	.word	0x20000000
 8001540:	10624dd3 	.word	0x10624dd3

08001544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e041      	b.n	80015da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d106      	bne.n	8001570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f839 	bl	80015e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3304      	adds	r3, #4
 8001580:	4619      	mov	r1, r3
 8001582:	4610      	mov	r0, r2
 8001584:	f000 f9b4 	bl	80018f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b01      	cmp	r3, #1
 8001606:	d001      	beq.n	800160c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e03a      	b.n	8001682 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2202      	movs	r2, #2
 8001610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0201 	orr.w	r2, r2, #1
 8001622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a18      	ldr	r2, [pc, #96]	; (800168c <HAL_TIM_Base_Start_IT+0x98>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d00e      	beq.n	800164c <HAL_TIM_Base_Start_IT+0x58>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001636:	d009      	beq.n	800164c <HAL_TIM_Base_Start_IT+0x58>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a14      	ldr	r2, [pc, #80]	; (8001690 <HAL_TIM_Base_Start_IT+0x9c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d004      	beq.n	800164c <HAL_TIM_Base_Start_IT+0x58>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a13      	ldr	r2, [pc, #76]	; (8001694 <HAL_TIM_Base_Start_IT+0xa0>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d111      	bne.n	8001670 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b06      	cmp	r3, #6
 800165c:	d010      	beq.n	8001680 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0201 	orr.w	r2, r2, #1
 800166c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800166e:	e007      	b.n	8001680 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	40012c00 	.word	0x40012c00
 8001690:	40000400 	.word	0x40000400
 8001694:	40000800 	.word	0x40000800

08001698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d122      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d11b      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f06f 0202 	mvn.w	r2, #2
 80016c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f8ed 	bl	80018ba <HAL_TIM_IC_CaptureCallback>
 80016e0:	e005      	b.n	80016ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f8e0 	bl	80018a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f8ef 	bl	80018cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d122      	bne.n	8001748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b04      	cmp	r3, #4
 800170e:	d11b      	bne.n	8001748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f06f 0204 	mvn.w	r2, #4
 8001718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2202      	movs	r2, #2
 800171e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f8c3 	bl	80018ba <HAL_TIM_IC_CaptureCallback>
 8001734:	e005      	b.n	8001742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f8b6 	bl	80018a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f8c5 	bl	80018cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b08      	cmp	r3, #8
 8001754:	d122      	bne.n	800179c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b08      	cmp	r3, #8
 8001762:	d11b      	bne.n	800179c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f06f 0208 	mvn.w	r2, #8
 800176c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2204      	movs	r2, #4
 8001772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f899 	bl	80018ba <HAL_TIM_IC_CaptureCallback>
 8001788:	e005      	b.n	8001796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f88c 	bl	80018a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f89b 	bl	80018cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d122      	bne.n	80017f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	2b10      	cmp	r3, #16
 80017b6:	d11b      	bne.n	80017f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f06f 0210 	mvn.w	r2, #16
 80017c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2208      	movs	r2, #8
 80017c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f86f 	bl	80018ba <HAL_TIM_IC_CaptureCallback>
 80017dc:	e005      	b.n	80017ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f862 	bl	80018a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f871 	bl	80018cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d10e      	bne.n	800181c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b01      	cmp	r3, #1
 800180a:	d107      	bne.n	800181c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f06f 0201 	mvn.w	r2, #1
 8001814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7fe fda4 	bl	8000364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001826:	2b80      	cmp	r3, #128	; 0x80
 8001828:	d10e      	bne.n	8001848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001834:	2b80      	cmp	r3, #128	; 0x80
 8001836:	d107      	bne.n	8001848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f8bf 	bl	80019c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001852:	2b40      	cmp	r3, #64	; 0x40
 8001854:	d10e      	bne.n	8001874 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001860:	2b40      	cmp	r3, #64	; 0x40
 8001862:	d107      	bne.n	8001874 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800186c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f835 	bl	80018de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	f003 0320 	and.w	r3, r3, #32
 800187e:	2b20      	cmp	r3, #32
 8001880:	d10e      	bne.n	80018a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f003 0320 	and.w	r3, r3, #32
 800188c:	2b20      	cmp	r3, #32
 800188e:	d107      	bne.n	80018a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f06f 0220 	mvn.w	r2, #32
 8001898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f88a 	bl	80019b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a29      	ldr	r2, [pc, #164]	; (80019a8 <TIM_Base_SetConfig+0xb8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d00b      	beq.n	8001920 <TIM_Base_SetConfig+0x30>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190e:	d007      	beq.n	8001920 <TIM_Base_SetConfig+0x30>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a26      	ldr	r2, [pc, #152]	; (80019ac <TIM_Base_SetConfig+0xbc>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d003      	beq.n	8001920 <TIM_Base_SetConfig+0x30>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a25      	ldr	r2, [pc, #148]	; (80019b0 <TIM_Base_SetConfig+0xc0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d108      	bne.n	8001932 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <TIM_Base_SetConfig+0xb8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d00b      	beq.n	8001952 <TIM_Base_SetConfig+0x62>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001940:	d007      	beq.n	8001952 <TIM_Base_SetConfig+0x62>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a19      	ldr	r2, [pc, #100]	; (80019ac <TIM_Base_SetConfig+0xbc>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d003      	beq.n	8001952 <TIM_Base_SetConfig+0x62>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <TIM_Base_SetConfig+0xc0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d108      	bne.n	8001964 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4313      	orrs	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	4313      	orrs	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <TIM_Base_SetConfig+0xb8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d103      	bne.n	8001998 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	615a      	str	r2, [r3, #20]
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	40012c00 	.word	0x40012c00
 80019ac:	40000400 	.word	0x40000400
 80019b0:	40000800 	.word	0x40000800

080019b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e033      	b.n	8001a52 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7fe fcf6 	bl	80003f0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2202      	movs	r2, #2
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f90b 	bl	8001c28 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a30:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a40:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b08a      	sub	sp, #40	; 0x28
 8001a5e:	af02      	add	r7, sp, #8
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	4613      	mov	r3, r2
 8001a68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d17c      	bne.n	8001b70 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <HAL_USART_Transmit+0x28>
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e075      	b.n	8001b72 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_USART_Transmit+0x3a>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e06e      	b.n	8001b72 <HAL_USART_Transmit+0x118>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2212      	movs	r2, #18
 8001aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001aaa:	f7fe fe9d 	bl	80007e8 <HAL_GetTick>
 8001aae:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	88fa      	ldrh	r2, [r7, #6]
 8001ab4:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	88fa      	ldrh	r2, [r7, #6]
 8001aba:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac4:	d108      	bne.n	8001ad8 <HAL_USART_Transmit+0x7e>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d104      	bne.n	8001ad8 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	e003      	b.n	8001ae0 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8001ae0:	e02a      	b.n	8001b38 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 f844 	bl	8001b7a <USART_WaitOnFlagUntilTimeout>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e03a      	b.n	8001b72 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10b      	bne.n	8001b1a <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b10:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	3302      	adds	r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	e007      	b.n	8001b2a <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	3301      	adds	r3, #1
 8001b28:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1cf      	bne.n	8001ae2 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2140      	movs	r1, #64	; 0x40
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 f814 	bl	8001b7a <USART_WaitOnFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e00a      	b.n	8001b72 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e000      	b.n	8001b72 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8001b70:	2302      	movs	r3, #2
  }
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3720      	adds	r7, #32
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	4613      	mov	r3, r2
 8001b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001b8a:	e038      	b.n	8001bfe <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b92:	d034      	beq.n	8001bfe <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <USART_WaitOnFlagUntilTimeout+0x30>
 8001b9a:	f7fe fe25 	bl	80007e8 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d229      	bcs.n	8001bfe <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bb8:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0220 	bic.w	r2, r2, #32
 8001bc8:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bd8:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0201 	bic.w	r2, r2, #1
 8001be8:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e00f      	b.n	8001c1e <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4013      	ands	r3, r2
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	bf0c      	ite	eq
 8001c0e:	2301      	moveq	r3, #1
 8001c10:	2300      	movne	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d0b7      	beq.n	8001b8c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 020c 	bic.w	r2, r2, #12
 8001c42:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001c52:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001c5c:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c72:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c8a:	f023 030c 	bic.w	r3, r3, #12
 8001c8e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695a      	ldr	r2, [r3, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001cbc:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a53      	ldr	r2, [pc, #332]	; (8001e10 <USART_SetConfig+0x1e8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d14f      	bne.n	8001d68 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cc8:	f7ff fbda 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
 8001ccc:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009a      	lsls	r2, r3, #2
 8001cd8:	441a      	add	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	4a4b      	ldr	r2, [pc, #300]	; (8001e14 <USART_SetConfig+0x1ec>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	0119      	lsls	r1, r3, #4
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009a      	lsls	r2, r3, #2
 8001cf8:	441a      	add	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d04:	4b43      	ldr	r3, [pc, #268]	; (8001e14 <USART_SetConfig+0x1ec>)
 8001d06:	fba3 0302 	umull	r0, r3, r3, r2
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2064      	movs	r0, #100	; 0x64
 8001d0e:	fb00 f303 	mul.w	r3, r0, r3
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	3332      	adds	r3, #50	; 0x32
 8001d18:	4a3e      	ldr	r2, [pc, #248]	; (8001e14 <USART_SetConfig+0x1ec>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8001d26:	4419      	add	r1, r3
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	009a      	lsls	r2, r3, #2
 8001d32:	441a      	add	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d3e:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <USART_SetConfig+0x1ec>)
 8001d40:	fba3 0302 	umull	r0, r3, r3, r2
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	2064      	movs	r0, #100	; 0x64
 8001d48:	fb00 f303 	mul.w	r3, r0, r3
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	3332      	adds	r3, #50	; 0x32
 8001d52:	4a30      	ldr	r2, [pc, #192]	; (8001e14 <USART_SetConfig+0x1ec>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	095b      	lsrs	r3, r3, #5
 8001d5a:	f003 020f 	and.w	r2, r3, #15
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	440a      	add	r2, r1
 8001d64:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8001d66:	e04e      	b.n	8001e06 <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d68:	f7ff fb76 	bl	8001458 <HAL_RCC_GetPCLK1Freq>
 8001d6c:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	009a      	lsls	r2, r3, #2
 8001d78:	441a      	add	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d84:	4a23      	ldr	r2, [pc, #140]	; (8001e14 <USART_SetConfig+0x1ec>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	0119      	lsls	r1, r3, #4
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	009a      	lsls	r2, r3, #2
 8001d98:	441a      	add	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001da4:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <USART_SetConfig+0x1ec>)
 8001da6:	fba3 0302 	umull	r0, r3, r3, r2
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2064      	movs	r0, #100	; 0x64
 8001dae:	fb00 f303 	mul.w	r3, r0, r3
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	3332      	adds	r3, #50	; 0x32
 8001db8:	4a16      	ldr	r2, [pc, #88]	; (8001e14 <USART_SetConfig+0x1ec>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8001dc6:	4419      	add	r1, r3
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	009a      	lsls	r2, r3, #2
 8001dd2:	441a      	add	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <USART_SetConfig+0x1ec>)
 8001de0:	fba3 0302 	umull	r0, r3, r3, r2
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	2064      	movs	r0, #100	; 0x64
 8001de8:	fb00 f303 	mul.w	r3, r0, r3
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	3332      	adds	r3, #50	; 0x32
 8001df2:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <USART_SetConfig+0x1ec>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	095b      	lsrs	r3, r3, #5
 8001dfa:	f003 020f 	and.w	r2, r3, #15
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	440a      	add	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]
}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40013800 	.word	0x40013800
 8001e14:	51eb851f 	.word	0x51eb851f

08001e18 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f103 0208 	add.w	r2, r3, #8
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f103 0208 	add.w	r2, r3, #8
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f103 0208 	add.w	r2, r3, #8
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b085      	sub	sp, #20
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e84:	d103      	bne.n	8001e8e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	e00c      	b.n	8001ea8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3308      	adds	r3, #8
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	e002      	b.n	8001e9c <vListInsert+0x2e>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d2f6      	bcs.n	8001e96 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	601a      	str	r2, [r3, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6892      	ldr	r2, [r2, #8]
 8001ef4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6852      	ldr	r2, [r2, #4]
 8001efe:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d103      	bne.n	8001f12 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	1e5a      	subs	r2, r3, #1
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10a      	bne.n	8001f5e <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4c:	f383 8811 	msr	BASEPRI, r3
 8001f50:	f3bf 8f6f 	isb	sy
 8001f54:	f3bf 8f4f 	dsb	sy
 8001f58:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001f5a:	bf00      	nop
 8001f5c:	e7fe      	b.n	8001f5c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d05d      	beq.n	8002020 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d059      	beq.n	8002020 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f74:	2100      	movs	r1, #0
 8001f76:	fba3 2302 	umull	r2, r3, r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d000      	beq.n	8001f80 <xQueueGenericReset+0x50>
 8001f7e:	2101      	movs	r1, #1
 8001f80:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d14c      	bne.n	8002020 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001f86:	f002 fa3b 	bl	8004400 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f92:	6939      	ldr	r1, [r7, #16]
 8001f94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	441a      	add	r2, r3
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6939      	ldr	r1, [r7, #16]
 8001fba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	441a      	add	r2, r3
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	22ff      	movs	r2, #255	; 0xff
 8001fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	22ff      	movs	r2, #255	; 0xff
 8001fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d114      	bne.n	8002006 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01a      	beq.n	800201a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	3310      	adds	r3, #16
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f001 f9d7 	bl	800339c <xTaskRemoveFromEventList>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d012      	beq.n	800201a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <xQueueGenericReset+0x11c>)
 8001ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	f3bf 8f4f 	dsb	sy
 8002000:	f3bf 8f6f 	isb	sy
 8002004:	e009      	b.n	800201a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	3310      	adds	r3, #16
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff04 	bl	8001e18 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	3324      	adds	r3, #36	; 0x24
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff feff 	bl	8001e18 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800201a:	f002 fa21 	bl	8004460 <vPortExitCritical>
 800201e:	e001      	b.n	8002024 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10a      	bne.n	8002040 <xQueueGenericReset+0x110>
        __asm volatile
 800202a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800202e:	f383 8811 	msr	BASEPRI, r3
 8002032:	f3bf 8f6f 	isb	sy
 8002036:	f3bf 8f4f 	dsb	sy
 800203a:	60bb      	str	r3, [r7, #8]
    }
 800203c:	bf00      	nop
 800203e:	e7fe      	b.n	800203e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002040:	697b      	ldr	r3, [r7, #20]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	e000ed04 	.word	0xe000ed04

08002050 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af02      	add	r7, sp, #8
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	4613      	mov	r3, r2
 800205c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d02e      	beq.n	80020c6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002068:	2100      	movs	r1, #0
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	fba3 2302 	umull	r2, r3, r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d000      	beq.n	8002078 <xQueueGenericCreate+0x28>
 8002076:	2101      	movs	r1, #1
 8002078:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800207a:	2b00      	cmp	r3, #0
 800207c:	d123      	bne.n	80020c6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002086:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800208a:	d81c      	bhi.n	80020c6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	fb02 f303 	mul.w	r3, r2, r3
 8002094:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	3350      	adds	r3, #80	; 0x50
 800209a:	4618      	mov	r0, r3
 800209c:	f002 fa70 	bl	8004580 <pvPortMalloc>
 80020a0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01c      	beq.n	80020e2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3350      	adds	r3, #80	; 0x50
 80020b0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020b2:	79fa      	ldrb	r2, [r7, #7]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f814 	bl	80020ec <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80020c4:	e00d      	b.n	80020e2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10a      	bne.n	80020e2 <xQueueGenericCreate+0x92>
        __asm volatile
 80020cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d0:	f383 8811 	msr	BASEPRI, r3
 80020d4:	f3bf 8f6f 	isb	sy
 80020d8:	f3bf 8f4f 	dsb	sy
 80020dc:	613b      	str	r3, [r7, #16]
    }
 80020de:	bf00      	nop
 80020e0:	e7fe      	b.n	80020e0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80020e2:	69fb      	ldr	r3, [r7, #28]
    }
 80020e4:	4618      	mov	r0, r3
 80020e6:	3720      	adds	r7, #32
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d103      	bne.n	8002108 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e002      	b.n	800210e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800211a:	2101      	movs	r1, #1
 800211c:	69b8      	ldr	r0, [r7, #24]
 800211e:	f7ff ff07 	bl	8001f30 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08e      	sub	sp, #56	; 0x38
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002142:	2300      	movs	r3, #0
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <xQueueGenericSend+0x32>
        __asm volatile
 8002150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002154:	f383 8811 	msr	BASEPRI, r3
 8002158:	f3bf 8f6f 	isb	sy
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002162:	bf00      	nop
 8002164:	e7fe      	b.n	8002164 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d103      	bne.n	8002174 <xQueueGenericSend+0x40>
 800216c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <xQueueGenericSend+0x44>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <xQueueGenericSend+0x46>
 8002178:	2300      	movs	r3, #0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10a      	bne.n	8002194 <xQueueGenericSend+0x60>
        __asm volatile
 800217e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002182:	f383 8811 	msr	BASEPRI, r3
 8002186:	f3bf 8f6f 	isb	sy
 800218a:	f3bf 8f4f 	dsb	sy
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002190:	bf00      	nop
 8002192:	e7fe      	b.n	8002192 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d103      	bne.n	80021a2 <xQueueGenericSend+0x6e>
 800219a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <xQueueGenericSend+0x72>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <xQueueGenericSend+0x74>
 80021a6:	2300      	movs	r3, #0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10a      	bne.n	80021c2 <xQueueGenericSend+0x8e>
        __asm volatile
 80021ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b0:	f383 8811 	msr	BASEPRI, r3
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	623b      	str	r3, [r7, #32]
    }
 80021be:	bf00      	nop
 80021c0:	e7fe      	b.n	80021c0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021c2:	f001 faf9 	bl	80037b8 <xTaskGetSchedulerState>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <xQueueGenericSend+0x9e>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <xQueueGenericSend+0xa2>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <xQueueGenericSend+0xa4>
 80021d6:	2300      	movs	r3, #0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10a      	bne.n	80021f2 <xQueueGenericSend+0xbe>
        __asm volatile
 80021dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e0:	f383 8811 	msr	BASEPRI, r3
 80021e4:	f3bf 8f6f 	isb	sy
 80021e8:	f3bf 8f4f 	dsb	sy
 80021ec:	61fb      	str	r3, [r7, #28]
    }
 80021ee:	bf00      	nop
 80021f0:	e7fe      	b.n	80021f0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80021f2:	f002 f905 	bl	8004400 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	429a      	cmp	r2, r3
 8002200:	d302      	bcc.n	8002208 <xQueueGenericSend+0xd4>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d129      	bne.n	800225c <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800220e:	f000 fa84 	bl	800271a <prvCopyDataToQueue>
 8002212:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2b00      	cmp	r3, #0
 800221a:	d010      	beq.n	800223e <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800221c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221e:	3324      	adds	r3, #36	; 0x24
 8002220:	4618      	mov	r0, r3
 8002222:	f001 f8bb 	bl	800339c <xTaskRemoveFromEventList>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d013      	beq.n	8002254 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800222c:	4b3f      	ldr	r3, [pc, #252]	; (800232c <xQueueGenericSend+0x1f8>)
 800222e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	f3bf 8f6f 	isb	sy
 800223c:	e00a      	b.n	8002254 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002244:	4b39      	ldr	r3, [pc, #228]	; (800232c <xQueueGenericSend+0x1f8>)
 8002246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	f3bf 8f4f 	dsb	sy
 8002250:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002254:	f002 f904 	bl	8004460 <vPortExitCritical>
                return pdPASS;
 8002258:	2301      	movs	r3, #1
 800225a:	e063      	b.n	8002324 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d103      	bne.n	800226a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002262:	f002 f8fd 	bl	8004460 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002266:	2300      	movs	r3, #0
 8002268:	e05c      	b.n	8002324 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800226a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226c:	2b00      	cmp	r3, #0
 800226e:	d106      	bne.n	800227e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	4618      	mov	r0, r3
 8002276:	f001 f967 	bl	8003548 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800227a:	2301      	movs	r3, #1
 800227c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800227e:	f002 f8ef 	bl	8004460 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002282:	f000 fd99 	bl	8002db8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002286:	f002 f8bb 	bl	8004400 <vPortEnterCritical>
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002290:	b25b      	sxtb	r3, r3
 8002292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002296:	d103      	bne.n	80022a0 <xQueueGenericSend+0x16c>
 8002298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d103      	bne.n	80022b6 <xQueueGenericSend+0x182>
 80022ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022b6:	f002 f8d3 	bl	8004460 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022ba:	1d3a      	adds	r2, r7, #4
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f001 f956 	bl	8003574 <xTaskCheckForTimeOut>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d124      	bne.n	8002318 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80022ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022d0:	f000 fb1b 	bl	800290a <prvIsQueueFull>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d018      	beq.n	800230c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	3310      	adds	r3, #16
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	4611      	mov	r1, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fff0 	bl	80032c8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80022e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022ea:	f000 faa6 	bl	800283a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80022ee:	f000 fd71 	bl	8002dd4 <xTaskResumeAll>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f47f af7c 	bne.w	80021f2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <xQueueGenericSend+0x1f8>)
 80022fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	f3bf 8f4f 	dsb	sy
 8002306:	f3bf 8f6f 	isb	sy
 800230a:	e772      	b.n	80021f2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800230c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800230e:	f000 fa94 	bl	800283a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002312:	f000 fd5f 	bl	8002dd4 <xTaskResumeAll>
 8002316:	e76c      	b.n	80021f2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800231a:	f000 fa8e 	bl	800283a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800231e:	f000 fd59 	bl	8002dd4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002322:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002324:	4618      	mov	r0, r3
 8002326:	3738      	adds	r7, #56	; 0x38
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	e000ed04 	.word	0xe000ed04

08002330 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08c      	sub	sp, #48	; 0x30
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800233c:	2300      	movs	r3, #0
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10a      	bne.n	8002360 <xQueueReceive+0x30>
        __asm volatile
 800234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234e:	f383 8811 	msr	BASEPRI, r3
 8002352:	f3bf 8f6f 	isb	sy
 8002356:	f3bf 8f4f 	dsb	sy
 800235a:	623b      	str	r3, [r7, #32]
    }
 800235c:	bf00      	nop
 800235e:	e7fe      	b.n	800235e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d103      	bne.n	800236e <xQueueReceive+0x3e>
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <xQueueReceive+0x42>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <xQueueReceive+0x44>
 8002372:	2300      	movs	r3, #0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10a      	bne.n	800238e <xQueueReceive+0x5e>
        __asm volatile
 8002378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237c:	f383 8811 	msr	BASEPRI, r3
 8002380:	f3bf 8f6f 	isb	sy
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	61fb      	str	r3, [r7, #28]
    }
 800238a:	bf00      	nop
 800238c:	e7fe      	b.n	800238c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800238e:	f001 fa13 	bl	80037b8 <xTaskGetSchedulerState>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <xQueueReceive+0x6e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <xQueueReceive+0x72>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <xQueueReceive+0x74>
 80023a2:	2300      	movs	r3, #0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10a      	bne.n	80023be <xQueueReceive+0x8e>
        __asm volatile
 80023a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ac:	f383 8811 	msr	BASEPRI, r3
 80023b0:	f3bf 8f6f 	isb	sy
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	61bb      	str	r3, [r7, #24]
    }
 80023ba:	bf00      	nop
 80023bc:	e7fe      	b.n	80023bc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80023be:	f002 f81f 	bl	8004400 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01f      	beq.n	800240e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023d2:	f000 fa0c 	bl	80027ee <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	1e5a      	subs	r2, r3, #1
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00f      	beq.n	8002406 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	3310      	adds	r3, #16
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 ffd6 	bl	800339c <xTaskRemoveFromEventList>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80023f6:	4b3d      	ldr	r3, [pc, #244]	; (80024ec <xQueueReceive+0x1bc>)
 80023f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002406:	f002 f82b 	bl	8004460 <vPortExitCritical>
                return pdPASS;
 800240a:	2301      	movs	r3, #1
 800240c:	e069      	b.n	80024e2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d103      	bne.n	800241c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002414:	f002 f824 	bl	8004460 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002418:	2300      	movs	r3, #0
 800241a:	e062      	b.n	80024e2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002422:	f107 0310 	add.w	r3, r7, #16
 8002426:	4618      	mov	r0, r3
 8002428:	f001 f88e 	bl	8003548 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800242c:	2301      	movs	r3, #1
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002430:	f002 f816 	bl	8004460 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002434:	f000 fcc0 	bl	8002db8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002438:	f001 ffe2 	bl	8004400 <vPortEnterCritical>
 800243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002442:	b25b      	sxtb	r3, r3
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d103      	bne.n	8002452 <xQueueReceive+0x122>
 800244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002458:	b25b      	sxtb	r3, r3
 800245a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245e:	d103      	bne.n	8002468 <xQueueReceive+0x138>
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002468:	f001 fffa 	bl	8004460 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800246c:	1d3a      	adds	r2, r7, #4
 800246e:	f107 0310 	add.w	r3, r7, #16
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f001 f87d 	bl	8003574 <xTaskCheckForTimeOut>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d123      	bne.n	80024c8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002482:	f000 fa2c 	bl	80028de <prvIsQueueEmpty>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d017      	beq.n	80024bc <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248e:	3324      	adds	r3, #36	; 0x24
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f000 ff17 	bl	80032c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800249a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800249c:	f000 f9cd 	bl	800283a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80024a0:	f000 fc98 	bl	8002dd4 <xTaskResumeAll>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d189      	bne.n	80023be <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <xQueueReceive+0x1bc>)
 80024ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	f3bf 8f6f 	isb	sy
 80024ba:	e780      	b.n	80023be <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80024bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024be:	f000 f9bc 	bl	800283a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80024c2:	f000 fc87 	bl	8002dd4 <xTaskResumeAll>
 80024c6:	e77a      	b.n	80023be <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80024c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024ca:	f000 f9b6 	bl	800283a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80024ce:	f000 fc81 	bl	8002dd4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024d4:	f000 fa03 	bl	80028de <prvIsQueueEmpty>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f43f af6f 	beq.w	80023be <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80024e0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3730      	adds	r7, #48	; 0x30
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	e000ed04 	.word	0xe000ed04

080024f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08c      	sub	sp, #48	; 0x30
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002502:	2300      	movs	r3, #0
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10a      	bne.n	8002522 <xQueueSemaphoreTake+0x32>
        __asm volatile
 800250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002510:	f383 8811 	msr	BASEPRI, r3
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	61bb      	str	r3, [r7, #24]
    }
 800251e:	bf00      	nop
 8002520:	e7fe      	b.n	8002520 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800252a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252e:	f383 8811 	msr	BASEPRI, r3
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	617b      	str	r3, [r7, #20]
    }
 800253c:	bf00      	nop
 800253e:	e7fe      	b.n	800253e <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002540:	f001 f93a 	bl	80037b8 <xTaskGetSchedulerState>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <xQueueSemaphoreTake+0x60>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <xQueueSemaphoreTake+0x64>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <xQueueSemaphoreTake+0x66>
 8002554:	2300      	movs	r3, #0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10a      	bne.n	8002570 <xQueueSemaphoreTake+0x80>
        __asm volatile
 800255a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255e:	f383 8811 	msr	BASEPRI, r3
 8002562:	f3bf 8f6f 	isb	sy
 8002566:	f3bf 8f4f 	dsb	sy
 800256a:	613b      	str	r3, [r7, #16]
    }
 800256c:	bf00      	nop
 800256e:	e7fe      	b.n	800256e <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002570:	f001 ff46 	bl	8004400 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d024      	beq.n	80025ca <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	1e5a      	subs	r2, r3, #1
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d104      	bne.n	800259a <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002590:	f001 fb2a 	bl	8003be8 <pvTaskIncrementMutexHeldCount>
 8002594:	4602      	mov	r2, r0
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00f      	beq.n	80025c2 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	3310      	adds	r3, #16
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fef8 	bl	800339c <xTaskRemoveFromEventList>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80025b2:	4b4d      	ldr	r3, [pc, #308]	; (80026e8 <xQueueSemaphoreTake+0x1f8>)
 80025b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80025c2:	f001 ff4d 	bl	8004460 <vPortExitCritical>
                return pdPASS;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e089      	b.n	80026de <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80025d0:	f001 ff46 	bl	8004460 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e082      	b.n	80026de <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025de:	f107 0308 	add.w	r3, r7, #8
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 ffb0 	bl	8003548 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025e8:	2301      	movs	r3, #1
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025ec:	f001 ff38 	bl	8004460 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025f0:	f000 fbe2 	bl	8002db8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025f4:	f001 ff04 	bl	8004400 <vPortEnterCritical>
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025fe:	b25b      	sxtb	r3, r3
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002604:	d103      	bne.n	800260e <xQueueSemaphoreTake+0x11e>
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002614:	b25b      	sxtb	r3, r3
 8002616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261a:	d103      	bne.n	8002624 <xQueueSemaphoreTake+0x134>
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002624:	f001 ff1c 	bl	8004460 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002628:	463a      	mov	r2, r7
 800262a:	f107 0308 	add.w	r3, r7, #8
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f000 ff9f 	bl	8003574 <xTaskCheckForTimeOut>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d132      	bne.n	80026a2 <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800263c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800263e:	f000 f94e 	bl	80028de <prvIsQueueEmpty>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d026      	beq.n	8002696 <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 8002650:	f001 fed6 	bl	8004400 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	4618      	mov	r0, r3
 800265a:	f001 f8cb 	bl	80037f4 <xTaskPriorityInherit>
 800265e:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 8002660:	f001 fefe 	bl	8004460 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	3324      	adds	r3, #36	; 0x24
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f000 fe2b 	bl	80032c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002672:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002674:	f000 f8e1 	bl	800283a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002678:	f000 fbac 	bl	8002dd4 <xTaskResumeAll>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	f47f af76 	bne.w	8002570 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8002684:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <xQueueSemaphoreTake+0x1f8>)
 8002686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	e76c      	b.n	8002570 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002696:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002698:	f000 f8cf 	bl	800283a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800269c:	f000 fb9a 	bl	8002dd4 <xTaskResumeAll>
 80026a0:	e766      	b.n	8002570 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80026a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026a4:	f000 f8c9 	bl	800283a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026a8:	f000 fb94 	bl	8002dd4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026ae:	f000 f916 	bl	80028de <prvIsQueueEmpty>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f43f af5b 	beq.w	8002570 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 80026c0:	f001 fe9e 	bl	8004400 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80026c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026c6:	f000 f811 	bl	80026ec <prvGetDisinheritPriorityAfterTimeout>
 80026ca:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	69f9      	ldr	r1, [r7, #28]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f001 f9d0 	bl	8003a78 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80026d8:	f001 fec2 	bl	8004460 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80026dc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3730      	adds	r7, #48	; 0x30
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	e000ed04 	.word	0xe000ed04

080026ec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d006      	beq.n	800270a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f1c3 0305 	rsb	r3, r3, #5
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	e001      	b.n	800270e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800270e:	68fb      	ldr	r3, [r7, #12]
    }
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b086      	sub	sp, #24
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10d      	bne.n	8002754 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d14d      	bne.n	80027dc <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4618      	mov	r0, r3
 8002746:	f001 f8f3 	bl	8003930 <xTaskPriorityDisinherit>
 800274a:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
 8002752:	e043      	b.n	80027dc <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d119      	bne.n	800278e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6858      	ldr	r0, [r3, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	461a      	mov	r2, r3
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	f002 faaf 	bl	8004cc8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	441a      	add	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	429a      	cmp	r2, r3
 8002782:	d32b      	bcc.n	80027dc <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	e026      	b.n	80027dc <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	68d8      	ldr	r0, [r3, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	461a      	mov	r2, r3
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	f002 fa95 	bl	8004cc8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	425b      	negs	r3, r3
 80027a8:	441a      	add	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d207      	bcs.n	80027ca <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	425b      	negs	r3, r3
 80027c4:	441a      	add	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d105      	bne.n	80027dc <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	3b01      	subs	r3, #1
 80027da:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80027e4:	697b      	ldr	r3, [r7, #20]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d018      	beq.n	8002832 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	441a      	add	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	429a      	cmp	r2, r3
 8002818:	d303      	bcc.n	8002822 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68d9      	ldr	r1, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	461a      	mov	r2, r3
 800282c:	6838      	ldr	r0, [r7, #0]
 800282e:	f002 fa4b 	bl	8004cc8 <memcpy>
    }
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002842:	f001 fddd 	bl	8004400 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800284c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800284e:	e011      	b.n	8002874 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	2b00      	cmp	r3, #0
 8002856:	d012      	beq.n	800287e <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3324      	adds	r3, #36	; 0x24
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fd9d 	bl	800339c <xTaskRemoveFromEventList>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002868:	f000 feea 	bl	8003640 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	3b01      	subs	r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002878:	2b00      	cmp	r3, #0
 800287a:	dce9      	bgt.n	8002850 <prvUnlockQueue+0x16>
 800287c:	e000      	b.n	8002880 <prvUnlockQueue+0x46>
                    break;
 800287e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	22ff      	movs	r2, #255	; 0xff
 8002884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002888:	f001 fdea 	bl	8004460 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800288c:	f001 fdb8 	bl	8004400 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002896:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002898:	e011      	b.n	80028be <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d012      	beq.n	80028c8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3310      	adds	r3, #16
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fd78 	bl	800339c <xTaskRemoveFromEventList>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80028b2:	f000 fec5 	bl	8003640 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80028b6:	7bbb      	ldrb	r3, [r7, #14]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	dce9      	bgt.n	800289a <prvUnlockQueue+0x60>
 80028c6:	e000      	b.n	80028ca <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80028c8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	22ff      	movs	r2, #255	; 0xff
 80028ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80028d2:	f001 fdc5 	bl	8004460 <vPortExitCritical>
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80028e6:	f001 fd8b 	bl	8004400 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80028f2:	2301      	movs	r3, #1
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	e001      	b.n	80028fc <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80028fc:	f001 fdb0 	bl	8004460 <vPortExitCritical>

    return xReturn;
 8002900:	68fb      	ldr	r3, [r7, #12]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002912:	f001 fd75 	bl	8004400 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	429a      	cmp	r2, r3
 8002920:	d102      	bne.n	8002928 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002922:	2301      	movs	r3, #1
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e001      	b.n	800292c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800292c:	f001 fd98 	bl	8004460 <vPortExitCritical>

    return xReturn;
 8002930:	68fb      	ldr	r3, [r7, #12]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10a      	bne.n	8002966 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	60fb      	str	r3, [r7, #12]
    }
 8002962:	bf00      	nop
 8002964:	e7fe      	b.n	8002964 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d024      	beq.n	80029b6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	e01e      	b.n	80029b0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002972:	4a18      	ldr	r2, [pc, #96]	; (80029d4 <vQueueAddToRegistry+0x98>)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4413      	add	r3, r2
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	429a      	cmp	r2, r3
 8002980:	d105      	bne.n	800298e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <vQueueAddToRegistry+0x98>)
 8002988:	4413      	add	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
                    break;
 800298c:	e013      	b.n	80029b6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10a      	bne.n	80029aa <vQueueAddToRegistry+0x6e>
 8002994:	4a0f      	ldr	r2, [pc, #60]	; (80029d4 <vQueueAddToRegistry+0x98>)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d104      	bne.n	80029aa <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4a0b      	ldr	r2, [pc, #44]	; (80029d4 <vQueueAddToRegistry+0x98>)
 80029a6:	4413      	add	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	3301      	adds	r3, #1
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b07      	cmp	r3, #7
 80029b4:	d9dd      	bls.n	8002972 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80029c8:	bf00      	nop
 80029ca:	371c      	adds	r7, #28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000130 	.word	0x20000130

080029d8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80029e8:	f001 fd0a 	bl	8004400 <vPortEnterCritical>
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029f2:	b25b      	sxtb	r3, r3
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d103      	bne.n	8002a02 <vQueueWaitForMessageRestricted+0x2a>
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a08:	b25b      	sxtb	r3, r3
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d103      	bne.n	8002a18 <vQueueWaitForMessageRestricted+0x40>
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a18:	f001 fd22 	bl	8004460 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d106      	bne.n	8002a32 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3324      	adds	r3, #36	; 0x24
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fc6f 	bl	8003310 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	f7ff ff01 	bl	800283a <prvUnlockQueue>
    }
 8002a38:	bf00      	nop
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08c      	sub	sp, #48	; 0x30
 8002a44:	af04      	add	r7, sp, #16
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f001 fd93 	bl	8004580 <pvPortMalloc>
 8002a5a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d013      	beq.n	8002a8a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a62:	2058      	movs	r0, #88	; 0x58
 8002a64:	f001 fd8c 	bl	8004580 <pvPortMalloc>
 8002a68:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002a70:	2258      	movs	r2, #88	; 0x58
 8002a72:	2100      	movs	r1, #0
 8002a74:	69f8      	ldr	r0, [r7, #28]
 8002a76:	f002 f8ac 	bl	8004bd2 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a80:	e005      	b.n	8002a8e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f001 fe36 	bl	80046f4 <vPortFree>
 8002a88:	e001      	b.n	8002a8e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d013      	beq.n	8002abc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a94:	88fa      	ldrh	r2, [r7, #6]
 8002a96:	2300      	movs	r3, #0
 8002a98:	9303      	str	r3, [sp, #12]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	9302      	str	r3, [sp, #8]
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f80e 	bl	8002acc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002ab0:	69f8      	ldr	r0, [r7, #28]
 8002ab2:	f000 f899 	bl	8002be8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	e002      	b.n	8002ac2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ac2:	69bb      	ldr	r3, [r7, #24]
    }
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3720      	adds	r7, #32
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	21a5      	movs	r1, #165	; 0xa5
 8002ae6:	f002 f874 	bl	8004bd2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002af4:	3b01      	subs	r3, #1
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f023 0307 	bic.w	r3, r3, #7
 8002b02:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	617b      	str	r3, [r7, #20]
    }
 8002b20:	bf00      	nop
 8002b22:	e7fe      	b.n	8002b22 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d01e      	beq.n	8002b68 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	e012      	b.n	8002b56 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	4413      	add	r3, r2
 8002b36:	7819      	ldrb	r1, [r3, #0]
 8002b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3334      	adds	r3, #52	; 0x34
 8002b40:	460a      	mov	r2, r1
 8002b42:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	4413      	add	r3, r2
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d006      	beq.n	8002b5e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	3301      	adds	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	2b09      	cmp	r3, #9
 8002b5a:	d9e9      	bls.n	8002b30 <prvInitialiseNewTask+0x64>
 8002b5c:	e000      	b.n	8002b60 <prvInitialiseNewTask+0x94>
            {
                break;
 8002b5e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d90a      	bls.n	8002b84 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	613b      	str	r3, [r7, #16]
    }
 8002b80:	bf00      	nop
 8002b82:	e7fe      	b.n	8002b82 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d901      	bls.n	8002b8e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b8a:	2304      	movs	r3, #4
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b92:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b98:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff f959 	bl	8001e56 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	3318      	adds	r3, #24
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff f954 	bl	8001e56 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb6:	f1c3 0205 	rsb	r2, r3, #5
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	68f9      	ldr	r1, [r7, #12]
 8002bc8:	69b8      	ldr	r0, [r7, #24]
 8002bca:	f001 fb23 	bl	8004214 <pxPortInitialiseStack>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bde:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002be0:	bf00      	nop
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002bf0:	f001 fc06 	bl	8004400 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002bf4:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <prvAddNewTaskToReadyList+0x110>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	4a3f      	ldr	r2, [pc, #252]	; (8002cf8 <prvAddNewTaskToReadyList+0x110>)
 8002bfc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002bfe:	4b3f      	ldr	r3, [pc, #252]	; (8002cfc <prvAddNewTaskToReadyList+0x114>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c06:	4a3d      	ldr	r2, [pc, #244]	; (8002cfc <prvAddNewTaskToReadyList+0x114>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c0c:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <prvAddNewTaskToReadyList+0x110>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d110      	bne.n	8002c36 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c14:	f000 fd38 	bl	8003688 <prvInitialiseTaskLists>
 8002c18:	e00d      	b.n	8002c36 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c1a:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <prvAddNewTaskToReadyList+0x118>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c22:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <prvAddNewTaskToReadyList+0x114>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d802      	bhi.n	8002c36 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c30:	4a32      	ldr	r2, [pc, #200]	; (8002cfc <prvAddNewTaskToReadyList+0x114>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c36:	4b33      	ldr	r3, [pc, #204]	; (8002d04 <prvAddNewTaskToReadyList+0x11c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	4a31      	ldr	r2, [pc, #196]	; (8002d04 <prvAddNewTaskToReadyList+0x11c>)
 8002c3e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c40:	4b30      	ldr	r3, [pc, #192]	; (8002d04 <prvAddNewTaskToReadyList+0x11c>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <prvAddNewTaskToReadyList+0x120>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	4a2c      	ldr	r2, [pc, #176]	; (8002d08 <prvAddNewTaskToReadyList+0x120>)
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5e:	492b      	ldr	r1, [pc, #172]	; (8002d0c <prvAddNewTaskToReadyList+0x124>)
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	3204      	adds	r2, #4
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	1d1a      	adds	r2, r3, #4
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	; (8002d0c <prvAddNewTaskToReadyList+0x124>)
 8002c9e:	441a      	add	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	615a      	str	r2, [r3, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca8:	4918      	ldr	r1, [pc, #96]	; (8002d0c <prvAddNewTaskToReadyList+0x124>)
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	1c59      	adds	r1, r3, #1
 8002cb8:	4814      	ldr	r0, [pc, #80]	; (8002d0c <prvAddNewTaskToReadyList+0x124>)
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4403      	add	r3, r0
 8002cc4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002cc6:	f001 fbcb 	bl	8004460 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <prvAddNewTaskToReadyList+0x118>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00e      	beq.n	8002cf0 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <prvAddNewTaskToReadyList+0x114>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d207      	bcs.n	8002cf0 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <prvAddNewTaskToReadyList+0x128>)
 8002ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000248 	.word	0x20000248
 8002cfc:	20000170 	.word	0x20000170
 8002d00:	20000254 	.word	0x20000254
 8002d04:	20000264 	.word	0x20000264
 8002d08:	20000250 	.word	0x20000250
 8002d0c:	20000174 	.word	0x20000174
 8002d10:	e000ed04 	.word	0xe000ed04

08002d14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002d1a:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <vTaskStartScheduler+0x88>)
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2300      	movs	r3, #0
 8002d24:	2282      	movs	r2, #130	; 0x82
 8002d26:	491e      	ldr	r1, [pc, #120]	; (8002da0 <vTaskStartScheduler+0x8c>)
 8002d28:	481e      	ldr	r0, [pc, #120]	; (8002da4 <vTaskStartScheduler+0x90>)
 8002d2a:	f7ff fe89 	bl	8002a40 <xTaskCreate>
 8002d2e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d102      	bne.n	8002d3c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002d36:	f000 ffeb 	bl	8003d10 <xTimerCreateTimerTask>
 8002d3a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d116      	bne.n	8002d70 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	60bb      	str	r3, [r7, #8]
    }
 8002d54:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <vTaskStartScheduler+0x94>)
 8002d58:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d5e:	4b13      	ldr	r3, [pc, #76]	; (8002dac <vTaskStartScheduler+0x98>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <vTaskStartScheduler+0x9c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002d6a:	f001 fad7 	bl	800431c <xPortStartScheduler>
 8002d6e:	e00e      	b.n	8002d8e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d76:	d10a      	bne.n	8002d8e <vTaskStartScheduler+0x7a>
        __asm volatile
 8002d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	607b      	str	r3, [r7, #4]
    }
 8002d8a:	bf00      	nop
 8002d8c:	e7fe      	b.n	8002d8c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <vTaskStartScheduler+0xa0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
}
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	2000026c 	.word	0x2000026c
 8002da0:	0800596c 	.word	0x0800596c
 8002da4:	08003659 	.word	0x08003659
 8002da8:	20000268 	.word	0x20000268
 8002dac:	20000254 	.word	0x20000254
 8002db0:	2000024c 	.word	0x2000024c
 8002db4:	2000000c 	.word	0x2000000c

08002db8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <vTaskSuspendAll+0x18>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	4a03      	ldr	r2, [pc, #12]	; (8002dd0 <vTaskSuspendAll+0x18>)
 8002dc4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002dc6:	bf00      	nop
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000270 	.word	0x20000270

08002dd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002de2:	4b71      	ldr	r3, [pc, #452]	; (8002fa8 <xTaskResumeAll+0x1d4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10a      	bne.n	8002e00 <xTaskResumeAll+0x2c>
        __asm volatile
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	607b      	str	r3, [r7, #4]
    }
 8002dfc:	bf00      	nop
 8002dfe:	e7fe      	b.n	8002dfe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e00:	f001 fafe 	bl	8004400 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e04:	4b68      	ldr	r3, [pc, #416]	; (8002fa8 <xTaskResumeAll+0x1d4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	4a67      	ldr	r2, [pc, #412]	; (8002fa8 <xTaskResumeAll+0x1d4>)
 8002e0c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e0e:	4b66      	ldr	r3, [pc, #408]	; (8002fa8 <xTaskResumeAll+0x1d4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 80c0 	bne.w	8002f98 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e18:	4b64      	ldr	r3, [pc, #400]	; (8002fac <xTaskResumeAll+0x1d8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80bb 	beq.w	8002f98 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e22:	e08a      	b.n	8002f3a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e24:	4b62      	ldr	r3, [pc, #392]	; (8002fb0 <xTaskResumeAll+0x1dc>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	6a12      	ldr	r2, [r2, #32]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	69d2      	ldr	r2, [r2, #28]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3318      	adds	r3, #24
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d103      	bne.n	8002e5a <xTaskResumeAll+0x86>
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	6a1a      	ldr	r2, [r3, #32]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	1e5a      	subs	r2, r3, #1
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	68d2      	ldr	r2, [r2, #12]
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	6892      	ldr	r2, [r2, #8]
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d103      	bne.n	8002e98 <xTaskResumeAll+0xc4>
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	605a      	str	r2, [r3, #4]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	615a      	str	r2, [r3, #20]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	1e5a      	subs	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	2201      	movs	r2, #1
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	4b40      	ldr	r3, [pc, #256]	; (8002fb4 <xTaskResumeAll+0x1e0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	4a3f      	ldr	r2, [pc, #252]	; (8002fb4 <xTaskResumeAll+0x1e0>)
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebe:	493e      	ldr	r1, [pc, #248]	; (8002fb8 <xTaskResumeAll+0x1e4>)
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	3304      	adds	r3, #4
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	3204      	adds	r2, #4
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	1d1a      	adds	r2, r3, #4
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4a2e      	ldr	r2, [pc, #184]	; (8002fb8 <xTaskResumeAll+0x1e4>)
 8002efe:	441a      	add	r2, r3
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	615a      	str	r2, [r3, #20]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f08:	492b      	ldr	r1, [pc, #172]	; (8002fb8 <xTaskResumeAll+0x1e4>)
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	1c59      	adds	r1, r3, #1
 8002f18:	4827      	ldr	r0, [pc, #156]	; (8002fb8 <xTaskResumeAll+0x1e4>)
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4403      	add	r3, r0
 8002f24:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2a:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <xTaskResumeAll+0x1e8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d302      	bcc.n	8002f3a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002f34:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <xTaskResumeAll+0x1ec>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <xTaskResumeAll+0x1dc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f47f af70 	bne.w	8002e24 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002f4a:	f000 fc1b 	bl	8003784 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f4e:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <xTaskResumeAll+0x1f0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d010      	beq.n	8002f7c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002f5a:	f000 f845 	bl	8002fe8 <xTaskIncrementTick>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002f64:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <xTaskResumeAll+0x1ec>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f1      	bne.n	8002f5a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <xTaskResumeAll+0x1f0>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002f7c:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <xTaskResumeAll+0x1ec>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d009      	beq.n	8002f98 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002f84:	2301      	movs	r3, #1
 8002f86:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002f88:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <xTaskResumeAll+0x1f4>)
 8002f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f98:	f001 fa62 	bl	8004460 <vPortExitCritical>

    return xAlreadyYielded;
 8002f9c:	69bb      	ldr	r3, [r7, #24]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000270 	.word	0x20000270
 8002fac:	20000248 	.word	0x20000248
 8002fb0:	20000208 	.word	0x20000208
 8002fb4:	20000250 	.word	0x20000250
 8002fb8:	20000174 	.word	0x20000174
 8002fbc:	20000170 	.word	0x20000170
 8002fc0:	2000025c 	.word	0x2000025c
 8002fc4:	20000258 	.word	0x20000258
 8002fc8:	e000ed04 	.word	0xe000ed04

08002fcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002fd2:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <xTaskGetTickCount+0x18>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002fd8:	687b      	ldr	r3, [r7, #4]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	2000024c 	.word	0x2000024c

08002fe8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	; 0x28
 8002fec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ff2:	4b7d      	ldr	r3, [pc, #500]	; (80031e8 <xTaskIncrementTick+0x200>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 80ec 	bne.w	80031d4 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ffc:	4b7b      	ldr	r3, [pc, #492]	; (80031ec <xTaskIncrementTick+0x204>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3301      	adds	r3, #1
 8003002:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003004:	4a79      	ldr	r2, [pc, #484]	; (80031ec <xTaskIncrementTick+0x204>)
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d120      	bne.n	8003052 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003010:	4b77      	ldr	r3, [pc, #476]	; (80031f0 <xTaskIncrementTick+0x208>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <xTaskIncrementTick+0x48>
        __asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	607b      	str	r3, [r7, #4]
    }
 800302c:	bf00      	nop
 800302e:	e7fe      	b.n	800302e <xTaskIncrementTick+0x46>
 8003030:	4b6f      	ldr	r3, [pc, #444]	; (80031f0 <xTaskIncrementTick+0x208>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	4b6f      	ldr	r3, [pc, #444]	; (80031f4 <xTaskIncrementTick+0x20c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a6d      	ldr	r2, [pc, #436]	; (80031f0 <xTaskIncrementTick+0x208>)
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4a6d      	ldr	r2, [pc, #436]	; (80031f4 <xTaskIncrementTick+0x20c>)
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	4b6c      	ldr	r3, [pc, #432]	; (80031f8 <xTaskIncrementTick+0x210>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3301      	adds	r3, #1
 800304a:	4a6b      	ldr	r2, [pc, #428]	; (80031f8 <xTaskIncrementTick+0x210>)
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	f000 fb99 	bl	8003784 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003052:	4b6a      	ldr	r3, [pc, #424]	; (80031fc <xTaskIncrementTick+0x214>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6a3a      	ldr	r2, [r7, #32]
 8003058:	429a      	cmp	r2, r3
 800305a:	f0c0 80a6 	bcc.w	80031aa <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800305e:	4b64      	ldr	r3, [pc, #400]	; (80031f0 <xTaskIncrementTick+0x208>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d104      	bne.n	8003072 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003068:	4b64      	ldr	r3, [pc, #400]	; (80031fc <xTaskIncrementTick+0x214>)
 800306a:	f04f 32ff 	mov.w	r2, #4294967295
 800306e:	601a      	str	r2, [r3, #0]
                    break;
 8003070:	e09b      	b.n	80031aa <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003072:	4b5f      	ldr	r3, [pc, #380]	; (80031f0 <xTaskIncrementTick+0x208>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003082:	6a3a      	ldr	r2, [r7, #32]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	429a      	cmp	r2, r3
 8003088:	d203      	bcs.n	8003092 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800308a:	4a5c      	ldr	r2, [pc, #368]	; (80031fc <xTaskIncrementTick+0x214>)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003090:	e08b      	b.n	80031aa <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	68d2      	ldr	r2, [r2, #12]
 80030a0:	609a      	str	r2, [r3, #8]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	6892      	ldr	r2, [r2, #8]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	3304      	adds	r3, #4
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d103      	bne.n	80030c0 <xTaskIncrementTick+0xd8>
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	605a      	str	r2, [r3, #4]
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2200      	movs	r2, #0
 80030c4:	615a      	str	r2, [r3, #20]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	1e5a      	subs	r2, r3, #1
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d01e      	beq.n	8003116 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	6a12      	ldr	r2, [r2, #32]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	69d2      	ldr	r2, [r2, #28]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	3318      	adds	r3, #24
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d103      	bne.n	8003106 <xTaskIncrementTick+0x11e>
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	6a1a      	ldr	r2, [r3, #32]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2200      	movs	r2, #0
 800310a:	629a      	str	r2, [r3, #40]	; 0x28
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	1e5a      	subs	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	2201      	movs	r2, #1
 800311c:	409a      	lsls	r2, r3
 800311e:	4b38      	ldr	r3, [pc, #224]	; (8003200 <xTaskIncrementTick+0x218>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4313      	orrs	r3, r2
 8003124:	4a36      	ldr	r2, [pc, #216]	; (8003200 <xTaskIncrementTick+0x218>)
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312c:	4935      	ldr	r1, [pc, #212]	; (8003204 <xTaskIncrementTick+0x21c>)
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	3304      	adds	r3, #4
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	60da      	str	r2, [r3, #12]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	3204      	adds	r2, #4
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	1d1a      	adds	r2, r3, #4
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	609a      	str	r2, [r3, #8]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4a26      	ldr	r2, [pc, #152]	; (8003204 <xTaskIncrementTick+0x21c>)
 800316c:	441a      	add	r2, r3
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	615a      	str	r2, [r3, #20]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003176:	4923      	ldr	r1, [pc, #140]	; (8003204 <xTaskIncrementTick+0x21c>)
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	1c59      	adds	r1, r3, #1
 8003186:	481f      	ldr	r0, [pc, #124]	; (8003204 <xTaskIncrementTick+0x21c>)
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4403      	add	r3, r0
 8003192:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <xTaskIncrementTick+0x220>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	429a      	cmp	r2, r3
 80031a0:	f67f af5d 	bls.w	800305e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80031a4:	2301      	movs	r3, #1
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031a8:	e759      	b.n	800305e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031aa:	4b17      	ldr	r3, [pc, #92]	; (8003208 <xTaskIncrementTick+0x220>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b0:	4914      	ldr	r1, [pc, #80]	; (8003204 <xTaskIncrementTick+0x21c>)
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d901      	bls.n	80031c6 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 80031c2:	2301      	movs	r3, #1
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <xTaskIncrementTick+0x224>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 80031ce:	2301      	movs	r3, #1
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
 80031d2:	e004      	b.n	80031de <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80031d4:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <xTaskIncrementTick+0x228>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3301      	adds	r3, #1
 80031da:	4a0d      	ldr	r2, [pc, #52]	; (8003210 <xTaskIncrementTick+0x228>)
 80031dc:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3728      	adds	r7, #40	; 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000270 	.word	0x20000270
 80031ec:	2000024c 	.word	0x2000024c
 80031f0:	20000200 	.word	0x20000200
 80031f4:	20000204 	.word	0x20000204
 80031f8:	20000260 	.word	0x20000260
 80031fc:	20000268 	.word	0x20000268
 8003200:	20000250 	.word	0x20000250
 8003204:	20000174 	.word	0x20000174
 8003208:	20000170 	.word	0x20000170
 800320c:	2000025c 	.word	0x2000025c
 8003210:	20000258 	.word	0x20000258

08003214 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800321a:	4b26      	ldr	r3, [pc, #152]	; (80032b4 <vTaskSwitchContext+0xa0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003222:	4b25      	ldr	r3, [pc, #148]	; (80032b8 <vTaskSwitchContext+0xa4>)
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003228:	e03f      	b.n	80032aa <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800322a:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <vTaskSwitchContext+0xa4>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003230:	4b22      	ldr	r3, [pc, #136]	; (80032bc <vTaskSwitchContext+0xa8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800323e:	7afb      	ldrb	r3, [r7, #11]
 8003240:	f1c3 031f 	rsb	r3, r3, #31
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	491e      	ldr	r1, [pc, #120]	; (80032c0 <vTaskSwitchContext+0xac>)
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10a      	bne.n	8003270 <vTaskSwitchContext+0x5c>
        __asm volatile
 800325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	607b      	str	r3, [r7, #4]
    }
 800326c:	bf00      	nop
 800326e:	e7fe      	b.n	800326e <vTaskSwitchContext+0x5a>
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4a11      	ldr	r2, [pc, #68]	; (80032c0 <vTaskSwitchContext+0xac>)
 800327c:	4413      	add	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	3308      	adds	r3, #8
 8003292:	429a      	cmp	r2, r3
 8003294:	d104      	bne.n	80032a0 <vTaskSwitchContext+0x8c>
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	605a      	str	r2, [r3, #4]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <vTaskSwitchContext+0xb0>)
 80032a8:	6013      	str	r3, [r2, #0]
}
 80032aa:	bf00      	nop
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr
 80032b4:	20000270 	.word	0x20000270
 80032b8:	2000025c 	.word	0x2000025c
 80032bc:	20000250 	.word	0x20000250
 80032c0:	20000174 	.word	0x20000174
 80032c4:	20000170 	.word	0x20000170

080032c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	60fb      	str	r3, [r7, #12]
    }
 80032ea:	bf00      	nop
 80032ec:	e7fe      	b.n	80032ec <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032ee:	4b07      	ldr	r3, [pc, #28]	; (800330c <vTaskPlaceOnEventList+0x44>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3318      	adds	r3, #24
 80032f4:	4619      	mov	r1, r3
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fe fdb9 	bl	8001e6e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032fc:	2101      	movs	r1, #1
 80032fe:	6838      	ldr	r0, [r7, #0]
 8003300:	f000 fc86 	bl	8003c10 <prvAddCurrentTaskToDelayedList>
}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20000170 	.word	0x20000170

08003310 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	613b      	str	r3, [r7, #16]
    }
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	4b16      	ldr	r3, [pc, #88]	; (8003398 <vTaskPlaceOnEventListRestricted+0x88>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	61da      	str	r2, [r3, #28]
 8003346:	4b14      	ldr	r3, [pc, #80]	; (8003398 <vTaskPlaceOnEventListRestricted+0x88>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	6892      	ldr	r2, [r2, #8]
 800334e:	621a      	str	r2, [r3, #32]
 8003350:	4b11      	ldr	r3, [pc, #68]	; (8003398 <vTaskPlaceOnEventListRestricted+0x88>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	3218      	adds	r2, #24
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <vTaskPlaceOnEventListRestricted+0x88>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f103 0218 	add.w	r2, r3, #24
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <vTaskPlaceOnEventListRestricted+0x88>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d002      	beq.n	8003386 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003380:	f04f 33ff 	mov.w	r3, #4294967295
 8003384:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	68b8      	ldr	r0, [r7, #8]
 800338a:	f000 fc41 	bl	8003c10 <prvAddCurrentTaskToDelayedList>
    }
 800338e:	bf00      	nop
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000170 	.word	0x20000170

0800339c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800339c:	b480      	push	{r7}
 800339e:	b08b      	sub	sp, #44	; 0x2c
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10a      	bne.n	80033c8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80033b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	60fb      	str	r3, [r7, #12]
    }
 80033c4:	bf00      	nop
 80033c6:	e7fe      	b.n	80033c6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	6a3a      	ldr	r2, [r7, #32]
 80033d4:	6a12      	ldr	r2, [r2, #32]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	6a3a      	ldr	r2, [r7, #32]
 80033de:	69d2      	ldr	r2, [r2, #28]
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	3318      	adds	r3, #24
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d103      	bne.n	80033f6 <xTaskRemoveFromEventList+0x5a>
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	6a1a      	ldr	r2, [r3, #32]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	2200      	movs	r2, #0
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	1e5a      	subs	r2, r3, #1
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003406:	4b4a      	ldr	r3, [pc, #296]	; (8003530 <xTaskRemoveFromEventList+0x194>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d15e      	bne.n	80034cc <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	6a3a      	ldr	r2, [r7, #32]
 800341a:	68d2      	ldr	r2, [r2, #12]
 800341c:	609a      	str	r2, [r3, #8]
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	6a3a      	ldr	r2, [r7, #32]
 8003424:	6892      	ldr	r2, [r2, #8]
 8003426:	605a      	str	r2, [r3, #4]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	3304      	adds	r3, #4
 8003430:	429a      	cmp	r2, r3
 8003432:	d103      	bne.n	800343c <xTaskRemoveFromEventList+0xa0>
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	2200      	movs	r2, #0
 8003440:	615a      	str	r2, [r3, #20]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	1e5a      	subs	r2, r3, #1
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	2201      	movs	r2, #1
 8003452:	409a      	lsls	r2, r3
 8003454:	4b37      	ldr	r3, [pc, #220]	; (8003534 <xTaskRemoveFromEventList+0x198>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4313      	orrs	r3, r2
 800345a:	4a36      	ldr	r2, [pc, #216]	; (8003534 <xTaskRemoveFromEventList+0x198>)
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003462:	4935      	ldr	r1, [pc, #212]	; (8003538 <xTaskRemoveFromEventList+0x19c>)
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	3304      	adds	r3, #4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	609a      	str	r2, [r3, #8]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	6a3a      	ldr	r2, [r7, #32]
 8003488:	3204      	adds	r2, #4
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	1d1a      	adds	r2, r3, #4
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4a25      	ldr	r2, [pc, #148]	; (8003538 <xTaskRemoveFromEventList+0x19c>)
 80034a2:	441a      	add	r2, r3
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	615a      	str	r2, [r3, #20]
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ac:	4922      	ldr	r1, [pc, #136]	; (8003538 <xTaskRemoveFromEventList+0x19c>)
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	1c59      	adds	r1, r3, #1
 80034bc:	481e      	ldr	r0, [pc, #120]	; (8003538 <xTaskRemoveFromEventList+0x19c>)
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4403      	add	r3, r0
 80034c8:	6019      	str	r1, [r3, #0]
 80034ca:	e01b      	b.n	8003504 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <xTaskRemoveFromEventList+0x1a0>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	61da      	str	r2, [r3, #28]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	621a      	str	r2, [r3, #32]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	6a3a      	ldr	r2, [r7, #32]
 80034e6:	3218      	adds	r2, #24
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	f103 0218 	add.w	r2, r3, #24
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	4a11      	ldr	r2, [pc, #68]	; (800353c <xTaskRemoveFromEventList+0x1a0>)
 80034f8:	629a      	str	r2, [r3, #40]	; 0x28
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <xTaskRemoveFromEventList+0x1a0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3301      	adds	r3, #1
 8003500:	4a0e      	ldr	r2, [pc, #56]	; (800353c <xTaskRemoveFromEventList+0x1a0>)
 8003502:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003508:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <xTaskRemoveFromEventList+0x1a4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	429a      	cmp	r2, r3
 8003510:	d905      	bls.n	800351e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003512:	2301      	movs	r3, #1
 8003514:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003516:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <xTaskRemoveFromEventList+0x1a8>)
 8003518:	2201      	movs	r2, #1
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	e001      	b.n	8003522 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800351e:	2300      	movs	r3, #0
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003524:	4618      	mov	r0, r3
 8003526:	372c      	adds	r7, #44	; 0x2c
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	20000270 	.word	0x20000270
 8003534:	20000250 	.word	0x20000250
 8003538:	20000174 	.word	0x20000174
 800353c:	20000208 	.word	0x20000208
 8003540:	20000170 	.word	0x20000170
 8003544:	2000025c 	.word	0x2000025c

08003548 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <vTaskInternalSetTimeOutState+0x24>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <vTaskInternalSetTimeOutState+0x28>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	605a      	str	r2, [r3, #4]
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20000260 	.word	0x20000260
 8003570:	2000024c 	.word	0x2000024c

08003574 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	613b      	str	r3, [r7, #16]
    }
 8003596:	bf00      	nop
 8003598:	e7fe      	b.n	8003598 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	60fb      	str	r3, [r7, #12]
    }
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80035b6:	f000 ff23 	bl	8004400 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80035ba:	4b1f      	ldr	r3, [pc, #124]	; (8003638 <xTaskCheckForTimeOut+0xc4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d102      	bne.n	80035da <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	e026      	b.n	8003628 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b17      	ldr	r3, [pc, #92]	; (800363c <xTaskCheckForTimeOut+0xc8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d00a      	beq.n	80035fc <xTaskCheckForTimeOut+0x88>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d305      	bcc.n	80035fc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e015      	b.n	8003628 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	429a      	cmp	r2, r3
 8003604:	d20b      	bcs.n	800361e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	1ad2      	subs	r2, r2, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff ff98 	bl	8003548 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	e004      	b.n	8003628 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003624:	2301      	movs	r3, #1
 8003626:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003628:	f000 ff1a 	bl	8004460 <vPortExitCritical>

    return xReturn;
 800362c:	69fb      	ldr	r3, [r7, #28]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2000024c 	.word	0x2000024c
 800363c:	20000260 	.word	0x20000260

08003640 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <vTaskMissedYield+0x14>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]
}
 800364a:	bf00      	nop
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	2000025c 	.word	0x2000025c

08003658 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003660:	f000 f852 	bl	8003708 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <prvIdleTask+0x28>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d9f9      	bls.n	8003660 <prvIdleTask+0x8>
            {
                taskYIELD();
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <prvIdleTask+0x2c>)
 800366e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800367c:	e7f0      	b.n	8003660 <prvIdleTask+0x8>
 800367e:	bf00      	nop
 8003680:	20000174 	.word	0x20000174
 8003684:	e000ed04 	.word	0xe000ed04

08003688 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	e00c      	b.n	80036ae <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <prvInitialiseTaskLists+0x60>)
 80036a0:	4413      	add	r3, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fbb8 	bl	8001e18 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3301      	adds	r3, #1
 80036ac:	607b      	str	r3, [r7, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d9ef      	bls.n	8003694 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80036b4:	480d      	ldr	r0, [pc, #52]	; (80036ec <prvInitialiseTaskLists+0x64>)
 80036b6:	f7fe fbaf 	bl	8001e18 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80036ba:	480d      	ldr	r0, [pc, #52]	; (80036f0 <prvInitialiseTaskLists+0x68>)
 80036bc:	f7fe fbac 	bl	8001e18 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80036c0:	480c      	ldr	r0, [pc, #48]	; (80036f4 <prvInitialiseTaskLists+0x6c>)
 80036c2:	f7fe fba9 	bl	8001e18 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80036c6:	480c      	ldr	r0, [pc, #48]	; (80036f8 <prvInitialiseTaskLists+0x70>)
 80036c8:	f7fe fba6 	bl	8001e18 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80036cc:	480b      	ldr	r0, [pc, #44]	; (80036fc <prvInitialiseTaskLists+0x74>)
 80036ce:	f7fe fba3 	bl	8001e18 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <prvInitialiseTaskLists+0x78>)
 80036d4:	4a05      	ldr	r2, [pc, #20]	; (80036ec <prvInitialiseTaskLists+0x64>)
 80036d6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <prvInitialiseTaskLists+0x7c>)
 80036da:	4a05      	ldr	r2, [pc, #20]	; (80036f0 <prvInitialiseTaskLists+0x68>)
 80036dc:	601a      	str	r2, [r3, #0]
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000174 	.word	0x20000174
 80036ec:	200001d8 	.word	0x200001d8
 80036f0:	200001ec 	.word	0x200001ec
 80036f4:	20000208 	.word	0x20000208
 80036f8:	2000021c 	.word	0x2000021c
 80036fc:	20000234 	.word	0x20000234
 8003700:	20000200 	.word	0x20000200
 8003704:	20000204 	.word	0x20000204

08003708 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800370e:	e019      	b.n	8003744 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003710:	f000 fe76 	bl	8004400 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003714:	4b10      	ldr	r3, [pc, #64]	; (8003758 <prvCheckTasksWaitingTermination+0x50>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	4618      	mov	r0, r3
 8003722:	f7fe fbdc 	bl	8001ede <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <prvCheckTasksWaitingTermination+0x54>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3b01      	subs	r3, #1
 800372c:	4a0b      	ldr	r2, [pc, #44]	; (800375c <prvCheckTasksWaitingTermination+0x54>)
 800372e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <prvCheckTasksWaitingTermination+0x58>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3b01      	subs	r3, #1
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <prvCheckTasksWaitingTermination+0x58>)
 8003738:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800373a:	f000 fe91 	bl	8004460 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f810 	bl	8003764 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <prvCheckTasksWaitingTermination+0x58>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e1      	bne.n	8003710 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	2000021c 	.word	0x2000021c
 800375c:	20000248 	.word	0x20000248
 8003760:	20000230 	.word	0x20000230

08003764 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	4618      	mov	r0, r3
 8003772:	f000 ffbf 	bl	80046f4 <vPortFree>
            vPortFree( pxTCB );
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 ffbc 	bl	80046f4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <prvResetNextTaskUnblockTime+0x2c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003792:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <prvResetNextTaskUnblockTime+0x30>)
 8003794:	f04f 32ff 	mov.w	r2, #4294967295
 8003798:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800379a:	e005      	b.n	80037a8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <prvResetNextTaskUnblockTime+0x2c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a03      	ldr	r2, [pc, #12]	; (80037b4 <prvResetNextTaskUnblockTime+0x30>)
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr
 80037b0:	20000200 	.word	0x20000200
 80037b4:	20000268 	.word	0x20000268

080037b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80037be:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <xTaskGetSchedulerState+0x34>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80037c6:	2301      	movs	r3, #1
 80037c8:	607b      	str	r3, [r7, #4]
 80037ca:	e008      	b.n	80037de <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037cc:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <xTaskGetSchedulerState+0x38>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d102      	bne.n	80037da <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80037d4:	2302      	movs	r3, #2
 80037d6:	607b      	str	r3, [r7, #4]
 80037d8:	e001      	b.n	80037de <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80037da:	2300      	movs	r3, #0
 80037dc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80037de:	687b      	ldr	r3, [r7, #4]
    }
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20000254 	.word	0x20000254
 80037f0:	20000270 	.word	0x20000270

080037f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8087 	beq.w	800391a <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003810:	4b44      	ldr	r3, [pc, #272]	; (8003924 <xTaskPriorityInherit+0x130>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	429a      	cmp	r2, r3
 8003818:	d276      	bcs.n	8003908 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	db06      	blt.n	8003830 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003822:	4b40      	ldr	r3, [pc, #256]	; (8003924 <xTaskPriorityInherit+0x130>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	f1c3 0205 	rsb	r2, r3, #5
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	6959      	ldr	r1, [r3, #20]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4a39      	ldr	r2, [pc, #228]	; (8003928 <xTaskPriorityInherit+0x134>)
 8003842:	4413      	add	r3, r2
 8003844:	4299      	cmp	r1, r3
 8003846:	d157      	bne.n	80038f8 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	3304      	adds	r3, #4
 800384c:	4618      	mov	r0, r3
 800384e:	f7fe fb46 	bl	8001ede <uxListRemove>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	2201      	movs	r2, #1
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43da      	mvns	r2, r3
 8003864:	4b31      	ldr	r3, [pc, #196]	; (800392c <xTaskPriorityInherit+0x138>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4013      	ands	r3, r2
 800386a:	4a30      	ldr	r2, [pc, #192]	; (800392c <xTaskPriorityInherit+0x138>)
 800386c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800386e:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <xTaskPriorityInherit+0x130>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	2201      	movs	r2, #1
 800387e:	409a      	lsls	r2, r3
 8003880:	4b2a      	ldr	r3, [pc, #168]	; (800392c <xTaskPriorityInherit+0x138>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4313      	orrs	r3, r2
 8003886:	4a29      	ldr	r2, [pc, #164]	; (800392c <xTaskPriorityInherit+0x138>)
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388e:	4926      	ldr	r1, [pc, #152]	; (8003928 <xTaskPriorityInherit+0x134>)
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	3304      	adds	r3, #4
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	609a      	str	r2, [r3, #8]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	60da      	str	r2, [r3, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	3204      	adds	r2, #4
 80038b6:	605a      	str	r2, [r3, #4]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1d1a      	adds	r2, r3, #4
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4a16      	ldr	r2, [pc, #88]	; (8003928 <xTaskPriorityInherit+0x134>)
 80038ce:	441a      	add	r2, r3
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	615a      	str	r2, [r3, #20]
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	4913      	ldr	r1, [pc, #76]	; (8003928 <xTaskPriorityInherit+0x134>)
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	1c59      	adds	r1, r3, #1
 80038e8:	480f      	ldr	r0, [pc, #60]	; (8003928 <xTaskPriorityInherit+0x134>)
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4403      	add	r3, r0
 80038f4:	6019      	str	r1, [r3, #0]
 80038f6:	e004      	b.n	8003902 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80038f8:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <xTaskPriorityInherit+0x130>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003902:	2301      	movs	r3, #1
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	e008      	b.n	800391a <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800390c:	4b05      	ldr	r3, [pc, #20]	; (8003924 <xTaskPriorityInherit+0x130>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	429a      	cmp	r2, r3
 8003914:	d201      	bcs.n	800391a <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8003916:	2301      	movs	r3, #1
 8003918:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800391a:	697b      	ldr	r3, [r7, #20]
    }
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20000170 	.word	0x20000170
 8003928:	20000174 	.word	0x20000174
 800392c:	20000250 	.word	0x20000250

08003930 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 808c 	beq.w	8003a60 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003948:	4b48      	ldr	r3, [pc, #288]	; (8003a6c <xTaskPriorityDisinherit+0x13c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	429a      	cmp	r2, r3
 8003950:	d00a      	beq.n	8003968 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	613b      	str	r3, [r7, #16]
    }
 8003964:	bf00      	nop
 8003966:	e7fe      	b.n	8003966 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	60fb      	str	r3, [r7, #12]
    }
 8003982:	bf00      	nop
 8003984:	e7fe      	b.n	8003984 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398a:	1e5a      	subs	r2, r3, #1
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003998:	429a      	cmp	r2, r3
 800399a:	d061      	beq.n	8003a60 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d15d      	bne.n	8003a60 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fe fa98 	bl	8001ede <uxListRemove>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	2201      	movs	r2, #1
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43da      	mvns	r2, r3
 80039c0:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <xTaskPriorityDisinherit+0x140>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4013      	ands	r3, r2
 80039c6:	4a2a      	ldr	r2, [pc, #168]	; (8003a70 <xTaskPriorityDisinherit+0x140>)
 80039c8:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	f1c3 0205 	rsb	r2, r3, #5
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	2201      	movs	r2, #1
 80039e4:	409a      	lsls	r2, r3
 80039e6:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <xTaskPriorityDisinherit+0x140>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	4a20      	ldr	r2, [pc, #128]	; (8003a70 <xTaskPriorityDisinherit+0x140>)
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f4:	491f      	ldr	r1, [pc, #124]	; (8003a74 <xTaskPriorityDisinherit+0x144>)
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	3304      	adds	r3, #4
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	609a      	str	r2, [r3, #8]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	60da      	str	r2, [r3, #12]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	3204      	adds	r2, #4
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	1d1a      	adds	r2, r3, #4
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	609a      	str	r2, [r3, #8]
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4a10      	ldr	r2, [pc, #64]	; (8003a74 <xTaskPriorityDisinherit+0x144>)
 8003a34:	441a      	add	r2, r3
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	615a      	str	r2, [r3, #20]
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3e:	490d      	ldr	r1, [pc, #52]	; (8003a74 <xTaskPriorityDisinherit+0x144>)
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	1c59      	adds	r1, r3, #1
 8003a4e:	4809      	ldr	r0, [pc, #36]	; (8003a74 <xTaskPriorityDisinherit+0x144>)
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4403      	add	r3, r0
 8003a5a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003a60:	69fb      	ldr	r3, [r7, #28]
    }
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000170 	.word	0x20000170
 8003a70:	20000250 	.word	0x20000250
 8003a74:	20000174 	.word	0x20000174

08003a78 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	; 0x28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003a86:	2301      	movs	r3, #1
 8003a88:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 80a1 	beq.w	8003bd4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10a      	bne.n	8003ab0 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8003a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	613b      	str	r3, [r7, #16]
    }
 8003aac:	bf00      	nop
 8003aae:	e7fe      	b.n	8003aae <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d902      	bls.n	8003ac0 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
 8003abe:	e002      	b.n	8003ac6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	429a      	cmp	r2, r3
 8003ace:	f000 8081 	beq.w	8003bd4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d17b      	bne.n	8003bd4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8003adc:	4b3f      	ldr	r3, [pc, #252]	; (8003bdc <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6a3a      	ldr	r2, [r7, #32]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d10a      	bne.n	8003afc <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8003ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	60fb      	str	r3, [r7, #12]
    }
 8003af8:	bf00      	nop
 8003afa:	e7fe      	b.n	8003afa <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b06:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	db04      	blt.n	8003b1a <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	f1c3 0205 	rsb	r2, r3, #5
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	6959      	ldr	r1, [r3, #20]
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4a2d      	ldr	r2, [pc, #180]	; (8003be0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003b2a:	4413      	add	r3, r2
 8003b2c:	4299      	cmp	r1, r3
 8003b2e:	d151      	bne.n	8003bd4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe f9d2 	bl	8001ede <uxListRemove>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	2201      	movs	r2, #1
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	4b25      	ldr	r3, [pc, #148]	; (8003be4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4013      	ands	r3, r2
 8003b52:	4a24      	ldr	r2, [pc, #144]	; (8003be4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8003b54:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	4b21      	ldr	r3, [pc, #132]	; (8003be4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	4a1f      	ldr	r2, [pc, #124]	; (8003be4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6c:	491c      	ldr	r1, [pc, #112]	; (8003be0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	3304      	adds	r3, #4
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	60da      	str	r2, [r3, #12]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	6a3a      	ldr	r2, [r7, #32]
 8003b92:	3204      	adds	r2, #4
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	1d1a      	adds	r2, r3, #4
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	609a      	str	r2, [r3, #8]
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4a0d      	ldr	r2, [pc, #52]	; (8003be0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003bac:	441a      	add	r2, r3
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	615a      	str	r2, [r3, #20]
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb6:	490a      	ldr	r1, [pc, #40]	; (8003be0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	1c59      	adds	r1, r3, #1
 8003bc6:	4806      	ldr	r0, [pc, #24]	; (8003be0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4403      	add	r3, r0
 8003bd2:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003bd4:	bf00      	nop
 8003bd6:	3728      	adds	r7, #40	; 0x28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000170 	.word	0x20000170
 8003be0:	20000174 	.word	0x20000174
 8003be4:	20000250 	.word	0x20000250

08003be8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8003bec:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <pvTaskIncrementMutexHeldCount+0x24>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d004      	beq.n	8003bfe <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <pvTaskIncrementMutexHeldCount+0x24>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bfa:	3201      	adds	r2, #1
 8003bfc:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8003bfe:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <pvTaskIncrementMutexHeldCount+0x24>)
 8003c00:	681b      	ldr	r3, [r3, #0]
    }
 8003c02:	4618      	mov	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000170 	.word	0x20000170

08003c10 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003c1a:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c20:	4b35      	ldr	r3, [pc, #212]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3304      	adds	r3, #4
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe f959 	bl	8001ede <uxListRemove>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10b      	bne.n	8003c4a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c32:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	2201      	movs	r2, #1
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	4b2e      	ldr	r3, [pc, #184]	; (8003cfc <prvAddCurrentTaskToDelayedList+0xec>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4013      	ands	r3, r2
 8003c46:	4a2d      	ldr	r2, [pc, #180]	; (8003cfc <prvAddCurrentTaskToDelayedList+0xec>)
 8003c48:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d124      	bne.n	8003c9c <prvAddCurrentTaskToDelayedList+0x8c>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d021      	beq.n	8003c9c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c58:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	4b26      	ldr	r3, [pc, #152]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	609a      	str	r2, [r3, #8]
 8003c66:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	6892      	ldr	r2, [r2, #8]
 8003c6e:	60da      	str	r2, [r3, #12]
 8003c70:	4b21      	ldr	r3, [pc, #132]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	3204      	adds	r2, #4
 8003c7a:	605a      	str	r2, [r3, #4]
 8003c7c:	4b1e      	ldr	r3, [pc, #120]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	1d1a      	adds	r2, r3, #4
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	609a      	str	r2, [r3, #8]
 8003c86:	4b1c      	ldr	r3, [pc, #112]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1d      	ldr	r2, [pc, #116]	; (8003d00 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c8c:	615a      	str	r2, [r3, #20]
 8003c8e:	4b1c      	ldr	r3, [pc, #112]	; (8003d00 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3301      	adds	r3, #1
 8003c94:	4a1a      	ldr	r2, [pc, #104]	; (8003d00 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003c9a:	e026      	b.n	8003cea <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ca4:	4b14      	ldr	r3, [pc, #80]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d209      	bcs.n	8003cc8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cb4:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f7fe f8d4 	bl	8001e6e <vListInsert>
}
 8003cc6:	e010      	b.n	8003cea <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cc8:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	f7fe f8ca 	bl	8001e6e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d202      	bcs.n	8003cea <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003ce4:	4a09      	ldr	r2, [pc, #36]	; (8003d0c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6013      	str	r3, [r2, #0]
}
 8003cea:	bf00      	nop
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	2000024c 	.word	0x2000024c
 8003cf8:	20000170 	.word	0x20000170
 8003cfc:	20000250 	.word	0x20000250
 8003d00:	20000234 	.word	0x20000234
 8003d04:	20000204 	.word	0x20000204
 8003d08:	20000200 	.word	0x20000200
 8003d0c:	20000268 	.word	0x20000268

08003d10 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003d1a:	f000 fa45 	bl	80041a8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003d1e:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <xTimerCreateTimerTask+0x54>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00b      	beq.n	8003d3e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <xTimerCreateTimerTask+0x58>)
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d34:	490d      	ldr	r1, [pc, #52]	; (8003d6c <xTimerCreateTimerTask+0x5c>)
 8003d36:	480e      	ldr	r0, [pc, #56]	; (8003d70 <xTimerCreateTimerTask+0x60>)
 8003d38:	f7fe fe82 	bl	8002a40 <xTaskCreate>
 8003d3c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	603b      	str	r3, [r7, #0]
    }
 8003d56:	bf00      	nop
 8003d58:	e7fe      	b.n	8003d58 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003d5a:	687b      	ldr	r3, [r7, #4]
    }
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	200002a4 	.word	0x200002a4
 8003d68:	200002a8 	.word	0x200002a8
 8003d6c:	08005974 	.word	0x08005974
 8003d70:	08003e19 	.word	0x08003e19

08003d74 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003d80:	e008      	b.n	8003d94 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	4413      	add	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	699a      	ldr	r2, [r3, #24]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	18d1      	adds	r1, r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f8db 	bl	8003f5c <prvInsertTimerInActiveList>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ea      	bne.n	8003d82 <prvReloadTimer+0xe>
        }
    }
 8003dac:	bf00      	nop
 8003dae:	bf00      	nop
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc2:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <prvProcessExpiredTimer+0x5c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fe f884 	bl	8001ede <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f7ff ffc3 	bl	8003d74 <prvReloadTimer>
 8003dee:	e008      	b.n	8003e02 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	4798      	blx	r3
    }
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	2000029c 	.word	0x2000029c

08003e18 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e20:	f107 0308 	add.w	r3, r7, #8
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 f857 	bl	8003ed8 <prvGetNextExpireTime>
 8003e2a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f803 	bl	8003e3c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003e36:	f000 f8d3 	bl	8003fe0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e3a:	e7f1      	b.n	8003e20 <prvTimerTask+0x8>

08003e3c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003e46:	f7fe ffb7 	bl	8002db8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e4a:	f107 0308 	add.w	r3, r7, #8
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f864 	bl	8003f1c <prvSampleTimeNow>
 8003e54:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d130      	bne.n	8003ebe <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10a      	bne.n	8003e78 <prvProcessTimerOrBlockTask+0x3c>
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d806      	bhi.n	8003e78 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003e6a:	f7fe ffb3 	bl	8002dd4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e6e:	68f9      	ldr	r1, [r7, #12]
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ffa1 	bl	8003db8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e76:	e024      	b.n	8003ec2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e7e:	4b13      	ldr	r3, [pc, #76]	; (8003ecc <prvProcessTimerOrBlockTask+0x90>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <prvProcessTimerOrBlockTask+0x50>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <prvProcessTimerOrBlockTask+0x52>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e90:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <prvProcessTimerOrBlockTask+0x94>)
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	f7fe fd9b 	bl	80029d8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003ea2:	f7fe ff97 	bl	8002dd4 <xTaskResumeAll>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003eac:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <prvProcessTimerOrBlockTask+0x98>)
 8003eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	f3bf 8f6f 	isb	sy
    }
 8003ebc:	e001      	b.n	8003ec2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003ebe:	f7fe ff89 	bl	8002dd4 <xTaskResumeAll>
    }
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	200002a0 	.word	0x200002a0
 8003ed0:	200002a4 	.word	0x200002a4
 8003ed4:	e000ed04 	.word	0xe000ed04

08003ed8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ee0:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <prvGetNextExpireTime+0x40>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <prvGetNextExpireTime+0x16>
 8003eea:	2201      	movs	r2, #1
 8003eec:	e000      	b.n	8003ef0 <prvGetNextExpireTime+0x18>
 8003eee:	2200      	movs	r2, #0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d105      	bne.n	8003f08 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <prvGetNextExpireTime+0x40>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e001      	b.n	8003f0c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
    }
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	2000029c 	.word	0x2000029c

08003f1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003f24:	f7ff f852 	bl	8002fcc <xTaskGetTickCount>
 8003f28:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <prvSampleTimeNow+0x3c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d205      	bcs.n	8003f40 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003f34:	f000 f912 	bl	800415c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e002      	b.n	8003f46 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003f46:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <prvSampleTimeNow+0x3c>)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
    }
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	200002ac 	.word	0x200002ac

08003f5c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d812      	bhi.n	8003fa8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	1ad2      	subs	r2, r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d302      	bcc.n	8003f96 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f90:	2301      	movs	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e01b      	b.n	8003fce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f96:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <prvInsertTimerInActiveList+0x7c>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f7fd ff64 	bl	8001e6e <vListInsert>
 8003fa6:	e012      	b.n	8003fce <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d206      	bcs.n	8003fbe <prvInsertTimerInActiveList+0x62>
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d302      	bcc.n	8003fbe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e007      	b.n	8003fce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fbe:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <prvInsertTimerInActiveList+0x80>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4610      	mov	r0, r2
 8003fca:	f7fd ff50 	bl	8001e6e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003fce:	697b      	ldr	r3, [r7, #20]
    }
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	200002a0 	.word	0x200002a0
 8003fdc:	2000029c 	.word	0x2000029c

08003fe0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fe6:	e0a6      	b.n	8004136 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f2c0 80a3 	blt.w	8004136 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d004      	beq.n	8004006 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4618      	mov	r0, r3
 8004002:	f7fd ff6c 	bl	8001ede <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff ff87 	bl	8003f1c <prvSampleTimeNow>
 800400e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	3b01      	subs	r3, #1
 8004014:	2b08      	cmp	r3, #8
 8004016:	f200 808d 	bhi.w	8004134 <prvProcessReceivedCommands+0x154>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <prvProcessReceivedCommands+0x40>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004045 	.word	0x08004045
 8004024:	08004045 	.word	0x08004045
 8004028:	080040ad 	.word	0x080040ad
 800402c:	080040c1 	.word	0x080040c1
 8004030:	0800410b 	.word	0x0800410b
 8004034:	08004045 	.word	0x08004045
 8004038:	08004045 	.word	0x08004045
 800403c:	080040ad 	.word	0x080040ad
 8004040:	080040c1 	.word	0x080040c1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	b2da      	uxtb	r2, r3
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	18d1      	adds	r1, r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	69f8      	ldr	r0, [r7, #28]
 8004064:	f7ff ff7a 	bl	8003f5c <prvInsertTimerInActiveList>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d063      	beq.n	8004136 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	4413      	add	r3, r2
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4619      	mov	r1, r3
 8004088:	69f8      	ldr	r0, [r7, #28]
 800408a:	f7ff fe73 	bl	8003d74 <prvReloadTimer>
 800408e:	e008      	b.n	80040a2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004096:	f023 0301 	bic.w	r3, r3, #1
 800409a:	b2da      	uxtb	r2, r3
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	69f8      	ldr	r0, [r7, #28]
 80040a8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80040aa:	e044      	b.n	8004136 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80040be:	e03a      	b.n	8004136 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10a      	bne.n	80040f6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	617b      	str	r3, [r7, #20]
    }
 80040f2:	bf00      	nop
 80040f4:	e7fe      	b.n	80040f4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	18d1      	adds	r1, r2, r3
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	69f8      	ldr	r0, [r7, #28]
 8004104:	f7ff ff2a 	bl	8003f5c <prvInsertTimerInActiveList>
                        break;
 8004108:	e015      	b.n	8004136 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d103      	bne.n	8004120 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004118:	69f8      	ldr	r0, [r7, #28]
 800411a:	f000 faeb 	bl	80046f4 <vPortFree>
 800411e:	e00a      	b.n	8004136 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	b2da      	uxtb	r2, r3
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004132:	e000      	b.n	8004136 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004134:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <prvProcessReceivedCommands+0x178>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f107 0108 	add.w	r1, r7, #8
 800413e:	2200      	movs	r2, #0
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe f8f5 	bl	8002330 <xQueueReceive>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	f47f af4d 	bne.w	8003fe8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	3720      	adds	r7, #32
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	200002a4 	.word	0x200002a4

0800415c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004162:	e009      	b.n	8004178 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004164:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <prvSwitchTimerLists+0x44>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800416e:	f04f 31ff 	mov.w	r1, #4294967295
 8004172:	6838      	ldr	r0, [r7, #0]
 8004174:	f7ff fe20 	bl	8003db8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <prvSwitchTimerLists+0x44>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004182:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <prvSwitchTimerLists+0x44>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <prvSwitchTimerLists+0x48>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a04      	ldr	r2, [pc, #16]	; (80041a0 <prvSwitchTimerLists+0x44>)
 800418e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004190:	4a04      	ldr	r2, [pc, #16]	; (80041a4 <prvSwitchTimerLists+0x48>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6013      	str	r3, [r2, #0]
    }
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	2000029c 	.word	0x2000029c
 80041a4:	200002a0 	.word	0x200002a0

080041a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80041ac:	f000 f928 	bl	8004400 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80041b0:	4b12      	ldr	r3, [pc, #72]	; (80041fc <prvCheckForValidListAndQueue+0x54>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11d      	bne.n	80041f4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80041b8:	4811      	ldr	r0, [pc, #68]	; (8004200 <prvCheckForValidListAndQueue+0x58>)
 80041ba:	f7fd fe2d 	bl	8001e18 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80041be:	4811      	ldr	r0, [pc, #68]	; (8004204 <prvCheckForValidListAndQueue+0x5c>)
 80041c0:	f7fd fe2a 	bl	8001e18 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80041c4:	4b10      	ldr	r3, [pc, #64]	; (8004208 <prvCheckForValidListAndQueue+0x60>)
 80041c6:	4a0e      	ldr	r2, [pc, #56]	; (8004200 <prvCheckForValidListAndQueue+0x58>)
 80041c8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80041ca:	4b10      	ldr	r3, [pc, #64]	; (800420c <prvCheckForValidListAndQueue+0x64>)
 80041cc:	4a0d      	ldr	r2, [pc, #52]	; (8004204 <prvCheckForValidListAndQueue+0x5c>)
 80041ce:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80041d0:	2200      	movs	r2, #0
 80041d2:	210c      	movs	r1, #12
 80041d4:	200a      	movs	r0, #10
 80041d6:	f7fd ff3b 	bl	8002050 <xQueueGenericCreate>
 80041da:	4603      	mov	r3, r0
 80041dc:	4a07      	ldr	r2, [pc, #28]	; (80041fc <prvCheckForValidListAndQueue+0x54>)
 80041de:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <prvCheckForValidListAndQueue+0x54>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <prvCheckForValidListAndQueue+0x54>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4908      	ldr	r1, [pc, #32]	; (8004210 <prvCheckForValidListAndQueue+0x68>)
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fe fba4 	bl	800293c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80041f4:	f000 f934 	bl	8004460 <vPortExitCritical>
    }
 80041f8:	bf00      	nop
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	200002a4 	.word	0x200002a4
 8004200:	20000274 	.word	0x20000274
 8004204:	20000288 	.word	0x20000288
 8004208:	2000029c 	.word	0x2000029c
 800420c:	200002a0 	.word	0x200002a0
 8004210:	0800597c 	.word	0x0800597c

08004214 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3b04      	subs	r3, #4
 8004224:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800422c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3b04      	subs	r3, #4
 8004232:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f023 0201 	bic.w	r2, r3, #1
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	3b04      	subs	r3, #4
 8004242:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004244:	4a08      	ldr	r2, [pc, #32]	; (8004268 <pxPortInitialiseStack+0x54>)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3b14      	subs	r3, #20
 800424e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3b20      	subs	r3, #32
 800425a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800425c:	68fb      	ldr	r3, [r7, #12]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	0800426d 	.word	0x0800426d

0800426c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8004272:	2300      	movs	r3, #0
 8004274:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004276:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <prvTaskExitError+0x54>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427e:	d00a      	beq.n	8004296 <prvTaskExitError+0x2a>
        __asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	60fb      	str	r3, [r7, #12]
    }
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <prvTaskExitError+0x28>
        __asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	60bb      	str	r3, [r7, #8]
    }
 80042a8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80042aa:	bf00      	nop
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0fc      	beq.n	80042ac <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	20000010 	.word	0x20000010
	...

080042d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <pxCurrentTCBConst2>)
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	6808      	ldr	r0, [r1, #0]
 80042d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042da:	f380 8809 	msr	PSP, r0
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f04f 0000 	mov.w	r0, #0
 80042e6:	f380 8811 	msr	BASEPRI, r0
 80042ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80042ee:	4770      	bx	lr

080042f0 <pxCurrentTCBConst2>:
 80042f0:	20000170 	.word	0x20000170
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop

080042f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80042f8:	4806      	ldr	r0, [pc, #24]	; (8004314 <prvPortStartFirstTask+0x1c>)
 80042fa:	6800      	ldr	r0, [r0, #0]
 80042fc:	6800      	ldr	r0, [r0, #0]
 80042fe:	f380 8808 	msr	MSP, r0
 8004302:	b662      	cpsie	i
 8004304:	b661      	cpsie	f
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	df00      	svc	0
 8004310:	bf00      	nop
 8004312:	0000      	.short	0x0000
 8004314:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop

0800431c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004322:	4b32      	ldr	r3, [pc, #200]	; (80043ec <xPortStartScheduler+0xd0>)
 8004324:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	22ff      	movs	r2, #255	; 0xff
 8004332:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	b2db      	uxtb	r3, r3
 8004340:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004344:	b2da      	uxtb	r2, r3
 8004346:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <xPortStartScheduler+0xd4>)
 8004348:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800434a:	4b2a      	ldr	r3, [pc, #168]	; (80043f4 <xPortStartScheduler+0xd8>)
 800434c:	2207      	movs	r2, #7
 800434e:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004350:	e009      	b.n	8004366 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8004352:	4b28      	ldr	r3, [pc, #160]	; (80043f4 <xPortStartScheduler+0xd8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3b01      	subs	r3, #1
 8004358:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <xPortStartScheduler+0xd8>)
 800435a:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	b2db      	uxtb	r3, r3
 8004364:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	2b80      	cmp	r3, #128	; 0x80
 8004370:	d0ef      	beq.n	8004352 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004372:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <xPortStartScheduler+0xd8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f1c3 0307 	rsb	r3, r3, #7
 800437a:	2b04      	cmp	r3, #4
 800437c:	d00a      	beq.n	8004394 <xPortStartScheduler+0x78>
        __asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	60bb      	str	r3, [r7, #8]
    }
 8004390:	bf00      	nop
 8004392:	e7fe      	b.n	8004392 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004394:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <xPortStartScheduler+0xd8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	4a16      	ldr	r2, [pc, #88]	; (80043f4 <xPortStartScheduler+0xd8>)
 800439c:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800439e:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <xPortStartScheduler+0xd8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043a6:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <xPortStartScheduler+0xd8>)
 80043a8:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80043b2:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <xPortStartScheduler+0xdc>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a10      	ldr	r2, [pc, #64]	; (80043f8 <xPortStartScheduler+0xdc>)
 80043b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043bc:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80043be:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <xPortStartScheduler+0xdc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a0d      	ldr	r2, [pc, #52]	; (80043f8 <xPortStartScheduler+0xdc>)
 80043c4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043c8:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80043ca:	f000 f8b7 	bl	800453c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <xPortStartScheduler+0xe0>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80043d4:	f7ff ff90 	bl	80042f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80043d8:	f7fe ff1c 	bl	8003214 <vTaskSwitchContext>
    prvTaskExitError();
 80043dc:	f7ff ff46 	bl	800426c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	e000e400 	.word	0xe000e400
 80043f0:	200002b0 	.word	0x200002b0
 80043f4:	200002b4 	.word	0x200002b4
 80043f8:	e000ed20 	.word	0xe000ed20
 80043fc:	20000010 	.word	0x20000010

08004400 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
        __asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	607b      	str	r3, [r7, #4]
    }
 8004418:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800441a:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <vPortEnterCritical+0x58>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3301      	adds	r3, #1
 8004420:	4a0d      	ldr	r2, [pc, #52]	; (8004458 <vPortEnterCritical+0x58>)
 8004422:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <vPortEnterCritical+0x58>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d10f      	bne.n	800444c <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <vPortEnterCritical+0x5c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <vPortEnterCritical+0x4c>
        __asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	603b      	str	r3, [r7, #0]
    }
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <vPortEnterCritical+0x4a>
    }
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000010 	.word	0x20000010
 800445c:	e000ed04 	.word	0xe000ed04

08004460 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <vPortExitCritical+0x4c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10a      	bne.n	8004484 <vPortExitCritical+0x24>
        __asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	607b      	str	r3, [r7, #4]
    }
 8004480:	bf00      	nop
 8004482:	e7fe      	b.n	8004482 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <vPortExitCritical+0x4c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3b01      	subs	r3, #1
 800448a:	4a08      	ldr	r2, [pc, #32]	; (80044ac <vPortExitCritical+0x4c>)
 800448c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800448e:	4b07      	ldr	r3, [pc, #28]	; (80044ac <vPortExitCritical+0x4c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d105      	bne.n	80044a2 <vPortExitCritical+0x42>
 8004496:	2300      	movs	r3, #0
 8004498:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80044a0:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr
 80044ac:	20000010 	.word	0x20000010

080044b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80044b0:	f3ef 8009 	mrs	r0, PSP
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <pxCurrentTCBConst>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044c0:	6010      	str	r0, [r2, #0]
 80044c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80044c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044ca:	f380 8811 	msr	BASEPRI, r0
 80044ce:	f7fe fea1 	bl	8003214 <vTaskSwitchContext>
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f380 8811 	msr	BASEPRI, r0
 80044da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	6808      	ldr	r0, [r1, #0]
 80044e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044e6:	f380 8809 	msr	PSP, r0
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	4770      	bx	lr

080044f0 <pxCurrentTCBConst>:
 80044f0:	20000170 	.word	0x20000170
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop

080044f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
        __asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	607b      	str	r3, [r7, #4]
    }
 8004510:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004512:	f7fe fd69 	bl	8002fe8 <xTaskIncrementTick>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <SysTick_Handler+0x40>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	2300      	movs	r3, #0
 8004526:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	f383 8811 	msr	BASEPRI, r3
    }
 800452e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	e000ed04 	.word	0xe000ed04

0800453c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <vPortSetupTimerInterrupt+0x30>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <vPortSetupTimerInterrupt+0x34>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800454c:	4b09      	ldr	r3, [pc, #36]	; (8004574 <vPortSetupTimerInterrupt+0x38>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a09      	ldr	r2, [pc, #36]	; (8004578 <vPortSetupTimerInterrupt+0x3c>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	099b      	lsrs	r3, r3, #6
 8004558:	4a08      	ldr	r2, [pc, #32]	; (800457c <vPortSetupTimerInterrupt+0x40>)
 800455a:	3b01      	subs	r3, #1
 800455c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800455e:	4b03      	ldr	r3, [pc, #12]	; (800456c <vPortSetupTimerInterrupt+0x30>)
 8004560:	2207      	movs	r2, #7
 8004562:	601a      	str	r2, [r3, #0]
}
 8004564:	bf00      	nop
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr
 800456c:	e000e010 	.word	0xe000e010
 8004570:	e000e018 	.word	0xe000e018
 8004574:	20000000 	.word	0x20000000
 8004578:	10624dd3 	.word	0x10624dd3
 800457c:	e000e014 	.word	0xe000e014

08004580 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800458c:	f7fe fc14 	bl	8002db8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004590:	4b53      	ldr	r3, [pc, #332]	; (80046e0 <pvPortMalloc+0x160>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004598:	f000 f908 	bl	80047ac <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d012      	beq.n	80045c8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80045a2:	2208      	movs	r2, #8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	3308      	adds	r3, #8
 80045ae:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	43db      	mvns	r3, r3
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d804      	bhi.n	80045c4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	4413      	add	r3, r2
 80045c0:	607b      	str	r3, [r7, #4]
 80045c2:	e001      	b.n	80045c8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	db70      	blt.n	80046b0 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d06d      	beq.n	80046b0 <pvPortMalloc+0x130>
 80045d4:	4b43      	ldr	r3, [pc, #268]	; (80046e4 <pvPortMalloc+0x164>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d868      	bhi.n	80046b0 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80045de:	4b42      	ldr	r3, [pc, #264]	; (80046e8 <pvPortMalloc+0x168>)
 80045e0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80045e2:	4b41      	ldr	r3, [pc, #260]	; (80046e8 <pvPortMalloc+0x168>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045e8:	e004      	b.n	80045f4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d903      	bls.n	8004606 <pvPortMalloc+0x86>
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f1      	bne.n	80045ea <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004606:	4b36      	ldr	r3, [pc, #216]	; (80046e0 <pvPortMalloc+0x160>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460c:	429a      	cmp	r2, r3
 800460e:	d04f      	beq.n	80046b0 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2208      	movs	r2, #8
 8004616:	4413      	add	r3, r2
 8004618:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	1ad2      	subs	r2, r2, r3
 800462a:	2308      	movs	r3, #8
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	429a      	cmp	r2, r3
 8004630:	d91f      	bls.n	8004672 <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4413      	add	r3, r2
 8004638:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <pvPortMalloc+0xda>
        __asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	613b      	str	r3, [r7, #16]
    }
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	1ad2      	subs	r2, r2, r3
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800466c:	6978      	ldr	r0, [r7, #20]
 800466e:	f000 f8f9 	bl	8004864 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004672:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <pvPortMalloc+0x164>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	4a19      	ldr	r2, [pc, #100]	; (80046e4 <pvPortMalloc+0x164>)
 800467e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004680:	4b18      	ldr	r3, [pc, #96]	; (80046e4 <pvPortMalloc+0x164>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	4b19      	ldr	r3, [pc, #100]	; (80046ec <pvPortMalloc+0x16c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d203      	bcs.n	8004694 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800468c:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <pvPortMalloc+0x164>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a16      	ldr	r2, [pc, #88]	; (80046ec <pvPortMalloc+0x16c>)
 8004692:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80046a6:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <pvPortMalloc+0x170>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3301      	adds	r3, #1
 80046ac:	4a10      	ldr	r2, [pc, #64]	; (80046f0 <pvPortMalloc+0x170>)
 80046ae:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80046b0:	f7fe fb90 	bl	8002dd4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <pvPortMalloc+0x154>
        __asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	60fb      	str	r3, [r7, #12]
    }
 80046d0:	bf00      	nop
 80046d2:	e7fe      	b.n	80046d2 <pvPortMalloc+0x152>
    return pvReturn;
 80046d4:	69fb      	ldr	r3, [r7, #28]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3728      	adds	r7, #40	; 0x28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20003ec0 	.word	0x20003ec0
 80046e4:	20003ec4 	.word	0x20003ec4
 80046e8:	20003eb8 	.word	0x20003eb8
 80046ec:	20003ec8 	.word	0x20003ec8
 80046f0:	20003ecc 	.word	0x20003ecc

080046f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d049      	beq.n	800479a <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004706:	2308      	movs	r3, #8
 8004708:	425b      	negs	r3, r3
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4413      	add	r3, r2
 800470e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	db0a      	blt.n	8004732 <vPortFree+0x3e>
        __asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	60fb      	str	r3, [r7, #12]
    }
 800472e:	bf00      	nop
 8004730:	e7fe      	b.n	8004730 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <vPortFree+0x5c>
        __asm volatile
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	60bb      	str	r3, [r7, #8]
    }
 800474c:	bf00      	nop
 800474e:	e7fe      	b.n	800474e <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	0fdb      	lsrs	r3, r3, #31
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01c      	beq.n	800479a <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d118      	bne.n	800479a <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004774:	f7fe fb20 	bl	8002db8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <vPortFree+0xb0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4413      	add	r3, r2
 8004782:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <vPortFree+0xb0>)
 8004784:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004786:	6938      	ldr	r0, [r7, #16]
 8004788:	f000 f86c 	bl	8004864 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800478c:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <vPortFree+0xb4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3301      	adds	r3, #1
 8004792:	4a05      	ldr	r2, [pc, #20]	; (80047a8 <vPortFree+0xb4>)
 8004794:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004796:	f7fe fb1d 	bl	8002dd4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800479a:	bf00      	nop
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20003ec4 	.word	0x20003ec4
 80047a8:	20003ed0 	.word	0x20003ed0

080047ac <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047b2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80047b6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80047b8:	4b25      	ldr	r3, [pc, #148]	; (8004850 <prvHeapInit+0xa4>)
 80047ba:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3307      	adds	r3, #7
 80047ca:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0307 	bic.w	r3, r3, #7
 80047d2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	4a1d      	ldr	r2, [pc, #116]	; (8004850 <prvHeapInit+0xa4>)
 80047dc:	4413      	add	r3, r2
 80047de:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047e4:	4a1b      	ldr	r2, [pc, #108]	; (8004854 <prvHeapInit+0xa8>)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80047ea:	4b1a      	ldr	r3, [pc, #104]	; (8004854 <prvHeapInit+0xa8>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	4413      	add	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80047f8:	2208      	movs	r2, #8
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0307 	bic.w	r3, r3, #7
 8004806:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4a13      	ldr	r2, [pc, #76]	; (8004858 <prvHeapInit+0xac>)
 800480c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800480e:	4b12      	ldr	r3, [pc, #72]	; (8004858 <prvHeapInit+0xac>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004816:	4b10      	ldr	r3, [pc, #64]	; (8004858 <prvHeapInit+0xac>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	1ad2      	subs	r2, r2, r3
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800482c:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <prvHeapInit+0xac>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	4a08      	ldr	r2, [pc, #32]	; (800485c <prvHeapInit+0xb0>)
 800483a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4a07      	ldr	r2, [pc, #28]	; (8004860 <prvHeapInit+0xb4>)
 8004842:	6013      	str	r3, [r2, #0]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	200002b8 	.word	0x200002b8
 8004854:	20003eb8 	.word	0x20003eb8
 8004858:	20003ec0 	.word	0x20003ec0
 800485c:	20003ec8 	.word	0x20003ec8
 8004860:	20003ec4 	.word	0x20003ec4

08004864 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800486c:	4b27      	ldr	r3, [pc, #156]	; (800490c <prvInsertBlockIntoFreeList+0xa8>)
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	e002      	b.n	8004878 <prvInsertBlockIntoFreeList+0x14>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	429a      	cmp	r2, r3
 8004880:	d8f7      	bhi.n	8004872 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	4413      	add	r3, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	d108      	bne.n	80048a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	441a      	add	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	441a      	add	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d118      	bne.n	80048ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	4b14      	ldr	r3, [pc, #80]	; (8004910 <prvInsertBlockIntoFreeList+0xac>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d00d      	beq.n	80048e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	441a      	add	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	e008      	b.n	80048f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048e2:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <prvInsertBlockIntoFreeList+0xac>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e003      	b.n	80048f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d002      	beq.n	8004902 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004902:	bf00      	nop
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr
 800490c:	20003eb8 	.word	0x20003eb8
 8004910:	20003ec0 	.word	0x20003ec0

08004914 <srand>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4b10      	ldr	r3, [pc, #64]	; (8004958 <srand+0x44>)
 8004918:	4604      	mov	r4, r0
 800491a:	681d      	ldr	r5, [r3, #0]
 800491c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800491e:	b9b3      	cbnz	r3, 800494e <srand+0x3a>
 8004920:	2018      	movs	r0, #24
 8004922:	f000 fa45 	bl	8004db0 <malloc>
 8004926:	4602      	mov	r2, r0
 8004928:	6328      	str	r0, [r5, #48]	; 0x30
 800492a:	b920      	cbnz	r0, 8004936 <srand+0x22>
 800492c:	2146      	movs	r1, #70	; 0x46
 800492e:	4b0b      	ldr	r3, [pc, #44]	; (800495c <srand+0x48>)
 8004930:	480b      	ldr	r0, [pc, #44]	; (8004960 <srand+0x4c>)
 8004932:	f000 f9d7 	bl	8004ce4 <__assert_func>
 8004936:	490b      	ldr	r1, [pc, #44]	; (8004964 <srand+0x50>)
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <srand+0x54>)
 800493a:	e9c0 1300 	strd	r1, r3, [r0]
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <srand+0x58>)
 8004940:	2100      	movs	r1, #0
 8004942:	6083      	str	r3, [r0, #8]
 8004944:	230b      	movs	r3, #11
 8004946:	8183      	strh	r3, [r0, #12]
 8004948:	2001      	movs	r0, #1
 800494a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800494e:	2200      	movs	r2, #0
 8004950:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004952:	611c      	str	r4, [r3, #16]
 8004954:	615a      	str	r2, [r3, #20]
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	2000006c 	.word	0x2000006c
 800495c:	080059ae 	.word	0x080059ae
 8004960:	080059c5 	.word	0x080059c5
 8004964:	abcd330e 	.word	0xabcd330e
 8004968:	e66d1234 	.word	0xe66d1234
 800496c:	0005deec 	.word	0x0005deec

08004970 <rand>:
 8004970:	4b16      	ldr	r3, [pc, #88]	; (80049cc <rand+0x5c>)
 8004972:	b510      	push	{r4, lr}
 8004974:	681c      	ldr	r4, [r3, #0]
 8004976:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004978:	b9b3      	cbnz	r3, 80049a8 <rand+0x38>
 800497a:	2018      	movs	r0, #24
 800497c:	f000 fa18 	bl	8004db0 <malloc>
 8004980:	4602      	mov	r2, r0
 8004982:	6320      	str	r0, [r4, #48]	; 0x30
 8004984:	b920      	cbnz	r0, 8004990 <rand+0x20>
 8004986:	2152      	movs	r1, #82	; 0x52
 8004988:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <rand+0x60>)
 800498a:	4812      	ldr	r0, [pc, #72]	; (80049d4 <rand+0x64>)
 800498c:	f000 f9aa 	bl	8004ce4 <__assert_func>
 8004990:	4911      	ldr	r1, [pc, #68]	; (80049d8 <rand+0x68>)
 8004992:	4b12      	ldr	r3, [pc, #72]	; (80049dc <rand+0x6c>)
 8004994:	e9c0 1300 	strd	r1, r3, [r0]
 8004998:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <rand+0x70>)
 800499a:	2100      	movs	r1, #0
 800499c:	6083      	str	r3, [r0, #8]
 800499e:	230b      	movs	r3, #11
 80049a0:	8183      	strh	r3, [r0, #12]
 80049a2:	2001      	movs	r0, #1
 80049a4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80049a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80049aa:	480e      	ldr	r0, [pc, #56]	; (80049e4 <rand+0x74>)
 80049ac:	690b      	ldr	r3, [r1, #16]
 80049ae:	694c      	ldr	r4, [r1, #20]
 80049b0:	4358      	muls	r0, r3
 80049b2:	4a0d      	ldr	r2, [pc, #52]	; (80049e8 <rand+0x78>)
 80049b4:	fb02 0004 	mla	r0, r2, r4, r0
 80049b8:	fba3 3202 	umull	r3, r2, r3, r2
 80049bc:	3301      	adds	r3, #1
 80049be:	eb40 0002 	adc.w	r0, r0, r2
 80049c2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80049c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80049ca:	bd10      	pop	{r4, pc}
 80049cc:	2000006c 	.word	0x2000006c
 80049d0:	080059ae 	.word	0x080059ae
 80049d4:	080059c5 	.word	0x080059c5
 80049d8:	abcd330e 	.word	0xabcd330e
 80049dc:	e66d1234 	.word	0xe66d1234
 80049e0:	0005deec 	.word	0x0005deec
 80049e4:	5851f42d 	.word	0x5851f42d
 80049e8:	4c957f2d 	.word	0x4c957f2d

080049ec <std>:
 80049ec:	2300      	movs	r3, #0
 80049ee:	b510      	push	{r4, lr}
 80049f0:	4604      	mov	r4, r0
 80049f2:	e9c0 3300 	strd	r3, r3, [r0]
 80049f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049fa:	6083      	str	r3, [r0, #8]
 80049fc:	8181      	strh	r1, [r0, #12]
 80049fe:	6643      	str	r3, [r0, #100]	; 0x64
 8004a00:	81c2      	strh	r2, [r0, #14]
 8004a02:	6183      	str	r3, [r0, #24]
 8004a04:	4619      	mov	r1, r3
 8004a06:	2208      	movs	r2, #8
 8004a08:	305c      	adds	r0, #92	; 0x5c
 8004a0a:	f000 f8e2 	bl	8004bd2 <memset>
 8004a0e:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <std+0x38>)
 8004a10:	6224      	str	r4, [r4, #32]
 8004a12:	6263      	str	r3, [r4, #36]	; 0x24
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <std+0x3c>)
 8004a16:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a18:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <std+0x40>)
 8004a1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a1c:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <std+0x44>)
 8004a1e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a20:	bd10      	pop	{r4, pc}
 8004a22:	bf00      	nop
 8004a24:	08004b4d 	.word	0x08004b4d
 8004a28:	08004b6f 	.word	0x08004b6f
 8004a2c:	08004ba7 	.word	0x08004ba7
 8004a30:	08004bcb 	.word	0x08004bcb

08004a34 <stdio_exit_handler>:
 8004a34:	4a02      	ldr	r2, [pc, #8]	; (8004a40 <stdio_exit_handler+0xc>)
 8004a36:	4903      	ldr	r1, [pc, #12]	; (8004a44 <stdio_exit_handler+0x10>)
 8004a38:	4803      	ldr	r0, [pc, #12]	; (8004a48 <stdio_exit_handler+0x14>)
 8004a3a:	f000 b869 	b.w	8004b10 <_fwalk_sglue>
 8004a3e:	bf00      	nop
 8004a40:	20000014 	.word	0x20000014
 8004a44:	0800501d 	.word	0x0800501d
 8004a48:	20000020 	.word	0x20000020

08004a4c <cleanup_stdio>:
 8004a4c:	6841      	ldr	r1, [r0, #4]
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <cleanup_stdio+0x34>)
 8004a50:	b510      	push	{r4, lr}
 8004a52:	4299      	cmp	r1, r3
 8004a54:	4604      	mov	r4, r0
 8004a56:	d001      	beq.n	8004a5c <cleanup_stdio+0x10>
 8004a58:	f000 fae0 	bl	800501c <_fflush_r>
 8004a5c:	68a1      	ldr	r1, [r4, #8]
 8004a5e:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <cleanup_stdio+0x38>)
 8004a60:	4299      	cmp	r1, r3
 8004a62:	d002      	beq.n	8004a6a <cleanup_stdio+0x1e>
 8004a64:	4620      	mov	r0, r4
 8004a66:	f000 fad9 	bl	800501c <_fflush_r>
 8004a6a:	68e1      	ldr	r1, [r4, #12]
 8004a6c:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <cleanup_stdio+0x3c>)
 8004a6e:	4299      	cmp	r1, r3
 8004a70:	d004      	beq.n	8004a7c <cleanup_stdio+0x30>
 8004a72:	4620      	mov	r0, r4
 8004a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a78:	f000 bad0 	b.w	800501c <_fflush_r>
 8004a7c:	bd10      	pop	{r4, pc}
 8004a7e:	bf00      	nop
 8004a80:	20003ed4 	.word	0x20003ed4
 8004a84:	20003f3c 	.word	0x20003f3c
 8004a88:	20003fa4 	.word	0x20003fa4

08004a8c <global_stdio_init.part.0>:
 8004a8c:	b510      	push	{r4, lr}
 8004a8e:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <global_stdio_init.part.0+0x30>)
 8004a90:	4c0b      	ldr	r4, [pc, #44]	; (8004ac0 <global_stdio_init.part.0+0x34>)
 8004a92:	4a0c      	ldr	r2, [pc, #48]	; (8004ac4 <global_stdio_init.part.0+0x38>)
 8004a94:	4620      	mov	r0, r4
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	2104      	movs	r1, #4
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f7ff ffa6 	bl	80049ec <std>
 8004aa0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	2109      	movs	r1, #9
 8004aa8:	f7ff ffa0 	bl	80049ec <std>
 8004aac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ab6:	2112      	movs	r1, #18
 8004ab8:	f7ff bf98 	b.w	80049ec <std>
 8004abc:	2000400c 	.word	0x2000400c
 8004ac0:	20003ed4 	.word	0x20003ed4
 8004ac4:	08004a35 	.word	0x08004a35

08004ac8 <__sfp_lock_acquire>:
 8004ac8:	4801      	ldr	r0, [pc, #4]	; (8004ad0 <__sfp_lock_acquire+0x8>)
 8004aca:	f000 b8fb 	b.w	8004cc4 <__retarget_lock_acquire_recursive>
 8004ace:	bf00      	nop
 8004ad0:	20004015 	.word	0x20004015

08004ad4 <__sfp_lock_release>:
 8004ad4:	4801      	ldr	r0, [pc, #4]	; (8004adc <__sfp_lock_release+0x8>)
 8004ad6:	f000 b8f6 	b.w	8004cc6 <__retarget_lock_release_recursive>
 8004ada:	bf00      	nop
 8004adc:	20004015 	.word	0x20004015

08004ae0 <__sinit>:
 8004ae0:	b510      	push	{r4, lr}
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	f7ff fff0 	bl	8004ac8 <__sfp_lock_acquire>
 8004ae8:	6a23      	ldr	r3, [r4, #32]
 8004aea:	b11b      	cbz	r3, 8004af4 <__sinit+0x14>
 8004aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af0:	f7ff bff0 	b.w	8004ad4 <__sfp_lock_release>
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <__sinit+0x28>)
 8004af6:	6223      	str	r3, [r4, #32]
 8004af8:	4b04      	ldr	r3, [pc, #16]	; (8004b0c <__sinit+0x2c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f5      	bne.n	8004aec <__sinit+0xc>
 8004b00:	f7ff ffc4 	bl	8004a8c <global_stdio_init.part.0>
 8004b04:	e7f2      	b.n	8004aec <__sinit+0xc>
 8004b06:	bf00      	nop
 8004b08:	08004a4d 	.word	0x08004a4d
 8004b0c:	2000400c 	.word	0x2000400c

08004b10 <_fwalk_sglue>:
 8004b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b14:	4607      	mov	r7, r0
 8004b16:	4688      	mov	r8, r1
 8004b18:	4614      	mov	r4, r2
 8004b1a:	2600      	movs	r6, #0
 8004b1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b20:	f1b9 0901 	subs.w	r9, r9, #1
 8004b24:	d505      	bpl.n	8004b32 <_fwalk_sglue+0x22>
 8004b26:	6824      	ldr	r4, [r4, #0]
 8004b28:	2c00      	cmp	r4, #0
 8004b2a:	d1f7      	bne.n	8004b1c <_fwalk_sglue+0xc>
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b32:	89ab      	ldrh	r3, [r5, #12]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d907      	bls.n	8004b48 <_fwalk_sglue+0x38>
 8004b38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	d003      	beq.n	8004b48 <_fwalk_sglue+0x38>
 8004b40:	4629      	mov	r1, r5
 8004b42:	4638      	mov	r0, r7
 8004b44:	47c0      	blx	r8
 8004b46:	4306      	orrs	r6, r0
 8004b48:	3568      	adds	r5, #104	; 0x68
 8004b4a:	e7e9      	b.n	8004b20 <_fwalk_sglue+0x10>

08004b4c <__sread>:
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	460c      	mov	r4, r1
 8004b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b54:	f000 f868 	bl	8004c28 <_read_r>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	bfab      	itete	ge
 8004b5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8004b60:	181b      	addge	r3, r3, r0
 8004b62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b66:	bfac      	ite	ge
 8004b68:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b6a:	81a3      	strhlt	r3, [r4, #12]
 8004b6c:	bd10      	pop	{r4, pc}

08004b6e <__swrite>:
 8004b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b72:	461f      	mov	r7, r3
 8004b74:	898b      	ldrh	r3, [r1, #12]
 8004b76:	4605      	mov	r5, r0
 8004b78:	05db      	lsls	r3, r3, #23
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	4616      	mov	r6, r2
 8004b7e:	d505      	bpl.n	8004b8c <__swrite+0x1e>
 8004b80:	2302      	movs	r3, #2
 8004b82:	2200      	movs	r2, #0
 8004b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b88:	f000 f83c 	bl	8004c04 <_lseek_r>
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	4632      	mov	r2, r6
 8004b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b94:	81a3      	strh	r3, [r4, #12]
 8004b96:	4628      	mov	r0, r5
 8004b98:	463b      	mov	r3, r7
 8004b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba2:	f000 b853 	b.w	8004c4c <_write_r>

08004ba6 <__sseek>:
 8004ba6:	b510      	push	{r4, lr}
 8004ba8:	460c      	mov	r4, r1
 8004baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bae:	f000 f829 	bl	8004c04 <_lseek_r>
 8004bb2:	1c43      	adds	r3, r0, #1
 8004bb4:	89a3      	ldrh	r3, [r4, #12]
 8004bb6:	bf15      	itete	ne
 8004bb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bc2:	81a3      	strheq	r3, [r4, #12]
 8004bc4:	bf18      	it	ne
 8004bc6:	81a3      	strhne	r3, [r4, #12]
 8004bc8:	bd10      	pop	{r4, pc}

08004bca <__sclose>:
 8004bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bce:	f000 b809 	b.w	8004be4 <_close_r>

08004bd2 <memset>:
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4402      	add	r2, r0
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d100      	bne.n	8004bdc <memset+0xa>
 8004bda:	4770      	bx	lr
 8004bdc:	f803 1b01 	strb.w	r1, [r3], #1
 8004be0:	e7f9      	b.n	8004bd6 <memset+0x4>
	...

08004be4 <_close_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	2300      	movs	r3, #0
 8004be8:	4d05      	ldr	r5, [pc, #20]	; (8004c00 <_close_r+0x1c>)
 8004bea:	4604      	mov	r4, r0
 8004bec:	4608      	mov	r0, r1
 8004bee:	602b      	str	r3, [r5, #0]
 8004bf0:	f7fb fd40 	bl	8000674 <_close>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	d102      	bne.n	8004bfe <_close_r+0x1a>
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	b103      	cbz	r3, 8004bfe <_close_r+0x1a>
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	bd38      	pop	{r3, r4, r5, pc}
 8004c00:	20004010 	.word	0x20004010

08004c04 <_lseek_r>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	4604      	mov	r4, r0
 8004c08:	4608      	mov	r0, r1
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	4d05      	ldr	r5, [pc, #20]	; (8004c24 <_lseek_r+0x20>)
 8004c10:	602a      	str	r2, [r5, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	f7fb fd52 	bl	80006bc <_lseek>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	d102      	bne.n	8004c22 <_lseek_r+0x1e>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	b103      	cbz	r3, 8004c22 <_lseek_r+0x1e>
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	20004010 	.word	0x20004010

08004c28 <_read_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	4611      	mov	r1, r2
 8004c30:	2200      	movs	r2, #0
 8004c32:	4d05      	ldr	r5, [pc, #20]	; (8004c48 <_read_r+0x20>)
 8004c34:	602a      	str	r2, [r5, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f7fb fce3 	bl	8000602 <_read>
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	d102      	bne.n	8004c46 <_read_r+0x1e>
 8004c40:	682b      	ldr	r3, [r5, #0]
 8004c42:	b103      	cbz	r3, 8004c46 <_read_r+0x1e>
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	bd38      	pop	{r3, r4, r5, pc}
 8004c48:	20004010 	.word	0x20004010

08004c4c <_write_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	4611      	mov	r1, r2
 8004c54:	2200      	movs	r2, #0
 8004c56:	4d05      	ldr	r5, [pc, #20]	; (8004c6c <_write_r+0x20>)
 8004c58:	602a      	str	r2, [r5, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f7fb fcee 	bl	800063c <_write>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d102      	bne.n	8004c6a <_write_r+0x1e>
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	b103      	cbz	r3, 8004c6a <_write_r+0x1e>
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	20004010 	.word	0x20004010

08004c70 <__errno>:
 8004c70:	4b01      	ldr	r3, [pc, #4]	; (8004c78 <__errno+0x8>)
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	2000006c 	.word	0x2000006c

08004c7c <__libc_init_array>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	2600      	movs	r6, #0
 8004c80:	4d0c      	ldr	r5, [pc, #48]	; (8004cb4 <__libc_init_array+0x38>)
 8004c82:	4c0d      	ldr	r4, [pc, #52]	; (8004cb8 <__libc_init_array+0x3c>)
 8004c84:	1b64      	subs	r4, r4, r5
 8004c86:	10a4      	asrs	r4, r4, #2
 8004c88:	42a6      	cmp	r6, r4
 8004c8a:	d109      	bne.n	8004ca0 <__libc_init_array+0x24>
 8004c8c:	f000 fe58 	bl	8005940 <_init>
 8004c90:	2600      	movs	r6, #0
 8004c92:	4d0a      	ldr	r5, [pc, #40]	; (8004cbc <__libc_init_array+0x40>)
 8004c94:	4c0a      	ldr	r4, [pc, #40]	; (8004cc0 <__libc_init_array+0x44>)
 8004c96:	1b64      	subs	r4, r4, r5
 8004c98:	10a4      	asrs	r4, r4, #2
 8004c9a:	42a6      	cmp	r6, r4
 8004c9c:	d105      	bne.n	8004caa <__libc_init_array+0x2e>
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca4:	4798      	blx	r3
 8004ca6:	3601      	adds	r6, #1
 8004ca8:	e7ee      	b.n	8004c88 <__libc_init_array+0xc>
 8004caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cae:	4798      	blx	r3
 8004cb0:	3601      	adds	r6, #1
 8004cb2:	e7f2      	b.n	8004c9a <__libc_init_array+0x1e>
 8004cb4:	08005a8c 	.word	0x08005a8c
 8004cb8:	08005a8c 	.word	0x08005a8c
 8004cbc:	08005a8c 	.word	0x08005a8c
 8004cc0:	08005a90 	.word	0x08005a90

08004cc4 <__retarget_lock_acquire_recursive>:
 8004cc4:	4770      	bx	lr

08004cc6 <__retarget_lock_release_recursive>:
 8004cc6:	4770      	bx	lr

08004cc8 <memcpy>:
 8004cc8:	440a      	add	r2, r1
 8004cca:	4291      	cmp	r1, r2
 8004ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cd0:	d100      	bne.n	8004cd4 <memcpy+0xc>
 8004cd2:	4770      	bx	lr
 8004cd4:	b510      	push	{r4, lr}
 8004cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cda:	4291      	cmp	r1, r2
 8004cdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ce0:	d1f9      	bne.n	8004cd6 <memcpy+0xe>
 8004ce2:	bd10      	pop	{r4, pc}

08004ce4 <__assert_func>:
 8004ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ce6:	4614      	mov	r4, r2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <__assert_func+0x2c>)
 8004cec:	4605      	mov	r5, r0
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68d8      	ldr	r0, [r3, #12]
 8004cf2:	b14c      	cbz	r4, 8004d08 <__assert_func+0x24>
 8004cf4:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <__assert_func+0x30>)
 8004cf6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004cfa:	9100      	str	r1, [sp, #0]
 8004cfc:	462b      	mov	r3, r5
 8004cfe:	4906      	ldr	r1, [pc, #24]	; (8004d18 <__assert_func+0x34>)
 8004d00:	f000 f9b4 	bl	800506c <fiprintf>
 8004d04:	f000 f9d4 	bl	80050b0 <abort>
 8004d08:	4b04      	ldr	r3, [pc, #16]	; (8004d1c <__assert_func+0x38>)
 8004d0a:	461c      	mov	r4, r3
 8004d0c:	e7f3      	b.n	8004cf6 <__assert_func+0x12>
 8004d0e:	bf00      	nop
 8004d10:	2000006c 	.word	0x2000006c
 8004d14:	08005a1d 	.word	0x08005a1d
 8004d18:	08005a2a 	.word	0x08005a2a
 8004d1c:	08005a58 	.word	0x08005a58

08004d20 <_free_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	4605      	mov	r5, r0
 8004d24:	2900      	cmp	r1, #0
 8004d26:	d040      	beq.n	8004daa <_free_r+0x8a>
 8004d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d2c:	1f0c      	subs	r4, r1, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bfb8      	it	lt
 8004d32:	18e4      	addlt	r4, r4, r3
 8004d34:	f000 f8e4 	bl	8004f00 <__malloc_lock>
 8004d38:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <_free_r+0x8c>)
 8004d3a:	6813      	ldr	r3, [r2, #0]
 8004d3c:	b933      	cbnz	r3, 8004d4c <_free_r+0x2c>
 8004d3e:	6063      	str	r3, [r4, #4]
 8004d40:	6014      	str	r4, [r2, #0]
 8004d42:	4628      	mov	r0, r5
 8004d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d48:	f000 b8e0 	b.w	8004f0c <__malloc_unlock>
 8004d4c:	42a3      	cmp	r3, r4
 8004d4e:	d908      	bls.n	8004d62 <_free_r+0x42>
 8004d50:	6820      	ldr	r0, [r4, #0]
 8004d52:	1821      	adds	r1, r4, r0
 8004d54:	428b      	cmp	r3, r1
 8004d56:	bf01      	itttt	eq
 8004d58:	6819      	ldreq	r1, [r3, #0]
 8004d5a:	685b      	ldreq	r3, [r3, #4]
 8004d5c:	1809      	addeq	r1, r1, r0
 8004d5e:	6021      	streq	r1, [r4, #0]
 8004d60:	e7ed      	b.n	8004d3e <_free_r+0x1e>
 8004d62:	461a      	mov	r2, r3
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	b10b      	cbz	r3, 8004d6c <_free_r+0x4c>
 8004d68:	42a3      	cmp	r3, r4
 8004d6a:	d9fa      	bls.n	8004d62 <_free_r+0x42>
 8004d6c:	6811      	ldr	r1, [r2, #0]
 8004d6e:	1850      	adds	r0, r2, r1
 8004d70:	42a0      	cmp	r0, r4
 8004d72:	d10b      	bne.n	8004d8c <_free_r+0x6c>
 8004d74:	6820      	ldr	r0, [r4, #0]
 8004d76:	4401      	add	r1, r0
 8004d78:	1850      	adds	r0, r2, r1
 8004d7a:	4283      	cmp	r3, r0
 8004d7c:	6011      	str	r1, [r2, #0]
 8004d7e:	d1e0      	bne.n	8004d42 <_free_r+0x22>
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	4408      	add	r0, r1
 8004d86:	6010      	str	r0, [r2, #0]
 8004d88:	6053      	str	r3, [r2, #4]
 8004d8a:	e7da      	b.n	8004d42 <_free_r+0x22>
 8004d8c:	d902      	bls.n	8004d94 <_free_r+0x74>
 8004d8e:	230c      	movs	r3, #12
 8004d90:	602b      	str	r3, [r5, #0]
 8004d92:	e7d6      	b.n	8004d42 <_free_r+0x22>
 8004d94:	6820      	ldr	r0, [r4, #0]
 8004d96:	1821      	adds	r1, r4, r0
 8004d98:	428b      	cmp	r3, r1
 8004d9a:	bf01      	itttt	eq
 8004d9c:	6819      	ldreq	r1, [r3, #0]
 8004d9e:	685b      	ldreq	r3, [r3, #4]
 8004da0:	1809      	addeq	r1, r1, r0
 8004da2:	6021      	streq	r1, [r4, #0]
 8004da4:	6063      	str	r3, [r4, #4]
 8004da6:	6054      	str	r4, [r2, #4]
 8004da8:	e7cb      	b.n	8004d42 <_free_r+0x22>
 8004daa:	bd38      	pop	{r3, r4, r5, pc}
 8004dac:	20004018 	.word	0x20004018

08004db0 <malloc>:
 8004db0:	4b02      	ldr	r3, [pc, #8]	; (8004dbc <malloc+0xc>)
 8004db2:	4601      	mov	r1, r0
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	f000 b823 	b.w	8004e00 <_malloc_r>
 8004dba:	bf00      	nop
 8004dbc:	2000006c 	.word	0x2000006c

08004dc0 <sbrk_aligned>:
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	4e0e      	ldr	r6, [pc, #56]	; (8004dfc <sbrk_aligned+0x3c>)
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	6831      	ldr	r1, [r6, #0]
 8004dc8:	4605      	mov	r5, r0
 8004dca:	b911      	cbnz	r1, 8004dd2 <sbrk_aligned+0x12>
 8004dcc:	f000 f960 	bl	8005090 <_sbrk_r>
 8004dd0:	6030      	str	r0, [r6, #0]
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 f95b 	bl	8005090 <_sbrk_r>
 8004dda:	1c43      	adds	r3, r0, #1
 8004ddc:	d00a      	beq.n	8004df4 <sbrk_aligned+0x34>
 8004dde:	1cc4      	adds	r4, r0, #3
 8004de0:	f024 0403 	bic.w	r4, r4, #3
 8004de4:	42a0      	cmp	r0, r4
 8004de6:	d007      	beq.n	8004df8 <sbrk_aligned+0x38>
 8004de8:	1a21      	subs	r1, r4, r0
 8004dea:	4628      	mov	r0, r5
 8004dec:	f000 f950 	bl	8005090 <_sbrk_r>
 8004df0:	3001      	adds	r0, #1
 8004df2:	d101      	bne.n	8004df8 <sbrk_aligned+0x38>
 8004df4:	f04f 34ff 	mov.w	r4, #4294967295
 8004df8:	4620      	mov	r0, r4
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	2000401c 	.word	0x2000401c

08004e00 <_malloc_r>:
 8004e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e04:	1ccd      	adds	r5, r1, #3
 8004e06:	f025 0503 	bic.w	r5, r5, #3
 8004e0a:	3508      	adds	r5, #8
 8004e0c:	2d0c      	cmp	r5, #12
 8004e0e:	bf38      	it	cc
 8004e10:	250c      	movcc	r5, #12
 8004e12:	2d00      	cmp	r5, #0
 8004e14:	4607      	mov	r7, r0
 8004e16:	db01      	blt.n	8004e1c <_malloc_r+0x1c>
 8004e18:	42a9      	cmp	r1, r5
 8004e1a:	d905      	bls.n	8004e28 <_malloc_r+0x28>
 8004e1c:	230c      	movs	r3, #12
 8004e1e:	2600      	movs	r6, #0
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	4630      	mov	r0, r6
 8004e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004efc <_malloc_r+0xfc>
 8004e2c:	f000 f868 	bl	8004f00 <__malloc_lock>
 8004e30:	f8d8 3000 	ldr.w	r3, [r8]
 8004e34:	461c      	mov	r4, r3
 8004e36:	bb5c      	cbnz	r4, 8004e90 <_malloc_r+0x90>
 8004e38:	4629      	mov	r1, r5
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	f7ff ffc0 	bl	8004dc0 <sbrk_aligned>
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	4604      	mov	r4, r0
 8004e44:	d155      	bne.n	8004ef2 <_malloc_r+0xf2>
 8004e46:	f8d8 4000 	ldr.w	r4, [r8]
 8004e4a:	4626      	mov	r6, r4
 8004e4c:	2e00      	cmp	r6, #0
 8004e4e:	d145      	bne.n	8004edc <_malloc_r+0xdc>
 8004e50:	2c00      	cmp	r4, #0
 8004e52:	d048      	beq.n	8004ee6 <_malloc_r+0xe6>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	4631      	mov	r1, r6
 8004e58:	4638      	mov	r0, r7
 8004e5a:	eb04 0903 	add.w	r9, r4, r3
 8004e5e:	f000 f917 	bl	8005090 <_sbrk_r>
 8004e62:	4581      	cmp	r9, r0
 8004e64:	d13f      	bne.n	8004ee6 <_malloc_r+0xe6>
 8004e66:	6821      	ldr	r1, [r4, #0]
 8004e68:	4638      	mov	r0, r7
 8004e6a:	1a6d      	subs	r5, r5, r1
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	f7ff ffa7 	bl	8004dc0 <sbrk_aligned>
 8004e72:	3001      	adds	r0, #1
 8004e74:	d037      	beq.n	8004ee6 <_malloc_r+0xe6>
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	442b      	add	r3, r5
 8004e7a:	6023      	str	r3, [r4, #0]
 8004e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d038      	beq.n	8004ef6 <_malloc_r+0xf6>
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	42a2      	cmp	r2, r4
 8004e88:	d12b      	bne.n	8004ee2 <_malloc_r+0xe2>
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	e00f      	b.n	8004eb0 <_malloc_r+0xb0>
 8004e90:	6822      	ldr	r2, [r4, #0]
 8004e92:	1b52      	subs	r2, r2, r5
 8004e94:	d41f      	bmi.n	8004ed6 <_malloc_r+0xd6>
 8004e96:	2a0b      	cmp	r2, #11
 8004e98:	d917      	bls.n	8004eca <_malloc_r+0xca>
 8004e9a:	1961      	adds	r1, r4, r5
 8004e9c:	42a3      	cmp	r3, r4
 8004e9e:	6025      	str	r5, [r4, #0]
 8004ea0:	bf18      	it	ne
 8004ea2:	6059      	strne	r1, [r3, #4]
 8004ea4:	6863      	ldr	r3, [r4, #4]
 8004ea6:	bf08      	it	eq
 8004ea8:	f8c8 1000 	streq.w	r1, [r8]
 8004eac:	5162      	str	r2, [r4, r5]
 8004eae:	604b      	str	r3, [r1, #4]
 8004eb0:	4638      	mov	r0, r7
 8004eb2:	f104 060b 	add.w	r6, r4, #11
 8004eb6:	f000 f829 	bl	8004f0c <__malloc_unlock>
 8004eba:	f026 0607 	bic.w	r6, r6, #7
 8004ebe:	1d23      	adds	r3, r4, #4
 8004ec0:	1af2      	subs	r2, r6, r3
 8004ec2:	d0ae      	beq.n	8004e22 <_malloc_r+0x22>
 8004ec4:	1b9b      	subs	r3, r3, r6
 8004ec6:	50a3      	str	r3, [r4, r2]
 8004ec8:	e7ab      	b.n	8004e22 <_malloc_r+0x22>
 8004eca:	42a3      	cmp	r3, r4
 8004ecc:	6862      	ldr	r2, [r4, #4]
 8004ece:	d1dd      	bne.n	8004e8c <_malloc_r+0x8c>
 8004ed0:	f8c8 2000 	str.w	r2, [r8]
 8004ed4:	e7ec      	b.n	8004eb0 <_malloc_r+0xb0>
 8004ed6:	4623      	mov	r3, r4
 8004ed8:	6864      	ldr	r4, [r4, #4]
 8004eda:	e7ac      	b.n	8004e36 <_malloc_r+0x36>
 8004edc:	4634      	mov	r4, r6
 8004ede:	6876      	ldr	r6, [r6, #4]
 8004ee0:	e7b4      	b.n	8004e4c <_malloc_r+0x4c>
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	e7cc      	b.n	8004e80 <_malloc_r+0x80>
 8004ee6:	230c      	movs	r3, #12
 8004ee8:	4638      	mov	r0, r7
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	f000 f80e 	bl	8004f0c <__malloc_unlock>
 8004ef0:	e797      	b.n	8004e22 <_malloc_r+0x22>
 8004ef2:	6025      	str	r5, [r4, #0]
 8004ef4:	e7dc      	b.n	8004eb0 <_malloc_r+0xb0>
 8004ef6:	605b      	str	r3, [r3, #4]
 8004ef8:	deff      	udf	#255	; 0xff
 8004efa:	bf00      	nop
 8004efc:	20004018 	.word	0x20004018

08004f00 <__malloc_lock>:
 8004f00:	4801      	ldr	r0, [pc, #4]	; (8004f08 <__malloc_lock+0x8>)
 8004f02:	f7ff bedf 	b.w	8004cc4 <__retarget_lock_acquire_recursive>
 8004f06:	bf00      	nop
 8004f08:	20004014 	.word	0x20004014

08004f0c <__malloc_unlock>:
 8004f0c:	4801      	ldr	r0, [pc, #4]	; (8004f14 <__malloc_unlock+0x8>)
 8004f0e:	f7ff beda 	b.w	8004cc6 <__retarget_lock_release_recursive>
 8004f12:	bf00      	nop
 8004f14:	20004014 	.word	0x20004014

08004f18 <__sflush_r>:
 8004f18:	898a      	ldrh	r2, [r1, #12]
 8004f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1c:	4605      	mov	r5, r0
 8004f1e:	0710      	lsls	r0, r2, #28
 8004f20:	460c      	mov	r4, r1
 8004f22:	d457      	bmi.n	8004fd4 <__sflush_r+0xbc>
 8004f24:	684b      	ldr	r3, [r1, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	dc04      	bgt.n	8004f34 <__sflush_r+0x1c>
 8004f2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	dc01      	bgt.n	8004f34 <__sflush_r+0x1c>
 8004f30:	2000      	movs	r0, #0
 8004f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f36:	2e00      	cmp	r6, #0
 8004f38:	d0fa      	beq.n	8004f30 <__sflush_r+0x18>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f40:	682f      	ldr	r7, [r5, #0]
 8004f42:	6a21      	ldr	r1, [r4, #32]
 8004f44:	602b      	str	r3, [r5, #0]
 8004f46:	d032      	beq.n	8004fae <__sflush_r+0x96>
 8004f48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f4a:	89a3      	ldrh	r3, [r4, #12]
 8004f4c:	075a      	lsls	r2, r3, #29
 8004f4e:	d505      	bpl.n	8004f5c <__sflush_r+0x44>
 8004f50:	6863      	ldr	r3, [r4, #4]
 8004f52:	1ac0      	subs	r0, r0, r3
 8004f54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f56:	b10b      	cbz	r3, 8004f5c <__sflush_r+0x44>
 8004f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f5a:	1ac0      	subs	r0, r0, r3
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	4602      	mov	r2, r0
 8004f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f62:	4628      	mov	r0, r5
 8004f64:	6a21      	ldr	r1, [r4, #32]
 8004f66:	47b0      	blx	r6
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	89a3      	ldrh	r3, [r4, #12]
 8004f6c:	d106      	bne.n	8004f7c <__sflush_r+0x64>
 8004f6e:	6829      	ldr	r1, [r5, #0]
 8004f70:	291d      	cmp	r1, #29
 8004f72:	d82b      	bhi.n	8004fcc <__sflush_r+0xb4>
 8004f74:	4a28      	ldr	r2, [pc, #160]	; (8005018 <__sflush_r+0x100>)
 8004f76:	410a      	asrs	r2, r1
 8004f78:	07d6      	lsls	r6, r2, #31
 8004f7a:	d427      	bmi.n	8004fcc <__sflush_r+0xb4>
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	6062      	str	r2, [r4, #4]
 8004f80:	6922      	ldr	r2, [r4, #16]
 8004f82:	04d9      	lsls	r1, r3, #19
 8004f84:	6022      	str	r2, [r4, #0]
 8004f86:	d504      	bpl.n	8004f92 <__sflush_r+0x7a>
 8004f88:	1c42      	adds	r2, r0, #1
 8004f8a:	d101      	bne.n	8004f90 <__sflush_r+0x78>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	b903      	cbnz	r3, 8004f92 <__sflush_r+0x7a>
 8004f90:	6560      	str	r0, [r4, #84]	; 0x54
 8004f92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f94:	602f      	str	r7, [r5, #0]
 8004f96:	2900      	cmp	r1, #0
 8004f98:	d0ca      	beq.n	8004f30 <__sflush_r+0x18>
 8004f9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f9e:	4299      	cmp	r1, r3
 8004fa0:	d002      	beq.n	8004fa8 <__sflush_r+0x90>
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	f7ff febc 	bl	8004d20 <_free_r>
 8004fa8:	2000      	movs	r0, #0
 8004faa:	6360      	str	r0, [r4, #52]	; 0x34
 8004fac:	e7c1      	b.n	8004f32 <__sflush_r+0x1a>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	47b0      	blx	r6
 8004fb4:	1c41      	adds	r1, r0, #1
 8004fb6:	d1c8      	bne.n	8004f4a <__sflush_r+0x32>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0c5      	beq.n	8004f4a <__sflush_r+0x32>
 8004fbe:	2b1d      	cmp	r3, #29
 8004fc0:	d001      	beq.n	8004fc6 <__sflush_r+0xae>
 8004fc2:	2b16      	cmp	r3, #22
 8004fc4:	d101      	bne.n	8004fca <__sflush_r+0xb2>
 8004fc6:	602f      	str	r7, [r5, #0]
 8004fc8:	e7b2      	b.n	8004f30 <__sflush_r+0x18>
 8004fca:	89a3      	ldrh	r3, [r4, #12]
 8004fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd0:	81a3      	strh	r3, [r4, #12]
 8004fd2:	e7ae      	b.n	8004f32 <__sflush_r+0x1a>
 8004fd4:	690f      	ldr	r7, [r1, #16]
 8004fd6:	2f00      	cmp	r7, #0
 8004fd8:	d0aa      	beq.n	8004f30 <__sflush_r+0x18>
 8004fda:	0793      	lsls	r3, r2, #30
 8004fdc:	bf18      	it	ne
 8004fde:	2300      	movne	r3, #0
 8004fe0:	680e      	ldr	r6, [r1, #0]
 8004fe2:	bf08      	it	eq
 8004fe4:	694b      	ldreq	r3, [r1, #20]
 8004fe6:	1bf6      	subs	r6, r6, r7
 8004fe8:	600f      	str	r7, [r1, #0]
 8004fea:	608b      	str	r3, [r1, #8]
 8004fec:	2e00      	cmp	r6, #0
 8004fee:	dd9f      	ble.n	8004f30 <__sflush_r+0x18>
 8004ff0:	4633      	mov	r3, r6
 8004ff2:	463a      	mov	r2, r7
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	6a21      	ldr	r1, [r4, #32]
 8004ff8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004ffc:	47e0      	blx	ip
 8004ffe:	2800      	cmp	r0, #0
 8005000:	dc06      	bgt.n	8005010 <__sflush_r+0xf8>
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	f04f 30ff 	mov.w	r0, #4294967295
 8005008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800500c:	81a3      	strh	r3, [r4, #12]
 800500e:	e790      	b.n	8004f32 <__sflush_r+0x1a>
 8005010:	4407      	add	r7, r0
 8005012:	1a36      	subs	r6, r6, r0
 8005014:	e7ea      	b.n	8004fec <__sflush_r+0xd4>
 8005016:	bf00      	nop
 8005018:	dfbffffe 	.word	0xdfbffffe

0800501c <_fflush_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	690b      	ldr	r3, [r1, #16]
 8005020:	4605      	mov	r5, r0
 8005022:	460c      	mov	r4, r1
 8005024:	b913      	cbnz	r3, 800502c <_fflush_r+0x10>
 8005026:	2500      	movs	r5, #0
 8005028:	4628      	mov	r0, r5
 800502a:	bd38      	pop	{r3, r4, r5, pc}
 800502c:	b118      	cbz	r0, 8005036 <_fflush_r+0x1a>
 800502e:	6a03      	ldr	r3, [r0, #32]
 8005030:	b90b      	cbnz	r3, 8005036 <_fflush_r+0x1a>
 8005032:	f7ff fd55 	bl	8004ae0 <__sinit>
 8005036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f3      	beq.n	8005026 <_fflush_r+0xa>
 800503e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005040:	07d0      	lsls	r0, r2, #31
 8005042:	d404      	bmi.n	800504e <_fflush_r+0x32>
 8005044:	0599      	lsls	r1, r3, #22
 8005046:	d402      	bmi.n	800504e <_fflush_r+0x32>
 8005048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800504a:	f7ff fe3b 	bl	8004cc4 <__retarget_lock_acquire_recursive>
 800504e:	4628      	mov	r0, r5
 8005050:	4621      	mov	r1, r4
 8005052:	f7ff ff61 	bl	8004f18 <__sflush_r>
 8005056:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005058:	4605      	mov	r5, r0
 800505a:	07da      	lsls	r2, r3, #31
 800505c:	d4e4      	bmi.n	8005028 <_fflush_r+0xc>
 800505e:	89a3      	ldrh	r3, [r4, #12]
 8005060:	059b      	lsls	r3, r3, #22
 8005062:	d4e1      	bmi.n	8005028 <_fflush_r+0xc>
 8005064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005066:	f7ff fe2e 	bl	8004cc6 <__retarget_lock_release_recursive>
 800506a:	e7dd      	b.n	8005028 <_fflush_r+0xc>

0800506c <fiprintf>:
 800506c:	b40e      	push	{r1, r2, r3}
 800506e:	b503      	push	{r0, r1, lr}
 8005070:	4601      	mov	r1, r0
 8005072:	ab03      	add	r3, sp, #12
 8005074:	4805      	ldr	r0, [pc, #20]	; (800508c <fiprintf+0x20>)
 8005076:	f853 2b04 	ldr.w	r2, [r3], #4
 800507a:	6800      	ldr	r0, [r0, #0]
 800507c:	9301      	str	r3, [sp, #4]
 800507e:	f000 f845 	bl	800510c <_vfiprintf_r>
 8005082:	b002      	add	sp, #8
 8005084:	f85d eb04 	ldr.w	lr, [sp], #4
 8005088:	b003      	add	sp, #12
 800508a:	4770      	bx	lr
 800508c:	2000006c 	.word	0x2000006c

08005090 <_sbrk_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	2300      	movs	r3, #0
 8005094:	4d05      	ldr	r5, [pc, #20]	; (80050ac <_sbrk_r+0x1c>)
 8005096:	4604      	mov	r4, r0
 8005098:	4608      	mov	r0, r1
 800509a:	602b      	str	r3, [r5, #0]
 800509c:	f7fb fb1a 	bl	80006d4 <_sbrk>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_sbrk_r+0x1a>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_sbrk_r+0x1a>
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	20004010 	.word	0x20004010

080050b0 <abort>:
 80050b0:	2006      	movs	r0, #6
 80050b2:	b508      	push	{r3, lr}
 80050b4:	f000 fb96 	bl	80057e4 <raise>
 80050b8:	2001      	movs	r0, #1
 80050ba:	f7fb fa98 	bl	80005ee <_exit>

080050be <__sfputc_r>:
 80050be:	6893      	ldr	r3, [r2, #8]
 80050c0:	b410      	push	{r4}
 80050c2:	3b01      	subs	r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	6093      	str	r3, [r2, #8]
 80050c8:	da07      	bge.n	80050da <__sfputc_r+0x1c>
 80050ca:	6994      	ldr	r4, [r2, #24]
 80050cc:	42a3      	cmp	r3, r4
 80050ce:	db01      	blt.n	80050d4 <__sfputc_r+0x16>
 80050d0:	290a      	cmp	r1, #10
 80050d2:	d102      	bne.n	80050da <__sfputc_r+0x1c>
 80050d4:	bc10      	pop	{r4}
 80050d6:	f000 bac7 	b.w	8005668 <__swbuf_r>
 80050da:	6813      	ldr	r3, [r2, #0]
 80050dc:	1c58      	adds	r0, r3, #1
 80050de:	6010      	str	r0, [r2, #0]
 80050e0:	7019      	strb	r1, [r3, #0]
 80050e2:	4608      	mov	r0, r1
 80050e4:	bc10      	pop	{r4}
 80050e6:	4770      	bx	lr

080050e8 <__sfputs_r>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	4606      	mov	r6, r0
 80050ec:	460f      	mov	r7, r1
 80050ee:	4614      	mov	r4, r2
 80050f0:	18d5      	adds	r5, r2, r3
 80050f2:	42ac      	cmp	r4, r5
 80050f4:	d101      	bne.n	80050fa <__sfputs_r+0x12>
 80050f6:	2000      	movs	r0, #0
 80050f8:	e007      	b.n	800510a <__sfputs_r+0x22>
 80050fa:	463a      	mov	r2, r7
 80050fc:	4630      	mov	r0, r6
 80050fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005102:	f7ff ffdc 	bl	80050be <__sfputc_r>
 8005106:	1c43      	adds	r3, r0, #1
 8005108:	d1f3      	bne.n	80050f2 <__sfputs_r+0xa>
 800510a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800510c <_vfiprintf_r>:
 800510c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005110:	460d      	mov	r5, r1
 8005112:	4614      	mov	r4, r2
 8005114:	4698      	mov	r8, r3
 8005116:	4606      	mov	r6, r0
 8005118:	b09d      	sub	sp, #116	; 0x74
 800511a:	b118      	cbz	r0, 8005124 <_vfiprintf_r+0x18>
 800511c:	6a03      	ldr	r3, [r0, #32]
 800511e:	b90b      	cbnz	r3, 8005124 <_vfiprintf_r+0x18>
 8005120:	f7ff fcde 	bl	8004ae0 <__sinit>
 8005124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005126:	07d9      	lsls	r1, r3, #31
 8005128:	d405      	bmi.n	8005136 <_vfiprintf_r+0x2a>
 800512a:	89ab      	ldrh	r3, [r5, #12]
 800512c:	059a      	lsls	r2, r3, #22
 800512e:	d402      	bmi.n	8005136 <_vfiprintf_r+0x2a>
 8005130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005132:	f7ff fdc7 	bl	8004cc4 <__retarget_lock_acquire_recursive>
 8005136:	89ab      	ldrh	r3, [r5, #12]
 8005138:	071b      	lsls	r3, r3, #28
 800513a:	d501      	bpl.n	8005140 <_vfiprintf_r+0x34>
 800513c:	692b      	ldr	r3, [r5, #16]
 800513e:	b99b      	cbnz	r3, 8005168 <_vfiprintf_r+0x5c>
 8005140:	4629      	mov	r1, r5
 8005142:	4630      	mov	r0, r6
 8005144:	f000 face 	bl	80056e4 <__swsetup_r>
 8005148:	b170      	cbz	r0, 8005168 <_vfiprintf_r+0x5c>
 800514a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800514c:	07dc      	lsls	r4, r3, #31
 800514e:	d504      	bpl.n	800515a <_vfiprintf_r+0x4e>
 8005150:	f04f 30ff 	mov.w	r0, #4294967295
 8005154:	b01d      	add	sp, #116	; 0x74
 8005156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515a:	89ab      	ldrh	r3, [r5, #12]
 800515c:	0598      	lsls	r0, r3, #22
 800515e:	d4f7      	bmi.n	8005150 <_vfiprintf_r+0x44>
 8005160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005162:	f7ff fdb0 	bl	8004cc6 <__retarget_lock_release_recursive>
 8005166:	e7f3      	b.n	8005150 <_vfiprintf_r+0x44>
 8005168:	2300      	movs	r3, #0
 800516a:	9309      	str	r3, [sp, #36]	; 0x24
 800516c:	2320      	movs	r3, #32
 800516e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005172:	2330      	movs	r3, #48	; 0x30
 8005174:	f04f 0901 	mov.w	r9, #1
 8005178:	f8cd 800c 	str.w	r8, [sp, #12]
 800517c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800532c <_vfiprintf_r+0x220>
 8005180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005184:	4623      	mov	r3, r4
 8005186:	469a      	mov	sl, r3
 8005188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800518c:	b10a      	cbz	r2, 8005192 <_vfiprintf_r+0x86>
 800518e:	2a25      	cmp	r2, #37	; 0x25
 8005190:	d1f9      	bne.n	8005186 <_vfiprintf_r+0x7a>
 8005192:	ebba 0b04 	subs.w	fp, sl, r4
 8005196:	d00b      	beq.n	80051b0 <_vfiprintf_r+0xa4>
 8005198:	465b      	mov	r3, fp
 800519a:	4622      	mov	r2, r4
 800519c:	4629      	mov	r1, r5
 800519e:	4630      	mov	r0, r6
 80051a0:	f7ff ffa2 	bl	80050e8 <__sfputs_r>
 80051a4:	3001      	adds	r0, #1
 80051a6:	f000 80a9 	beq.w	80052fc <_vfiprintf_r+0x1f0>
 80051aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051ac:	445a      	add	r2, fp
 80051ae:	9209      	str	r2, [sp, #36]	; 0x24
 80051b0:	f89a 3000 	ldrb.w	r3, [sl]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 80a1 	beq.w	80052fc <_vfiprintf_r+0x1f0>
 80051ba:	2300      	movs	r3, #0
 80051bc:	f04f 32ff 	mov.w	r2, #4294967295
 80051c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051c4:	f10a 0a01 	add.w	sl, sl, #1
 80051c8:	9304      	str	r3, [sp, #16]
 80051ca:	9307      	str	r3, [sp, #28]
 80051cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051d0:	931a      	str	r3, [sp, #104]	; 0x68
 80051d2:	4654      	mov	r4, sl
 80051d4:	2205      	movs	r2, #5
 80051d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051da:	4854      	ldr	r0, [pc, #336]	; (800532c <_vfiprintf_r+0x220>)
 80051dc:	f000 fb1e 	bl	800581c <memchr>
 80051e0:	9a04      	ldr	r2, [sp, #16]
 80051e2:	b9d8      	cbnz	r0, 800521c <_vfiprintf_r+0x110>
 80051e4:	06d1      	lsls	r1, r2, #27
 80051e6:	bf44      	itt	mi
 80051e8:	2320      	movmi	r3, #32
 80051ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051ee:	0713      	lsls	r3, r2, #28
 80051f0:	bf44      	itt	mi
 80051f2:	232b      	movmi	r3, #43	; 0x2b
 80051f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051f8:	f89a 3000 	ldrb.w	r3, [sl]
 80051fc:	2b2a      	cmp	r3, #42	; 0x2a
 80051fe:	d015      	beq.n	800522c <_vfiprintf_r+0x120>
 8005200:	4654      	mov	r4, sl
 8005202:	2000      	movs	r0, #0
 8005204:	f04f 0c0a 	mov.w	ip, #10
 8005208:	9a07      	ldr	r2, [sp, #28]
 800520a:	4621      	mov	r1, r4
 800520c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005210:	3b30      	subs	r3, #48	; 0x30
 8005212:	2b09      	cmp	r3, #9
 8005214:	d94d      	bls.n	80052b2 <_vfiprintf_r+0x1a6>
 8005216:	b1b0      	cbz	r0, 8005246 <_vfiprintf_r+0x13a>
 8005218:	9207      	str	r2, [sp, #28]
 800521a:	e014      	b.n	8005246 <_vfiprintf_r+0x13a>
 800521c:	eba0 0308 	sub.w	r3, r0, r8
 8005220:	fa09 f303 	lsl.w	r3, r9, r3
 8005224:	4313      	orrs	r3, r2
 8005226:	46a2      	mov	sl, r4
 8005228:	9304      	str	r3, [sp, #16]
 800522a:	e7d2      	b.n	80051d2 <_vfiprintf_r+0xc6>
 800522c:	9b03      	ldr	r3, [sp, #12]
 800522e:	1d19      	adds	r1, r3, #4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	9103      	str	r1, [sp, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	bfbb      	ittet	lt
 8005238:	425b      	neglt	r3, r3
 800523a:	f042 0202 	orrlt.w	r2, r2, #2
 800523e:	9307      	strge	r3, [sp, #28]
 8005240:	9307      	strlt	r3, [sp, #28]
 8005242:	bfb8      	it	lt
 8005244:	9204      	strlt	r2, [sp, #16]
 8005246:	7823      	ldrb	r3, [r4, #0]
 8005248:	2b2e      	cmp	r3, #46	; 0x2e
 800524a:	d10c      	bne.n	8005266 <_vfiprintf_r+0x15a>
 800524c:	7863      	ldrb	r3, [r4, #1]
 800524e:	2b2a      	cmp	r3, #42	; 0x2a
 8005250:	d134      	bne.n	80052bc <_vfiprintf_r+0x1b0>
 8005252:	9b03      	ldr	r3, [sp, #12]
 8005254:	3402      	adds	r4, #2
 8005256:	1d1a      	adds	r2, r3, #4
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	9203      	str	r2, [sp, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	bfb8      	it	lt
 8005260:	f04f 33ff 	movlt.w	r3, #4294967295
 8005264:	9305      	str	r3, [sp, #20]
 8005266:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005330 <_vfiprintf_r+0x224>
 800526a:	2203      	movs	r2, #3
 800526c:	4650      	mov	r0, sl
 800526e:	7821      	ldrb	r1, [r4, #0]
 8005270:	f000 fad4 	bl	800581c <memchr>
 8005274:	b138      	cbz	r0, 8005286 <_vfiprintf_r+0x17a>
 8005276:	2240      	movs	r2, #64	; 0x40
 8005278:	9b04      	ldr	r3, [sp, #16]
 800527a:	eba0 000a 	sub.w	r0, r0, sl
 800527e:	4082      	lsls	r2, r0
 8005280:	4313      	orrs	r3, r2
 8005282:	3401      	adds	r4, #1
 8005284:	9304      	str	r3, [sp, #16]
 8005286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800528a:	2206      	movs	r2, #6
 800528c:	4829      	ldr	r0, [pc, #164]	; (8005334 <_vfiprintf_r+0x228>)
 800528e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005292:	f000 fac3 	bl	800581c <memchr>
 8005296:	2800      	cmp	r0, #0
 8005298:	d03f      	beq.n	800531a <_vfiprintf_r+0x20e>
 800529a:	4b27      	ldr	r3, [pc, #156]	; (8005338 <_vfiprintf_r+0x22c>)
 800529c:	bb1b      	cbnz	r3, 80052e6 <_vfiprintf_r+0x1da>
 800529e:	9b03      	ldr	r3, [sp, #12]
 80052a0:	3307      	adds	r3, #7
 80052a2:	f023 0307 	bic.w	r3, r3, #7
 80052a6:	3308      	adds	r3, #8
 80052a8:	9303      	str	r3, [sp, #12]
 80052aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ac:	443b      	add	r3, r7
 80052ae:	9309      	str	r3, [sp, #36]	; 0x24
 80052b0:	e768      	b.n	8005184 <_vfiprintf_r+0x78>
 80052b2:	460c      	mov	r4, r1
 80052b4:	2001      	movs	r0, #1
 80052b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80052ba:	e7a6      	b.n	800520a <_vfiprintf_r+0xfe>
 80052bc:	2300      	movs	r3, #0
 80052be:	f04f 0c0a 	mov.w	ip, #10
 80052c2:	4619      	mov	r1, r3
 80052c4:	3401      	adds	r4, #1
 80052c6:	9305      	str	r3, [sp, #20]
 80052c8:	4620      	mov	r0, r4
 80052ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052ce:	3a30      	subs	r2, #48	; 0x30
 80052d0:	2a09      	cmp	r2, #9
 80052d2:	d903      	bls.n	80052dc <_vfiprintf_r+0x1d0>
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0c6      	beq.n	8005266 <_vfiprintf_r+0x15a>
 80052d8:	9105      	str	r1, [sp, #20]
 80052da:	e7c4      	b.n	8005266 <_vfiprintf_r+0x15a>
 80052dc:	4604      	mov	r4, r0
 80052de:	2301      	movs	r3, #1
 80052e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80052e4:	e7f0      	b.n	80052c8 <_vfiprintf_r+0x1bc>
 80052e6:	ab03      	add	r3, sp, #12
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	462a      	mov	r2, r5
 80052ec:	4630      	mov	r0, r6
 80052ee:	4b13      	ldr	r3, [pc, #76]	; (800533c <_vfiprintf_r+0x230>)
 80052f0:	a904      	add	r1, sp, #16
 80052f2:	f3af 8000 	nop.w
 80052f6:	4607      	mov	r7, r0
 80052f8:	1c78      	adds	r0, r7, #1
 80052fa:	d1d6      	bne.n	80052aa <_vfiprintf_r+0x19e>
 80052fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052fe:	07d9      	lsls	r1, r3, #31
 8005300:	d405      	bmi.n	800530e <_vfiprintf_r+0x202>
 8005302:	89ab      	ldrh	r3, [r5, #12]
 8005304:	059a      	lsls	r2, r3, #22
 8005306:	d402      	bmi.n	800530e <_vfiprintf_r+0x202>
 8005308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800530a:	f7ff fcdc 	bl	8004cc6 <__retarget_lock_release_recursive>
 800530e:	89ab      	ldrh	r3, [r5, #12]
 8005310:	065b      	lsls	r3, r3, #25
 8005312:	f53f af1d 	bmi.w	8005150 <_vfiprintf_r+0x44>
 8005316:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005318:	e71c      	b.n	8005154 <_vfiprintf_r+0x48>
 800531a:	ab03      	add	r3, sp, #12
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	462a      	mov	r2, r5
 8005320:	4630      	mov	r0, r6
 8005322:	4b06      	ldr	r3, [pc, #24]	; (800533c <_vfiprintf_r+0x230>)
 8005324:	a904      	add	r1, sp, #16
 8005326:	f000 f87d 	bl	8005424 <_printf_i>
 800532a:	e7e4      	b.n	80052f6 <_vfiprintf_r+0x1ea>
 800532c:	08005a59 	.word	0x08005a59
 8005330:	08005a5f 	.word	0x08005a5f
 8005334:	08005a63 	.word	0x08005a63
 8005338:	00000000 	.word	0x00000000
 800533c:	080050e9 	.word	0x080050e9

08005340 <_printf_common>:
 8005340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005344:	4616      	mov	r6, r2
 8005346:	4699      	mov	r9, r3
 8005348:	688a      	ldr	r2, [r1, #8]
 800534a:	690b      	ldr	r3, [r1, #16]
 800534c:	4607      	mov	r7, r0
 800534e:	4293      	cmp	r3, r2
 8005350:	bfb8      	it	lt
 8005352:	4613      	movlt	r3, r2
 8005354:	6033      	str	r3, [r6, #0]
 8005356:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800535a:	460c      	mov	r4, r1
 800535c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005360:	b10a      	cbz	r2, 8005366 <_printf_common+0x26>
 8005362:	3301      	adds	r3, #1
 8005364:	6033      	str	r3, [r6, #0]
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	0699      	lsls	r1, r3, #26
 800536a:	bf42      	ittt	mi
 800536c:	6833      	ldrmi	r3, [r6, #0]
 800536e:	3302      	addmi	r3, #2
 8005370:	6033      	strmi	r3, [r6, #0]
 8005372:	6825      	ldr	r5, [r4, #0]
 8005374:	f015 0506 	ands.w	r5, r5, #6
 8005378:	d106      	bne.n	8005388 <_printf_common+0x48>
 800537a:	f104 0a19 	add.w	sl, r4, #25
 800537e:	68e3      	ldr	r3, [r4, #12]
 8005380:	6832      	ldr	r2, [r6, #0]
 8005382:	1a9b      	subs	r3, r3, r2
 8005384:	42ab      	cmp	r3, r5
 8005386:	dc2b      	bgt.n	80053e0 <_printf_common+0xa0>
 8005388:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800538c:	1e13      	subs	r3, r2, #0
 800538e:	6822      	ldr	r2, [r4, #0]
 8005390:	bf18      	it	ne
 8005392:	2301      	movne	r3, #1
 8005394:	0692      	lsls	r2, r2, #26
 8005396:	d430      	bmi.n	80053fa <_printf_common+0xba>
 8005398:	4649      	mov	r1, r9
 800539a:	4638      	mov	r0, r7
 800539c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053a0:	47c0      	blx	r8
 80053a2:	3001      	adds	r0, #1
 80053a4:	d023      	beq.n	80053ee <_printf_common+0xae>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	6922      	ldr	r2, [r4, #16]
 80053aa:	f003 0306 	and.w	r3, r3, #6
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	bf14      	ite	ne
 80053b2:	2500      	movne	r5, #0
 80053b4:	6833      	ldreq	r3, [r6, #0]
 80053b6:	f04f 0600 	mov.w	r6, #0
 80053ba:	bf08      	it	eq
 80053bc:	68e5      	ldreq	r5, [r4, #12]
 80053be:	f104 041a 	add.w	r4, r4, #26
 80053c2:	bf08      	it	eq
 80053c4:	1aed      	subeq	r5, r5, r3
 80053c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80053ca:	bf08      	it	eq
 80053cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053d0:	4293      	cmp	r3, r2
 80053d2:	bfc4      	itt	gt
 80053d4:	1a9b      	subgt	r3, r3, r2
 80053d6:	18ed      	addgt	r5, r5, r3
 80053d8:	42b5      	cmp	r5, r6
 80053da:	d11a      	bne.n	8005412 <_printf_common+0xd2>
 80053dc:	2000      	movs	r0, #0
 80053de:	e008      	b.n	80053f2 <_printf_common+0xb2>
 80053e0:	2301      	movs	r3, #1
 80053e2:	4652      	mov	r2, sl
 80053e4:	4649      	mov	r1, r9
 80053e6:	4638      	mov	r0, r7
 80053e8:	47c0      	blx	r8
 80053ea:	3001      	adds	r0, #1
 80053ec:	d103      	bne.n	80053f6 <_printf_common+0xb6>
 80053ee:	f04f 30ff 	mov.w	r0, #4294967295
 80053f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f6:	3501      	adds	r5, #1
 80053f8:	e7c1      	b.n	800537e <_printf_common+0x3e>
 80053fa:	2030      	movs	r0, #48	; 0x30
 80053fc:	18e1      	adds	r1, r4, r3
 80053fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005408:	4422      	add	r2, r4
 800540a:	3302      	adds	r3, #2
 800540c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005410:	e7c2      	b.n	8005398 <_printf_common+0x58>
 8005412:	2301      	movs	r3, #1
 8005414:	4622      	mov	r2, r4
 8005416:	4649      	mov	r1, r9
 8005418:	4638      	mov	r0, r7
 800541a:	47c0      	blx	r8
 800541c:	3001      	adds	r0, #1
 800541e:	d0e6      	beq.n	80053ee <_printf_common+0xae>
 8005420:	3601      	adds	r6, #1
 8005422:	e7d9      	b.n	80053d8 <_printf_common+0x98>

08005424 <_printf_i>:
 8005424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005428:	7e0f      	ldrb	r7, [r1, #24]
 800542a:	4691      	mov	r9, r2
 800542c:	2f78      	cmp	r7, #120	; 0x78
 800542e:	4680      	mov	r8, r0
 8005430:	460c      	mov	r4, r1
 8005432:	469a      	mov	sl, r3
 8005434:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800543a:	d807      	bhi.n	800544c <_printf_i+0x28>
 800543c:	2f62      	cmp	r7, #98	; 0x62
 800543e:	d80a      	bhi.n	8005456 <_printf_i+0x32>
 8005440:	2f00      	cmp	r7, #0
 8005442:	f000 80d5 	beq.w	80055f0 <_printf_i+0x1cc>
 8005446:	2f58      	cmp	r7, #88	; 0x58
 8005448:	f000 80c1 	beq.w	80055ce <_printf_i+0x1aa>
 800544c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005454:	e03a      	b.n	80054cc <_printf_i+0xa8>
 8005456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800545a:	2b15      	cmp	r3, #21
 800545c:	d8f6      	bhi.n	800544c <_printf_i+0x28>
 800545e:	a101      	add	r1, pc, #4	; (adr r1, 8005464 <_printf_i+0x40>)
 8005460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005464:	080054bd 	.word	0x080054bd
 8005468:	080054d1 	.word	0x080054d1
 800546c:	0800544d 	.word	0x0800544d
 8005470:	0800544d 	.word	0x0800544d
 8005474:	0800544d 	.word	0x0800544d
 8005478:	0800544d 	.word	0x0800544d
 800547c:	080054d1 	.word	0x080054d1
 8005480:	0800544d 	.word	0x0800544d
 8005484:	0800544d 	.word	0x0800544d
 8005488:	0800544d 	.word	0x0800544d
 800548c:	0800544d 	.word	0x0800544d
 8005490:	080055d7 	.word	0x080055d7
 8005494:	080054fd 	.word	0x080054fd
 8005498:	08005591 	.word	0x08005591
 800549c:	0800544d 	.word	0x0800544d
 80054a0:	0800544d 	.word	0x0800544d
 80054a4:	080055f9 	.word	0x080055f9
 80054a8:	0800544d 	.word	0x0800544d
 80054ac:	080054fd 	.word	0x080054fd
 80054b0:	0800544d 	.word	0x0800544d
 80054b4:	0800544d 	.word	0x0800544d
 80054b8:	08005599 	.word	0x08005599
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	1d1a      	adds	r2, r3, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	602a      	str	r2, [r5, #0]
 80054c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0a0      	b.n	8005612 <_printf_i+0x1ee>
 80054d0:	6820      	ldr	r0, [r4, #0]
 80054d2:	682b      	ldr	r3, [r5, #0]
 80054d4:	0607      	lsls	r7, r0, #24
 80054d6:	f103 0104 	add.w	r1, r3, #4
 80054da:	6029      	str	r1, [r5, #0]
 80054dc:	d501      	bpl.n	80054e2 <_printf_i+0xbe>
 80054de:	681e      	ldr	r6, [r3, #0]
 80054e0:	e003      	b.n	80054ea <_printf_i+0xc6>
 80054e2:	0646      	lsls	r6, r0, #25
 80054e4:	d5fb      	bpl.n	80054de <_printf_i+0xba>
 80054e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054ea:	2e00      	cmp	r6, #0
 80054ec:	da03      	bge.n	80054f6 <_printf_i+0xd2>
 80054ee:	232d      	movs	r3, #45	; 0x2d
 80054f0:	4276      	negs	r6, r6
 80054f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054f6:	230a      	movs	r3, #10
 80054f8:	4859      	ldr	r0, [pc, #356]	; (8005660 <_printf_i+0x23c>)
 80054fa:	e012      	b.n	8005522 <_printf_i+0xfe>
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	6820      	ldr	r0, [r4, #0]
 8005500:	1d19      	adds	r1, r3, #4
 8005502:	6029      	str	r1, [r5, #0]
 8005504:	0605      	lsls	r5, r0, #24
 8005506:	d501      	bpl.n	800550c <_printf_i+0xe8>
 8005508:	681e      	ldr	r6, [r3, #0]
 800550a:	e002      	b.n	8005512 <_printf_i+0xee>
 800550c:	0641      	lsls	r1, r0, #25
 800550e:	d5fb      	bpl.n	8005508 <_printf_i+0xe4>
 8005510:	881e      	ldrh	r6, [r3, #0]
 8005512:	2f6f      	cmp	r7, #111	; 0x6f
 8005514:	bf0c      	ite	eq
 8005516:	2308      	moveq	r3, #8
 8005518:	230a      	movne	r3, #10
 800551a:	4851      	ldr	r0, [pc, #324]	; (8005660 <_printf_i+0x23c>)
 800551c:	2100      	movs	r1, #0
 800551e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005522:	6865      	ldr	r5, [r4, #4]
 8005524:	2d00      	cmp	r5, #0
 8005526:	bfa8      	it	ge
 8005528:	6821      	ldrge	r1, [r4, #0]
 800552a:	60a5      	str	r5, [r4, #8]
 800552c:	bfa4      	itt	ge
 800552e:	f021 0104 	bicge.w	r1, r1, #4
 8005532:	6021      	strge	r1, [r4, #0]
 8005534:	b90e      	cbnz	r6, 800553a <_printf_i+0x116>
 8005536:	2d00      	cmp	r5, #0
 8005538:	d04b      	beq.n	80055d2 <_printf_i+0x1ae>
 800553a:	4615      	mov	r5, r2
 800553c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005540:	fb03 6711 	mls	r7, r3, r1, r6
 8005544:	5dc7      	ldrb	r7, [r0, r7]
 8005546:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800554a:	4637      	mov	r7, r6
 800554c:	42bb      	cmp	r3, r7
 800554e:	460e      	mov	r6, r1
 8005550:	d9f4      	bls.n	800553c <_printf_i+0x118>
 8005552:	2b08      	cmp	r3, #8
 8005554:	d10b      	bne.n	800556e <_printf_i+0x14a>
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	07de      	lsls	r6, r3, #31
 800555a:	d508      	bpl.n	800556e <_printf_i+0x14a>
 800555c:	6923      	ldr	r3, [r4, #16]
 800555e:	6861      	ldr	r1, [r4, #4]
 8005560:	4299      	cmp	r1, r3
 8005562:	bfde      	ittt	le
 8005564:	2330      	movle	r3, #48	; 0x30
 8005566:	f805 3c01 	strble.w	r3, [r5, #-1]
 800556a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800556e:	1b52      	subs	r2, r2, r5
 8005570:	6122      	str	r2, [r4, #16]
 8005572:	464b      	mov	r3, r9
 8005574:	4621      	mov	r1, r4
 8005576:	4640      	mov	r0, r8
 8005578:	f8cd a000 	str.w	sl, [sp]
 800557c:	aa03      	add	r2, sp, #12
 800557e:	f7ff fedf 	bl	8005340 <_printf_common>
 8005582:	3001      	adds	r0, #1
 8005584:	d14a      	bne.n	800561c <_printf_i+0x1f8>
 8005586:	f04f 30ff 	mov.w	r0, #4294967295
 800558a:	b004      	add	sp, #16
 800558c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	f043 0320 	orr.w	r3, r3, #32
 8005596:	6023      	str	r3, [r4, #0]
 8005598:	2778      	movs	r7, #120	; 0x78
 800559a:	4832      	ldr	r0, [pc, #200]	; (8005664 <_printf_i+0x240>)
 800559c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	6829      	ldr	r1, [r5, #0]
 80055a4:	061f      	lsls	r7, r3, #24
 80055a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80055aa:	d402      	bmi.n	80055b2 <_printf_i+0x18e>
 80055ac:	065f      	lsls	r7, r3, #25
 80055ae:	bf48      	it	mi
 80055b0:	b2b6      	uxthmi	r6, r6
 80055b2:	07df      	lsls	r7, r3, #31
 80055b4:	bf48      	it	mi
 80055b6:	f043 0320 	orrmi.w	r3, r3, #32
 80055ba:	6029      	str	r1, [r5, #0]
 80055bc:	bf48      	it	mi
 80055be:	6023      	strmi	r3, [r4, #0]
 80055c0:	b91e      	cbnz	r6, 80055ca <_printf_i+0x1a6>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	f023 0320 	bic.w	r3, r3, #32
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	2310      	movs	r3, #16
 80055cc:	e7a6      	b.n	800551c <_printf_i+0xf8>
 80055ce:	4824      	ldr	r0, [pc, #144]	; (8005660 <_printf_i+0x23c>)
 80055d0:	e7e4      	b.n	800559c <_printf_i+0x178>
 80055d2:	4615      	mov	r5, r2
 80055d4:	e7bd      	b.n	8005552 <_printf_i+0x12e>
 80055d6:	682b      	ldr	r3, [r5, #0]
 80055d8:	6826      	ldr	r6, [r4, #0]
 80055da:	1d18      	adds	r0, r3, #4
 80055dc:	6961      	ldr	r1, [r4, #20]
 80055de:	6028      	str	r0, [r5, #0]
 80055e0:	0635      	lsls	r5, r6, #24
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	d501      	bpl.n	80055ea <_printf_i+0x1c6>
 80055e6:	6019      	str	r1, [r3, #0]
 80055e8:	e002      	b.n	80055f0 <_printf_i+0x1cc>
 80055ea:	0670      	lsls	r0, r6, #25
 80055ec:	d5fb      	bpl.n	80055e6 <_printf_i+0x1c2>
 80055ee:	8019      	strh	r1, [r3, #0]
 80055f0:	2300      	movs	r3, #0
 80055f2:	4615      	mov	r5, r2
 80055f4:	6123      	str	r3, [r4, #16]
 80055f6:	e7bc      	b.n	8005572 <_printf_i+0x14e>
 80055f8:	682b      	ldr	r3, [r5, #0]
 80055fa:	2100      	movs	r1, #0
 80055fc:	1d1a      	adds	r2, r3, #4
 80055fe:	602a      	str	r2, [r5, #0]
 8005600:	681d      	ldr	r5, [r3, #0]
 8005602:	6862      	ldr	r2, [r4, #4]
 8005604:	4628      	mov	r0, r5
 8005606:	f000 f909 	bl	800581c <memchr>
 800560a:	b108      	cbz	r0, 8005610 <_printf_i+0x1ec>
 800560c:	1b40      	subs	r0, r0, r5
 800560e:	6060      	str	r0, [r4, #4]
 8005610:	6863      	ldr	r3, [r4, #4]
 8005612:	6123      	str	r3, [r4, #16]
 8005614:	2300      	movs	r3, #0
 8005616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800561a:	e7aa      	b.n	8005572 <_printf_i+0x14e>
 800561c:	462a      	mov	r2, r5
 800561e:	4649      	mov	r1, r9
 8005620:	4640      	mov	r0, r8
 8005622:	6923      	ldr	r3, [r4, #16]
 8005624:	47d0      	blx	sl
 8005626:	3001      	adds	r0, #1
 8005628:	d0ad      	beq.n	8005586 <_printf_i+0x162>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	079b      	lsls	r3, r3, #30
 800562e:	d413      	bmi.n	8005658 <_printf_i+0x234>
 8005630:	68e0      	ldr	r0, [r4, #12]
 8005632:	9b03      	ldr	r3, [sp, #12]
 8005634:	4298      	cmp	r0, r3
 8005636:	bfb8      	it	lt
 8005638:	4618      	movlt	r0, r3
 800563a:	e7a6      	b.n	800558a <_printf_i+0x166>
 800563c:	2301      	movs	r3, #1
 800563e:	4632      	mov	r2, r6
 8005640:	4649      	mov	r1, r9
 8005642:	4640      	mov	r0, r8
 8005644:	47d0      	blx	sl
 8005646:	3001      	adds	r0, #1
 8005648:	d09d      	beq.n	8005586 <_printf_i+0x162>
 800564a:	3501      	adds	r5, #1
 800564c:	68e3      	ldr	r3, [r4, #12]
 800564e:	9903      	ldr	r1, [sp, #12]
 8005650:	1a5b      	subs	r3, r3, r1
 8005652:	42ab      	cmp	r3, r5
 8005654:	dcf2      	bgt.n	800563c <_printf_i+0x218>
 8005656:	e7eb      	b.n	8005630 <_printf_i+0x20c>
 8005658:	2500      	movs	r5, #0
 800565a:	f104 0619 	add.w	r6, r4, #25
 800565e:	e7f5      	b.n	800564c <_printf_i+0x228>
 8005660:	08005a6a 	.word	0x08005a6a
 8005664:	08005a7b 	.word	0x08005a7b

08005668 <__swbuf_r>:
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566a:	460e      	mov	r6, r1
 800566c:	4614      	mov	r4, r2
 800566e:	4605      	mov	r5, r0
 8005670:	b118      	cbz	r0, 800567a <__swbuf_r+0x12>
 8005672:	6a03      	ldr	r3, [r0, #32]
 8005674:	b90b      	cbnz	r3, 800567a <__swbuf_r+0x12>
 8005676:	f7ff fa33 	bl	8004ae0 <__sinit>
 800567a:	69a3      	ldr	r3, [r4, #24]
 800567c:	60a3      	str	r3, [r4, #8]
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	071a      	lsls	r2, r3, #28
 8005682:	d525      	bpl.n	80056d0 <__swbuf_r+0x68>
 8005684:	6923      	ldr	r3, [r4, #16]
 8005686:	b31b      	cbz	r3, 80056d0 <__swbuf_r+0x68>
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	6922      	ldr	r2, [r4, #16]
 800568c:	b2f6      	uxtb	r6, r6
 800568e:	1a98      	subs	r0, r3, r2
 8005690:	6963      	ldr	r3, [r4, #20]
 8005692:	4637      	mov	r7, r6
 8005694:	4283      	cmp	r3, r0
 8005696:	dc04      	bgt.n	80056a2 <__swbuf_r+0x3a>
 8005698:	4621      	mov	r1, r4
 800569a:	4628      	mov	r0, r5
 800569c:	f7ff fcbe 	bl	800501c <_fflush_r>
 80056a0:	b9e0      	cbnz	r0, 80056dc <__swbuf_r+0x74>
 80056a2:	68a3      	ldr	r3, [r4, #8]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	60a3      	str	r3, [r4, #8]
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	6022      	str	r2, [r4, #0]
 80056ae:	701e      	strb	r6, [r3, #0]
 80056b0:	6962      	ldr	r2, [r4, #20]
 80056b2:	1c43      	adds	r3, r0, #1
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d004      	beq.n	80056c2 <__swbuf_r+0x5a>
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	07db      	lsls	r3, r3, #31
 80056bc:	d506      	bpl.n	80056cc <__swbuf_r+0x64>
 80056be:	2e0a      	cmp	r6, #10
 80056c0:	d104      	bne.n	80056cc <__swbuf_r+0x64>
 80056c2:	4621      	mov	r1, r4
 80056c4:	4628      	mov	r0, r5
 80056c6:	f7ff fca9 	bl	800501c <_fflush_r>
 80056ca:	b938      	cbnz	r0, 80056dc <__swbuf_r+0x74>
 80056cc:	4638      	mov	r0, r7
 80056ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d0:	4621      	mov	r1, r4
 80056d2:	4628      	mov	r0, r5
 80056d4:	f000 f806 	bl	80056e4 <__swsetup_r>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d0d5      	beq.n	8005688 <__swbuf_r+0x20>
 80056dc:	f04f 37ff 	mov.w	r7, #4294967295
 80056e0:	e7f4      	b.n	80056cc <__swbuf_r+0x64>
	...

080056e4 <__swsetup_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	4b2a      	ldr	r3, [pc, #168]	; (8005790 <__swsetup_r+0xac>)
 80056e8:	4605      	mov	r5, r0
 80056ea:	6818      	ldr	r0, [r3, #0]
 80056ec:	460c      	mov	r4, r1
 80056ee:	b118      	cbz	r0, 80056f8 <__swsetup_r+0x14>
 80056f0:	6a03      	ldr	r3, [r0, #32]
 80056f2:	b90b      	cbnz	r3, 80056f8 <__swsetup_r+0x14>
 80056f4:	f7ff f9f4 	bl	8004ae0 <__sinit>
 80056f8:	89a3      	ldrh	r3, [r4, #12]
 80056fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056fe:	0718      	lsls	r0, r3, #28
 8005700:	d422      	bmi.n	8005748 <__swsetup_r+0x64>
 8005702:	06d9      	lsls	r1, r3, #27
 8005704:	d407      	bmi.n	8005716 <__swsetup_r+0x32>
 8005706:	2309      	movs	r3, #9
 8005708:	602b      	str	r3, [r5, #0]
 800570a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800570e:	f04f 30ff 	mov.w	r0, #4294967295
 8005712:	81a3      	strh	r3, [r4, #12]
 8005714:	e034      	b.n	8005780 <__swsetup_r+0x9c>
 8005716:	0758      	lsls	r0, r3, #29
 8005718:	d512      	bpl.n	8005740 <__swsetup_r+0x5c>
 800571a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800571c:	b141      	cbz	r1, 8005730 <__swsetup_r+0x4c>
 800571e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005722:	4299      	cmp	r1, r3
 8005724:	d002      	beq.n	800572c <__swsetup_r+0x48>
 8005726:	4628      	mov	r0, r5
 8005728:	f7ff fafa 	bl	8004d20 <_free_r>
 800572c:	2300      	movs	r3, #0
 800572e:	6363      	str	r3, [r4, #52]	; 0x34
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005736:	81a3      	strh	r3, [r4, #12]
 8005738:	2300      	movs	r3, #0
 800573a:	6063      	str	r3, [r4, #4]
 800573c:	6923      	ldr	r3, [r4, #16]
 800573e:	6023      	str	r3, [r4, #0]
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	f043 0308 	orr.w	r3, r3, #8
 8005746:	81a3      	strh	r3, [r4, #12]
 8005748:	6923      	ldr	r3, [r4, #16]
 800574a:	b94b      	cbnz	r3, 8005760 <__swsetup_r+0x7c>
 800574c:	89a3      	ldrh	r3, [r4, #12]
 800574e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005756:	d003      	beq.n	8005760 <__swsetup_r+0x7c>
 8005758:	4621      	mov	r1, r4
 800575a:	4628      	mov	r0, r5
 800575c:	f000 f891 	bl	8005882 <__smakebuf_r>
 8005760:	89a0      	ldrh	r0, [r4, #12]
 8005762:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005766:	f010 0301 	ands.w	r3, r0, #1
 800576a:	d00a      	beq.n	8005782 <__swsetup_r+0x9e>
 800576c:	2300      	movs	r3, #0
 800576e:	60a3      	str	r3, [r4, #8]
 8005770:	6963      	ldr	r3, [r4, #20]
 8005772:	425b      	negs	r3, r3
 8005774:	61a3      	str	r3, [r4, #24]
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	b943      	cbnz	r3, 800578c <__swsetup_r+0xa8>
 800577a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800577e:	d1c4      	bne.n	800570a <__swsetup_r+0x26>
 8005780:	bd38      	pop	{r3, r4, r5, pc}
 8005782:	0781      	lsls	r1, r0, #30
 8005784:	bf58      	it	pl
 8005786:	6963      	ldrpl	r3, [r4, #20]
 8005788:	60a3      	str	r3, [r4, #8]
 800578a:	e7f4      	b.n	8005776 <__swsetup_r+0x92>
 800578c:	2000      	movs	r0, #0
 800578e:	e7f7      	b.n	8005780 <__swsetup_r+0x9c>
 8005790:	2000006c 	.word	0x2000006c

08005794 <_raise_r>:
 8005794:	291f      	cmp	r1, #31
 8005796:	b538      	push	{r3, r4, r5, lr}
 8005798:	4604      	mov	r4, r0
 800579a:	460d      	mov	r5, r1
 800579c:	d904      	bls.n	80057a8 <_raise_r+0x14>
 800579e:	2316      	movs	r3, #22
 80057a0:	6003      	str	r3, [r0, #0]
 80057a2:	f04f 30ff 	mov.w	r0, #4294967295
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80057aa:	b112      	cbz	r2, 80057b2 <_raise_r+0x1e>
 80057ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057b0:	b94b      	cbnz	r3, 80057c6 <_raise_r+0x32>
 80057b2:	4620      	mov	r0, r4
 80057b4:	f000 f830 	bl	8005818 <_getpid_r>
 80057b8:	462a      	mov	r2, r5
 80057ba:	4601      	mov	r1, r0
 80057bc:	4620      	mov	r0, r4
 80057be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057c2:	f000 b817 	b.w	80057f4 <_kill_r>
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d00a      	beq.n	80057e0 <_raise_r+0x4c>
 80057ca:	1c59      	adds	r1, r3, #1
 80057cc:	d103      	bne.n	80057d6 <_raise_r+0x42>
 80057ce:	2316      	movs	r3, #22
 80057d0:	6003      	str	r3, [r0, #0]
 80057d2:	2001      	movs	r0, #1
 80057d4:	e7e7      	b.n	80057a6 <_raise_r+0x12>
 80057d6:	2400      	movs	r4, #0
 80057d8:	4628      	mov	r0, r5
 80057da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80057de:	4798      	blx	r3
 80057e0:	2000      	movs	r0, #0
 80057e2:	e7e0      	b.n	80057a6 <_raise_r+0x12>

080057e4 <raise>:
 80057e4:	4b02      	ldr	r3, [pc, #8]	; (80057f0 <raise+0xc>)
 80057e6:	4601      	mov	r1, r0
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	f7ff bfd3 	b.w	8005794 <_raise_r>
 80057ee:	bf00      	nop
 80057f0:	2000006c 	.word	0x2000006c

080057f4 <_kill_r>:
 80057f4:	b538      	push	{r3, r4, r5, lr}
 80057f6:	2300      	movs	r3, #0
 80057f8:	4d06      	ldr	r5, [pc, #24]	; (8005814 <_kill_r+0x20>)
 80057fa:	4604      	mov	r4, r0
 80057fc:	4608      	mov	r0, r1
 80057fe:	4611      	mov	r1, r2
 8005800:	602b      	str	r3, [r5, #0]
 8005802:	f7fa fee4 	bl	80005ce <_kill>
 8005806:	1c43      	adds	r3, r0, #1
 8005808:	d102      	bne.n	8005810 <_kill_r+0x1c>
 800580a:	682b      	ldr	r3, [r5, #0]
 800580c:	b103      	cbz	r3, 8005810 <_kill_r+0x1c>
 800580e:	6023      	str	r3, [r4, #0]
 8005810:	bd38      	pop	{r3, r4, r5, pc}
 8005812:	bf00      	nop
 8005814:	20004010 	.word	0x20004010

08005818 <_getpid_r>:
 8005818:	f7fa bed2 	b.w	80005c0 <_getpid>

0800581c <memchr>:
 800581c:	4603      	mov	r3, r0
 800581e:	b510      	push	{r4, lr}
 8005820:	b2c9      	uxtb	r1, r1
 8005822:	4402      	add	r2, r0
 8005824:	4293      	cmp	r3, r2
 8005826:	4618      	mov	r0, r3
 8005828:	d101      	bne.n	800582e <memchr+0x12>
 800582a:	2000      	movs	r0, #0
 800582c:	e003      	b.n	8005836 <memchr+0x1a>
 800582e:	7804      	ldrb	r4, [r0, #0]
 8005830:	3301      	adds	r3, #1
 8005832:	428c      	cmp	r4, r1
 8005834:	d1f6      	bne.n	8005824 <memchr+0x8>
 8005836:	bd10      	pop	{r4, pc}

08005838 <__swhatbuf_r>:
 8005838:	b570      	push	{r4, r5, r6, lr}
 800583a:	460c      	mov	r4, r1
 800583c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005840:	4615      	mov	r5, r2
 8005842:	2900      	cmp	r1, #0
 8005844:	461e      	mov	r6, r3
 8005846:	b096      	sub	sp, #88	; 0x58
 8005848:	da0c      	bge.n	8005864 <__swhatbuf_r+0x2c>
 800584a:	89a3      	ldrh	r3, [r4, #12]
 800584c:	2100      	movs	r1, #0
 800584e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005852:	bf0c      	ite	eq
 8005854:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005858:	2340      	movne	r3, #64	; 0x40
 800585a:	2000      	movs	r0, #0
 800585c:	6031      	str	r1, [r6, #0]
 800585e:	602b      	str	r3, [r5, #0]
 8005860:	b016      	add	sp, #88	; 0x58
 8005862:	bd70      	pop	{r4, r5, r6, pc}
 8005864:	466a      	mov	r2, sp
 8005866:	f000 f849 	bl	80058fc <_fstat_r>
 800586a:	2800      	cmp	r0, #0
 800586c:	dbed      	blt.n	800584a <__swhatbuf_r+0x12>
 800586e:	9901      	ldr	r1, [sp, #4]
 8005870:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005874:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005878:	4259      	negs	r1, r3
 800587a:	4159      	adcs	r1, r3
 800587c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005880:	e7eb      	b.n	800585a <__swhatbuf_r+0x22>

08005882 <__smakebuf_r>:
 8005882:	898b      	ldrh	r3, [r1, #12]
 8005884:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005886:	079d      	lsls	r5, r3, #30
 8005888:	4606      	mov	r6, r0
 800588a:	460c      	mov	r4, r1
 800588c:	d507      	bpl.n	800589e <__smakebuf_r+0x1c>
 800588e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005892:	6023      	str	r3, [r4, #0]
 8005894:	6123      	str	r3, [r4, #16]
 8005896:	2301      	movs	r3, #1
 8005898:	6163      	str	r3, [r4, #20]
 800589a:	b002      	add	sp, #8
 800589c:	bd70      	pop	{r4, r5, r6, pc}
 800589e:	466a      	mov	r2, sp
 80058a0:	ab01      	add	r3, sp, #4
 80058a2:	f7ff ffc9 	bl	8005838 <__swhatbuf_r>
 80058a6:	9900      	ldr	r1, [sp, #0]
 80058a8:	4605      	mov	r5, r0
 80058aa:	4630      	mov	r0, r6
 80058ac:	f7ff faa8 	bl	8004e00 <_malloc_r>
 80058b0:	b948      	cbnz	r0, 80058c6 <__smakebuf_r+0x44>
 80058b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058b6:	059a      	lsls	r2, r3, #22
 80058b8:	d4ef      	bmi.n	800589a <__smakebuf_r+0x18>
 80058ba:	f023 0303 	bic.w	r3, r3, #3
 80058be:	f043 0302 	orr.w	r3, r3, #2
 80058c2:	81a3      	strh	r3, [r4, #12]
 80058c4:	e7e3      	b.n	800588e <__smakebuf_r+0xc>
 80058c6:	89a3      	ldrh	r3, [r4, #12]
 80058c8:	6020      	str	r0, [r4, #0]
 80058ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ce:	81a3      	strh	r3, [r4, #12]
 80058d0:	9b00      	ldr	r3, [sp, #0]
 80058d2:	6120      	str	r0, [r4, #16]
 80058d4:	6163      	str	r3, [r4, #20]
 80058d6:	9b01      	ldr	r3, [sp, #4]
 80058d8:	b15b      	cbz	r3, 80058f2 <__smakebuf_r+0x70>
 80058da:	4630      	mov	r0, r6
 80058dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058e0:	f000 f81e 	bl	8005920 <_isatty_r>
 80058e4:	b128      	cbz	r0, 80058f2 <__smakebuf_r+0x70>
 80058e6:	89a3      	ldrh	r3, [r4, #12]
 80058e8:	f023 0303 	bic.w	r3, r3, #3
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	81a3      	strh	r3, [r4, #12]
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	431d      	orrs	r5, r3
 80058f6:	81a5      	strh	r5, [r4, #12]
 80058f8:	e7cf      	b.n	800589a <__smakebuf_r+0x18>
	...

080058fc <_fstat_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	2300      	movs	r3, #0
 8005900:	4d06      	ldr	r5, [pc, #24]	; (800591c <_fstat_r+0x20>)
 8005902:	4604      	mov	r4, r0
 8005904:	4608      	mov	r0, r1
 8005906:	4611      	mov	r1, r2
 8005908:	602b      	str	r3, [r5, #0]
 800590a:	f7fa febe 	bl	800068a <_fstat>
 800590e:	1c43      	adds	r3, r0, #1
 8005910:	d102      	bne.n	8005918 <_fstat_r+0x1c>
 8005912:	682b      	ldr	r3, [r5, #0]
 8005914:	b103      	cbz	r3, 8005918 <_fstat_r+0x1c>
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	bd38      	pop	{r3, r4, r5, pc}
 800591a:	bf00      	nop
 800591c:	20004010 	.word	0x20004010

08005920 <_isatty_r>:
 8005920:	b538      	push	{r3, r4, r5, lr}
 8005922:	2300      	movs	r3, #0
 8005924:	4d05      	ldr	r5, [pc, #20]	; (800593c <_isatty_r+0x1c>)
 8005926:	4604      	mov	r4, r0
 8005928:	4608      	mov	r0, r1
 800592a:	602b      	str	r3, [r5, #0]
 800592c:	f7fa febc 	bl	80006a8 <_isatty>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	d102      	bne.n	800593a <_isatty_r+0x1a>
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	b103      	cbz	r3, 800593a <_isatty_r+0x1a>
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	bd38      	pop	{r3, r4, r5, pc}
 800593c:	20004010 	.word	0x20004010

08005940 <_init>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	bf00      	nop
 8005944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005946:	bc08      	pop	{r3}
 8005948:	469e      	mov	lr, r3
 800594a:	4770      	bx	lr

0800594c <_fini>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	bf00      	nop
 8005950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005952:	bc08      	pop	{r3}
 8005954:	469e      	mov	lr, r3
 8005956:	4770      	bx	lr
