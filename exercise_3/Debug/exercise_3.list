
exercise_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002900  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002a10  08002a10  00012a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a54  08002a54  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002a54  08002a54  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a54  08002a54  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a54  08002a54  00012a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a58  08002a58  00012a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002980  20000010  08002a6c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002990  08002a6c  00022990  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c31d  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f08  00000000  00000000  0002c399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00006bda  00000000  00000000  0002e2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c58  00000000  00000000  00034e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000b60  00000000  00000000  00035ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017a3b  00000000  00000000  00036638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d9b3  00000000  00000000  0004e073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008ee98  00000000  00000000  0005ba26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003244  00000000  00000000  000ea8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080029f8 	.word	0x080029f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080029f8 	.word	0x080029f8

08000150 <Task_1_Handler>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
void Task_1_Handler(void * parameters)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000158:	2101      	movs	r1, #1
 800015a:	4805      	ldr	r0, [pc, #20]	; (8000170 <Task_1_Handler+0x20>)
 800015c:	f000 fcb6 	bl	8000acc <HAL_GPIO_TogglePin>
		vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS(500) );
 8000160:	f107 030c 	add.w	r3, r7, #12
 8000164:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000168:	4618      	mov	r0, r3
 800016a:	f001 fd35 	bl	8001bd8 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800016e:	e7f3      	b.n	8000158 <Task_1_Handler+0x8>
 8000170:	40010800 	.word	0x40010800

08000174 <Task_2_Handler>:
	}
}


void Task_2_Handler(void * parameters)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800017c:	2102      	movs	r1, #2
 800017e:	4804      	ldr	r0, [pc, #16]	; (8000190 <Task_2_Handler+0x1c>)
 8000180:	f000 fca4 	bl	8000acc <HAL_GPIO_TogglePin>
		vTaskDelay( pdMS_TO_TICKS(500));
 8000184:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000188:	f001 fda4 	bl	8001cd4 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800018c:	e7f6      	b.n	800017c <Task_2_Handler+0x8>
 800018e:	bf00      	nop
 8000190:	40010800 	.word	0x40010800

08000194 <Task_3_Handler>:
	}
}


void Task_3_Handler(void * parameters)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 800019c:	2104      	movs	r1, #4
 800019e:	4804      	ldr	r0, [pc, #16]	; (80001b0 <Task_3_Handler+0x1c>)
 80001a0:	f000 fc94 	bl	8000acc <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80001a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001a8:	f000 f9f0 	bl	800058c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80001ac:	e7f6      	b.n	800019c <Task_3_Handler+0x8>
 80001ae:	bf00      	nop
 80001b0:	40010800 	.word	0x40010800

080001b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b088      	sub	sp, #32
 80001b8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	TaskHandle_t Task_1_handle =NULL, Task_2_handle= NULL, Task_3_handle =NULL;
 80001ba:	2300      	movs	r3, #0
 80001bc:	60bb      	str	r3, [r7, #8]
 80001be:	2300      	movs	r3, #0
 80001c0:	607b      	str	r3, [r7, #4]
 80001c2:	2300      	movs	r3, #0
 80001c4:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c6:	f000 f9af 	bl	8000528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ca:	f000 f831 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ce:	f000 f86b 	bl	80002a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  Task1_return = xTaskCreate( Task_1_Handler, "Task_1", 100, NULL, 1, &Task_1_handle );
 80001d2:	f107 0308 	add.w	r3, r7, #8
 80001d6:	9301      	str	r3, [sp, #4]
 80001d8:	2301      	movs	r3, #1
 80001da:	9300      	str	r3, [sp, #0]
 80001dc:	2300      	movs	r3, #0
 80001de:	2264      	movs	r2, #100	; 0x64
 80001e0:	490d      	ldr	r1, [pc, #52]	; (8000218 <main+0x64>)
 80001e2:	480e      	ldr	r0, [pc, #56]	; (800021c <main+0x68>)
 80001e4:	f001 fb8e 	bl	8001904 <xTaskCreate>
 80001e8:	6178      	str	r0, [r7, #20]
  Task2_return = xTaskCreate( Task_2_Handler, "Task_2", 100, NULL, 2, &Task_2_handle );
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	9301      	str	r3, [sp, #4]
 80001ee:	2302      	movs	r3, #2
 80001f0:	9300      	str	r3, [sp, #0]
 80001f2:	2300      	movs	r3, #0
 80001f4:	2264      	movs	r2, #100	; 0x64
 80001f6:	490a      	ldr	r1, [pc, #40]	; (8000220 <main+0x6c>)
 80001f8:	480a      	ldr	r0, [pc, #40]	; (8000224 <main+0x70>)
 80001fa:	f001 fb83 	bl	8001904 <xTaskCreate>
 80001fe:	6138      	str	r0, [r7, #16]
  Task3_return = xTaskCreate( Task_3_Handler, "Task_3", 100, NULL, 3, &Task_3_handle );
 8000200:	463b      	mov	r3, r7
 8000202:	9301      	str	r3, [sp, #4]
 8000204:	2303      	movs	r3, #3
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2300      	movs	r3, #0
 800020a:	2264      	movs	r2, #100	; 0x64
 800020c:	4906      	ldr	r1, [pc, #24]	; (8000228 <main+0x74>)
 800020e:	4807      	ldr	r0, [pc, #28]	; (800022c <main+0x78>)
 8000210:	f001 fb78 	bl	8001904 <xTaskCreate>
 8000214:	60f8      	str	r0, [r7, #12]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000216:	e7fe      	b.n	8000216 <main+0x62>
 8000218:	08002a10 	.word	0x08002a10
 800021c:	08000151 	.word	0x08000151
 8000220:	08002a18 	.word	0x08002a18
 8000224:	08000175 	.word	0x08000175
 8000228:	08002a20 	.word	0x08002a20
 800022c:	08000195 	.word	0x08000195

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b090      	sub	sp, #64	; 0x40
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fbae 	bl	80029a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000252:	2302      	movs	r3, #2
 8000254:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025a:	2310      	movs	r3, #16
 800025c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025e:	2300      	movs	r3, #0
 8000260:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fc4a 	bl	8000b00 <HAL_RCC_OscConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000272:	f000 f85a 	bl	800032a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f000 feb8 	bl	8001004 <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800029a:	f000 f846 	bl	800032a <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3740      	adds	r7, #64	; 0x40
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ae:	f107 0308 	add.w	r3, r7, #8
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002bc:	4b11      	ldr	r3, [pc, #68]	; (8000304 <MX_GPIO_Init+0x5c>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a10      	ldr	r2, [pc, #64]	; (8000304 <MX_GPIO_Init+0x5c>)
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <MX_GPIO_Init+0x5c>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0304 	and.w	r3, r3, #4
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2107      	movs	r1, #7
 80002d8:	480b      	ldr	r0, [pc, #44]	; (8000308 <MX_GPIO_Init+0x60>)
 80002da:	f000 fbdf 	bl	8000a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80002de:	2307      	movs	r3, #7
 80002e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e2:	2301      	movs	r3, #1
 80002e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e6:	2300      	movs	r3, #0
 80002e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ea:	2302      	movs	r3, #2
 80002ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ee:	f107 0308 	add.w	r3, r7, #8
 80002f2:	4619      	mov	r1, r3
 80002f4:	4804      	ldr	r0, [pc, #16]	; (8000308 <MX_GPIO_Init+0x60>)
 80002f6:	f000 fa4d 	bl	8000794 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002fa:	bf00      	nop
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000
 8000308:	40010800 	.word	0x40010800

0800030c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800031c:	d101      	bne.n	8000322 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800031e:	f000 f919 	bl	8000554 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000322:	bf00      	nop
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800032e:	b672      	cpsid	i
}
 8000330:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000332:	e7fe      	b.n	8000332 <Error_Handler+0x8>

08000334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <HAL_MspInit+0x5c>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	4a14      	ldr	r2, [pc, #80]	; (8000390 <HAL_MspInit+0x5c>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6193      	str	r3, [r2, #24]
 8000346:	4b12      	ldr	r3, [pc, #72]	; (8000390 <HAL_MspInit+0x5c>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
 8000350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <HAL_MspInit+0x5c>)
 8000354:	69db      	ldr	r3, [r3, #28]
 8000356:	4a0e      	ldr	r2, [pc, #56]	; (8000390 <HAL_MspInit+0x5c>)
 8000358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800035c:	61d3      	str	r3, [r2, #28]
 800035e:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <HAL_MspInit+0x5c>)
 8000360:	69db      	ldr	r3, [r3, #28]
 8000362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <HAL_MspInit+0x60>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <HAL_MspInit+0x60>)
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000386:	bf00      	nop
 8000388:	3714      	adds	r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	40021000 	.word	0x40021000
 8000394:	40010000 	.word	0x40010000

08000398 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b08e      	sub	sp, #56	; 0x38
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80003a0:	2300      	movs	r3, #0
 80003a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80003a4:	2300      	movs	r3, #0
 80003a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80003a8:	2300      	movs	r3, #0
 80003aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80003ae:	4b34      	ldr	r3, [pc, #208]	; (8000480 <HAL_InitTick+0xe8>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	4a33      	ldr	r2, [pc, #204]	; (8000480 <HAL_InitTick+0xe8>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	61d3      	str	r3, [r2, #28]
 80003ba:	4b31      	ldr	r3, [pc, #196]	; (8000480 <HAL_InitTick+0xe8>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003c6:	f107 0210 	add.w	r2, r7, #16
 80003ca:	f107 0314 	add.w	r3, r7, #20
 80003ce:	4611      	mov	r1, r2
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 ff73 	bl	80012bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80003d6:	6a3b      	ldr	r3, [r7, #32]
 80003d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80003da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d103      	bne.n	80003e8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80003e0:	f000 ff58 	bl	8001294 <HAL_RCC_GetPCLK1Freq>
 80003e4:	6378      	str	r0, [r7, #52]	; 0x34
 80003e6:	e004      	b.n	80003f2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80003e8:	f000 ff54 	bl	8001294 <HAL_RCC_GetPCLK1Freq>
 80003ec:	4603      	mov	r3, r0
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80003f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003f4:	4a23      	ldr	r2, [pc, #140]	; (8000484 <HAL_InitTick+0xec>)
 80003f6:	fba2 2303 	umull	r2, r3, r2, r3
 80003fa:	0c9b      	lsrs	r3, r3, #18
 80003fc:	3b01      	subs	r3, #1
 80003fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <HAL_InitTick+0xf0>)
 8000402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000406:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000408:	4b1f      	ldr	r3, [pc, #124]	; (8000488 <HAL_InitTick+0xf0>)
 800040a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800040e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000410:	4a1d      	ldr	r2, [pc, #116]	; (8000488 <HAL_InitTick+0xf0>)
 8000412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000414:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000416:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <HAL_InitTick+0xf0>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041c:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <HAL_InitTick+0xf0>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000422:	4b19      	ldr	r3, [pc, #100]	; (8000488 <HAL_InitTick+0xf0>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000428:	4817      	ldr	r0, [pc, #92]	; (8000488 <HAL_InitTick+0xf0>)
 800042a:	f000 ff95 	bl	8001358 <HAL_TIM_Base_Init>
 800042e:	4603      	mov	r3, r0
 8000430:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000434:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000438:	2b00      	cmp	r3, #0
 800043a:	d11b      	bne.n	8000474 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800043c:	4812      	ldr	r0, [pc, #72]	; (8000488 <HAL_InitTick+0xf0>)
 800043e:	f000 ffe3 	bl	8001408 <HAL_TIM_Base_Start_IT>
 8000442:	4603      	mov	r3, r0
 8000444:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000448:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800044c:	2b00      	cmp	r3, #0
 800044e:	d111      	bne.n	8000474 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000450:	201c      	movs	r0, #28
 8000452:	f000 f990 	bl	8000776 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2b0f      	cmp	r3, #15
 800045a:	d808      	bhi.n	800046e <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800045c:	2200      	movs	r2, #0
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	201c      	movs	r0, #28
 8000462:	f000 f96c 	bl	800073e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000466:	4a09      	ldr	r2, [pc, #36]	; (800048c <HAL_InitTick+0xf4>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	6013      	str	r3, [r2, #0]
 800046c:	e002      	b.n	8000474 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800046e:	2301      	movs	r3, #1
 8000470:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000474:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000478:	4618      	mov	r0, r3
 800047a:	3738      	adds	r7, #56	; 0x38
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40021000 	.word	0x40021000
 8000484:	431bde83 	.word	0x431bde83
 8000488:	2000002c 	.word	0x2000002c
 800048c:	20000004 	.word	0x20000004

08000490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000494:	e7fe      	b.n	8000494 <NMI_Handler+0x4>

08000496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800049a:	e7fe      	b.n	800049a <HardFault_Handler+0x4>

0800049c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <MemManage_Handler+0x4>

080004a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <BusFault_Handler+0x4>

080004a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <UsageFault_Handler+0x4>

080004ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
	...

080004bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <TIM2_IRQHandler+0x10>)
 80004c2:	f000 fff3 	bl	80014ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	2000002c 	.word	0x2000002c

080004d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004dc:	f7ff fff8 	bl	80004d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e0:	480b      	ldr	r0, [pc, #44]	; (8000510 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004e2:	490c      	ldr	r1, [pc, #48]	; (8000514 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004e4:	4a0c      	ldr	r2, [pc, #48]	; (8000518 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a09      	ldr	r2, [pc, #36]	; (800051c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004f8:	4c09      	ldr	r4, [pc, #36]	; (8000520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000506:	f002 fa53 	bl	80029b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050a:	f7ff fe53 	bl	80001b4 <main>
  bx lr
 800050e:	4770      	bx	lr
  ldr r0, =_sdata
 8000510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000514:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000518:	08002a5c 	.word	0x08002a5c
  ldr r2, =_sbss
 800051c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000520:	20002990 	.word	0x20002990

08000524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000524:	e7fe      	b.n	8000524 <ADC1_2_IRQHandler>
	...

08000528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_Init+0x28>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <HAL_Init+0x28>)
 8000532:	f043 0310 	orr.w	r3, r3, #16
 8000536:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000538:	2003      	movs	r0, #3
 800053a:	f000 f8f5 	bl	8000728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800053e:	200f      	movs	r0, #15
 8000540:	f7ff ff2a 	bl	8000398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000544:	f7ff fef6 	bl	8000334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000548:	2300      	movs	r3, #0
}
 800054a:	4618      	mov	r0, r3
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40022000 	.word	0x40022000

08000554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <HAL_IncTick+0x1c>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <HAL_IncTick+0x20>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4413      	add	r3, r2
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <HAL_IncTick+0x20>)
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	20000008 	.word	0x20000008
 8000574:	20000074 	.word	0x20000074

08000578 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  return uwTick;
 800057c:	4b02      	ldr	r3, [pc, #8]	; (8000588 <HAL_GetTick+0x10>)
 800057e:	681b      	ldr	r3, [r3, #0]
}
 8000580:	4618      	mov	r0, r3
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	20000074 	.word	0x20000074

0800058c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000594:	f7ff fff0 	bl	8000578 <HAL_GetTick>
 8000598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005a4:	d005      	beq.n	80005b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <HAL_Delay+0x44>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	461a      	mov	r2, r3
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4413      	add	r3, r2
 80005b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005b2:	bf00      	nop
 80005b4:	f7ff ffe0 	bl	8000578 <HAL_GetTick>
 80005b8:	4602      	mov	r2, r0
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d8f7      	bhi.n	80005b4 <HAL_Delay+0x28>
  {
  }
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000008 	.word	0x20000008

080005d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f003 0307 	and.w	r3, r3, #7
 80005e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <__NVIC_SetPriorityGrouping+0x44>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f0:	4013      	ands	r3, r2
 80005f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000606:	4a04      	ldr	r2, [pc, #16]	; (8000618 <__NVIC_SetPriorityGrouping+0x44>)
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	60d3      	str	r3, [r2, #12]
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <__NVIC_GetPriorityGrouping+0x18>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	f003 0307 	and.w	r3, r3, #7
}
 800062a:	4618      	mov	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	2b00      	cmp	r3, #0
 8000648:	db0b      	blt.n	8000662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	f003 021f 	and.w	r2, r3, #31
 8000650:	4906      	ldr	r1, [pc, #24]	; (800066c <__NVIC_EnableIRQ+0x34>)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	095b      	lsrs	r3, r3, #5
 8000658:	2001      	movs	r0, #1
 800065a:	fa00 f202 	lsl.w	r2, r0, r2
 800065e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	e000e100 	.word	0xe000e100

08000670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000680:	2b00      	cmp	r3, #0
 8000682:	db0a      	blt.n	800069a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	b2da      	uxtb	r2, r3
 8000688:	490c      	ldr	r1, [pc, #48]	; (80006bc <__NVIC_SetPriority+0x4c>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	0112      	lsls	r2, r2, #4
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	440b      	add	r3, r1
 8000694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000698:	e00a      	b.n	80006b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4908      	ldr	r1, [pc, #32]	; (80006c0 <__NVIC_SetPriority+0x50>)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f003 030f 	and.w	r3, r3, #15
 80006a6:	3b04      	subs	r3, #4
 80006a8:	0112      	lsls	r2, r2, #4
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	440b      	add	r3, r1
 80006ae:	761a      	strb	r2, [r3, #24]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000e100 	.word	0xe000e100
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b089      	sub	sp, #36	; 0x24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	f1c3 0307 	rsb	r3, r3, #7
 80006de:	2b04      	cmp	r3, #4
 80006e0:	bf28      	it	cs
 80006e2:	2304      	movcs	r3, #4
 80006e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3304      	adds	r3, #4
 80006ea:	2b06      	cmp	r3, #6
 80006ec:	d902      	bls.n	80006f4 <NVIC_EncodePriority+0x30>
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3b03      	subs	r3, #3
 80006f2:	e000      	b.n	80006f6 <NVIC_EncodePriority+0x32>
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	f04f 32ff 	mov.w	r2, #4294967295
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	43da      	mvns	r2, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	401a      	ands	r2, r3
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800070c:	f04f 31ff 	mov.w	r1, #4294967295
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43d9      	mvns	r1, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	4313      	orrs	r3, r2
         );
}
 800071e:	4618      	mov	r0, r3
 8000720:	3724      	adds	r7, #36	; 0x24
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ff4f 	bl	80005d4 <__NVIC_SetPriorityGrouping>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800073e:	b580      	push	{r7, lr}
 8000740:	b086      	sub	sp, #24
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
 800074a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000750:	f7ff ff64 	bl	800061c <__NVIC_GetPriorityGrouping>
 8000754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	6978      	ldr	r0, [r7, #20]
 800075c:	f7ff ffb2 	bl	80006c4 <NVIC_EncodePriority>
 8000760:	4602      	mov	r2, r0
 8000762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000766:	4611      	mov	r1, r2
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff81 	bl	8000670 <__NVIC_SetPriority>
}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	4603      	mov	r3, r0
 800077e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff57 	bl	8000638 <__NVIC_EnableIRQ>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000794:	b480      	push	{r7}
 8000796:	b08b      	sub	sp, #44	; 0x2c
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007a6:	e169      	b.n	8000a7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007a8:	2201      	movs	r2, #1
 80007aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	69fa      	ldr	r2, [r7, #28]
 80007b8:	4013      	ands	r3, r2
 80007ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007bc:	69ba      	ldr	r2, [r7, #24]
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	f040 8158 	bne.w	8000a76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	4a9a      	ldr	r2, [pc, #616]	; (8000a34 <HAL_GPIO_Init+0x2a0>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d05e      	beq.n	800088e <HAL_GPIO_Init+0xfa>
 80007d0:	4a98      	ldr	r2, [pc, #608]	; (8000a34 <HAL_GPIO_Init+0x2a0>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d875      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 80007d6:	4a98      	ldr	r2, [pc, #608]	; (8000a38 <HAL_GPIO_Init+0x2a4>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d058      	beq.n	800088e <HAL_GPIO_Init+0xfa>
 80007dc:	4a96      	ldr	r2, [pc, #600]	; (8000a38 <HAL_GPIO_Init+0x2a4>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d86f      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 80007e2:	4a96      	ldr	r2, [pc, #600]	; (8000a3c <HAL_GPIO_Init+0x2a8>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d052      	beq.n	800088e <HAL_GPIO_Init+0xfa>
 80007e8:	4a94      	ldr	r2, [pc, #592]	; (8000a3c <HAL_GPIO_Init+0x2a8>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d869      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 80007ee:	4a94      	ldr	r2, [pc, #592]	; (8000a40 <HAL_GPIO_Init+0x2ac>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d04c      	beq.n	800088e <HAL_GPIO_Init+0xfa>
 80007f4:	4a92      	ldr	r2, [pc, #584]	; (8000a40 <HAL_GPIO_Init+0x2ac>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d863      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 80007fa:	4a92      	ldr	r2, [pc, #584]	; (8000a44 <HAL_GPIO_Init+0x2b0>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d046      	beq.n	800088e <HAL_GPIO_Init+0xfa>
 8000800:	4a90      	ldr	r2, [pc, #576]	; (8000a44 <HAL_GPIO_Init+0x2b0>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d85d      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 8000806:	2b12      	cmp	r3, #18
 8000808:	d82a      	bhi.n	8000860 <HAL_GPIO_Init+0xcc>
 800080a:	2b12      	cmp	r3, #18
 800080c:	d859      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 800080e:	a201      	add	r2, pc, #4	; (adr r2, 8000814 <HAL_GPIO_Init+0x80>)
 8000810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000814:	0800088f 	.word	0x0800088f
 8000818:	08000869 	.word	0x08000869
 800081c:	0800087b 	.word	0x0800087b
 8000820:	080008bd 	.word	0x080008bd
 8000824:	080008c3 	.word	0x080008c3
 8000828:	080008c3 	.word	0x080008c3
 800082c:	080008c3 	.word	0x080008c3
 8000830:	080008c3 	.word	0x080008c3
 8000834:	080008c3 	.word	0x080008c3
 8000838:	080008c3 	.word	0x080008c3
 800083c:	080008c3 	.word	0x080008c3
 8000840:	080008c3 	.word	0x080008c3
 8000844:	080008c3 	.word	0x080008c3
 8000848:	080008c3 	.word	0x080008c3
 800084c:	080008c3 	.word	0x080008c3
 8000850:	080008c3 	.word	0x080008c3
 8000854:	080008c3 	.word	0x080008c3
 8000858:	08000871 	.word	0x08000871
 800085c:	08000885 	.word	0x08000885
 8000860:	4a79      	ldr	r2, [pc, #484]	; (8000a48 <HAL_GPIO_Init+0x2b4>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d013      	beq.n	800088e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000866:	e02c      	b.n	80008c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	623b      	str	r3, [r7, #32]
          break;
 800086e:	e029      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	3304      	adds	r3, #4
 8000876:	623b      	str	r3, [r7, #32]
          break;
 8000878:	e024      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	3308      	adds	r3, #8
 8000880:	623b      	str	r3, [r7, #32]
          break;
 8000882:	e01f      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	330c      	adds	r3, #12
 800088a:	623b      	str	r3, [r7, #32]
          break;
 800088c:	e01a      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d102      	bne.n	800089c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000896:	2304      	movs	r3, #4
 8000898:	623b      	str	r3, [r7, #32]
          break;
 800089a:	e013      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d105      	bne.n	80008b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008a4:	2308      	movs	r3, #8
 80008a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69fa      	ldr	r2, [r7, #28]
 80008ac:	611a      	str	r2, [r3, #16]
          break;
 80008ae:	e009      	b.n	80008c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008b0:	2308      	movs	r3, #8
 80008b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69fa      	ldr	r2, [r7, #28]
 80008b8:	615a      	str	r2, [r3, #20]
          break;
 80008ba:	e003      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
          break;
 80008c0:	e000      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          break;
 80008c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	2bff      	cmp	r3, #255	; 0xff
 80008c8:	d801      	bhi.n	80008ce <HAL_GPIO_Init+0x13a>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	e001      	b.n	80008d2 <HAL_GPIO_Init+0x13e>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3304      	adds	r3, #4
 80008d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	2bff      	cmp	r3, #255	; 0xff
 80008d8:	d802      	bhi.n	80008e0 <HAL_GPIO_Init+0x14c>
 80008da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	e002      	b.n	80008e6 <HAL_GPIO_Init+0x152>
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	3b08      	subs	r3, #8
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	210f      	movs	r1, #15
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	401a      	ands	r2, r3
 80008f8:	6a39      	ldr	r1, [r7, #32]
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	431a      	orrs	r2, r3
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	2b00      	cmp	r3, #0
 8000910:	f000 80b1 	beq.w	8000a76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000914:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <HAL_GPIO_Init+0x2b8>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a4c      	ldr	r2, [pc, #304]	; (8000a4c <HAL_GPIO_Init+0x2b8>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b4a      	ldr	r3, [pc, #296]	; (8000a4c <HAL_GPIO_Init+0x2b8>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800092c:	4a48      	ldr	r2, [pc, #288]	; (8000a50 <HAL_GPIO_Init+0x2bc>)
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	089b      	lsrs	r3, r3, #2
 8000932:	3302      	adds	r3, #2
 8000934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000938:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093c:	f003 0303 	and.w	r3, r3, #3
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	220f      	movs	r2, #15
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	4013      	ands	r3, r2
 800094e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a40      	ldr	r2, [pc, #256]	; (8000a54 <HAL_GPIO_Init+0x2c0>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d013      	beq.n	8000980 <HAL_GPIO_Init+0x1ec>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a3f      	ldr	r2, [pc, #252]	; (8000a58 <HAL_GPIO_Init+0x2c4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d00d      	beq.n	800097c <HAL_GPIO_Init+0x1e8>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a3e      	ldr	r2, [pc, #248]	; (8000a5c <HAL_GPIO_Init+0x2c8>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d007      	beq.n	8000978 <HAL_GPIO_Init+0x1e4>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a3d      	ldr	r2, [pc, #244]	; (8000a60 <HAL_GPIO_Init+0x2cc>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d101      	bne.n	8000974 <HAL_GPIO_Init+0x1e0>
 8000970:	2303      	movs	r3, #3
 8000972:	e006      	b.n	8000982 <HAL_GPIO_Init+0x1ee>
 8000974:	2304      	movs	r3, #4
 8000976:	e004      	b.n	8000982 <HAL_GPIO_Init+0x1ee>
 8000978:	2302      	movs	r3, #2
 800097a:	e002      	b.n	8000982 <HAL_GPIO_Init+0x1ee>
 800097c:	2301      	movs	r3, #1
 800097e:	e000      	b.n	8000982 <HAL_GPIO_Init+0x1ee>
 8000980:	2300      	movs	r3, #0
 8000982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000984:	f002 0203 	and.w	r2, r2, #3
 8000988:	0092      	lsls	r2, r2, #2
 800098a:	4093      	lsls	r3, r2
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	4313      	orrs	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000992:	492f      	ldr	r1, [pc, #188]	; (8000a50 <HAL_GPIO_Init+0x2bc>)
 8000994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000996:	089b      	lsrs	r3, r3, #2
 8000998:	3302      	adds	r3, #2
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d006      	beq.n	80009ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009ac:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009ae:	689a      	ldr	r2, [r3, #8]
 80009b0:	492c      	ldr	r1, [pc, #176]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	608b      	str	r3, [r1, #8]
 80009b8:	e006      	b.n	80009c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009bc:	689a      	ldr	r2, [r3, #8]
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	43db      	mvns	r3, r3
 80009c2:	4928      	ldr	r1, [pc, #160]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009c4:	4013      	ands	r3, r2
 80009c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d006      	beq.n	80009e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009d4:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009d6:	68da      	ldr	r2, [r3, #12]
 80009d8:	4922      	ldr	r1, [pc, #136]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	4313      	orrs	r3, r2
 80009de:	60cb      	str	r3, [r1, #12]
 80009e0:	e006      	b.n	80009f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009e2:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009e4:	68da      	ldr	r2, [r3, #12]
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	43db      	mvns	r3, r3
 80009ea:	491e      	ldr	r1, [pc, #120]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009ec:	4013      	ands	r3, r2
 80009ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d006      	beq.n	8000a0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	4918      	ldr	r1, [pc, #96]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	604b      	str	r3, [r1, #4]
 8000a08:	e006      	b.n	8000a18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	43db      	mvns	r3, r3
 8000a12:	4914      	ldr	r1, [pc, #80]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 8000a14:	4013      	ands	r3, r2
 8000a16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d021      	beq.n	8000a68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	490e      	ldr	r1, [pc, #56]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	600b      	str	r3, [r1, #0]
 8000a30:	e021      	b.n	8000a76 <HAL_GPIO_Init+0x2e2>
 8000a32:	bf00      	nop
 8000a34:	10320000 	.word	0x10320000
 8000a38:	10310000 	.word	0x10310000
 8000a3c:	10220000 	.word	0x10220000
 8000a40:	10210000 	.word	0x10210000
 8000a44:	10120000 	.word	0x10120000
 8000a48:	10110000 	.word	0x10110000
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40010000 	.word	0x40010000
 8000a54:	40010800 	.word	0x40010800
 8000a58:	40010c00 	.word	0x40010c00
 8000a5c:	40011000 	.word	0x40011000
 8000a60:	40011400 	.word	0x40011400
 8000a64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_GPIO_Init+0x304>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	4909      	ldr	r1, [pc, #36]	; (8000a98 <HAL_GPIO_Init+0x304>)
 8000a72:	4013      	ands	r3, r2
 8000a74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	3301      	adds	r3, #1
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	fa22 f303 	lsr.w	r3, r2, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f47f ae8e 	bne.w	80007a8 <HAL_GPIO_Init+0x14>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	372c      	adds	r7, #44	; 0x2c
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	40010400 	.word	0x40010400

08000a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	807b      	strh	r3, [r7, #2]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000aac:	787b      	ldrb	r3, [r7, #1]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ab2:	887a      	ldrh	r2, [r7, #2]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ab8:	e003      	b.n	8000ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	041a      	lsls	r2, r3, #16
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	611a      	str	r2, [r3, #16]
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ade:	887a      	ldrh	r2, [r7, #2]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	041a      	lsls	r2, r3, #16
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	43d9      	mvns	r1, r3
 8000aea:	887b      	ldrh	r3, [r7, #2]
 8000aec:	400b      	ands	r3, r1
 8000aee:	431a      	orrs	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	611a      	str	r2, [r3, #16]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
	...

08000b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e272      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 8087 	beq.w	8000c2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b20:	4b92      	ldr	r3, [pc, #584]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 030c 	and.w	r3, r3, #12
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	d00c      	beq.n	8000b46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b2c:	4b8f      	ldr	r3, [pc, #572]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 030c 	and.w	r3, r3, #12
 8000b34:	2b08      	cmp	r3, #8
 8000b36:	d112      	bne.n	8000b5e <HAL_RCC_OscConfig+0x5e>
 8000b38:	4b8c      	ldr	r3, [pc, #560]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b44:	d10b      	bne.n	8000b5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b46:	4b89      	ldr	r3, [pc, #548]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d06c      	beq.n	8000c2c <HAL_RCC_OscConfig+0x12c>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d168      	bne.n	8000c2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e24c      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b66:	d106      	bne.n	8000b76 <HAL_RCC_OscConfig+0x76>
 8000b68:	4b80      	ldr	r3, [pc, #512]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a7f      	ldr	r2, [pc, #508]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	e02e      	b.n	8000bd4 <HAL_RCC_OscConfig+0xd4>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d10c      	bne.n	8000b98 <HAL_RCC_OscConfig+0x98>
 8000b7e:	4b7b      	ldr	r3, [pc, #492]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a7a      	ldr	r2, [pc, #488]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	4b78      	ldr	r3, [pc, #480]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a77      	ldr	r2, [pc, #476]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	e01d      	b.n	8000bd4 <HAL_RCC_OscConfig+0xd4>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ba0:	d10c      	bne.n	8000bbc <HAL_RCC_OscConfig+0xbc>
 8000ba2:	4b72      	ldr	r3, [pc, #456]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a71      	ldr	r2, [pc, #452]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	4b6f      	ldr	r3, [pc, #444]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a6e      	ldr	r2, [pc, #440]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	e00b      	b.n	8000bd4 <HAL_RCC_OscConfig+0xd4>
 8000bbc:	4b6b      	ldr	r3, [pc, #428]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a6a      	ldr	r2, [pc, #424]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b68      	ldr	r3, [pc, #416]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a67      	ldr	r2, [pc, #412]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d013      	beq.n	8000c04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bdc:	f7ff fccc 	bl	8000578 <HAL_GetTick>
 8000be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be2:	e008      	b.n	8000bf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000be4:	f7ff fcc8 	bl	8000578 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b64      	cmp	r3, #100	; 0x64
 8000bf0:	d901      	bls.n	8000bf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e200      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf6:	4b5d      	ldr	r3, [pc, #372]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0f0      	beq.n	8000be4 <HAL_RCC_OscConfig+0xe4>
 8000c02:	e014      	b.n	8000c2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c04:	f7ff fcb8 	bl	8000578 <HAL_GetTick>
 8000c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c0c:	f7ff fcb4 	bl	8000578 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b64      	cmp	r3, #100	; 0x64
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e1ec      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c1e:	4b53      	ldr	r3, [pc, #332]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1f0      	bne.n	8000c0c <HAL_RCC_OscConfig+0x10c>
 8000c2a:	e000      	b.n	8000c2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d063      	beq.n	8000d02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c3a:	4b4c      	ldr	r3, [pc, #304]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 030c 	and.w	r3, r3, #12
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00b      	beq.n	8000c5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c46:	4b49      	ldr	r3, [pc, #292]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 030c 	and.w	r3, r3, #12
 8000c4e:	2b08      	cmp	r3, #8
 8000c50:	d11c      	bne.n	8000c8c <HAL_RCC_OscConfig+0x18c>
 8000c52:	4b46      	ldr	r3, [pc, #280]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d116      	bne.n	8000c8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c5e:	4b43      	ldr	r3, [pc, #268]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d005      	beq.n	8000c76 <HAL_RCC_OscConfig+0x176>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d001      	beq.n	8000c76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e1c0      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c76:	4b3d      	ldr	r3, [pc, #244]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	4939      	ldr	r1, [pc, #228]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c86:	4313      	orrs	r3, r2
 8000c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8a:	e03a      	b.n	8000d02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d020      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c94:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <HAL_RCC_OscConfig+0x270>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9a:	f7ff fc6d 	bl	8000578 <HAL_GetTick>
 8000c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca0:	e008      	b.n	8000cb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ca2:	f7ff fc69 	bl	8000578 <HAL_GetTick>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d901      	bls.n	8000cb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e1a1      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d0f0      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	4927      	ldr	r1, [pc, #156]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	600b      	str	r3, [r1, #0]
 8000cd4:	e015      	b.n	8000d02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <HAL_RCC_OscConfig+0x270>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fc4c 	bl	8000578 <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ce4:	f7ff fc48 	bl	8000578 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e180      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f0      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d03a      	beq.n	8000d84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d019      	beq.n	8000d4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_RCC_OscConfig+0x274>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d1c:	f7ff fc2c 	bl	8000578 <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d24:	f7ff fc28 	bl	8000578 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e160      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f0      	beq.n	8000d24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f000 faea 	bl	800131c <RCC_Delay>
 8000d48:	e01c      	b.n	8000d84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_RCC_OscConfig+0x274>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d50:	f7ff fc12 	bl	8000578 <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d56:	e00f      	b.n	8000d78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d58:	f7ff fc0e 	bl	8000578 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d908      	bls.n	8000d78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e146      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	42420000 	.word	0x42420000
 8000d74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d78:	4b92      	ldr	r3, [pc, #584]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1e9      	bne.n	8000d58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 80a6 	beq.w	8000ede <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d96:	4b8b      	ldr	r3, [pc, #556]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10d      	bne.n	8000dbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	4b88      	ldr	r3, [pc, #544]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a87      	ldr	r2, [pc, #540]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dac:	61d3      	str	r3, [r2, #28]
 8000dae:	4b85      	ldr	r3, [pc, #532]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dbe:	4b82      	ldr	r3, [pc, #520]	; (8000fc8 <HAL_RCC_OscConfig+0x4c8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d118      	bne.n	8000dfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dca:	4b7f      	ldr	r3, [pc, #508]	; (8000fc8 <HAL_RCC_OscConfig+0x4c8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a7e      	ldr	r2, [pc, #504]	; (8000fc8 <HAL_RCC_OscConfig+0x4c8>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dd6:	f7ff fbcf 	bl	8000578 <HAL_GetTick>
 8000dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ddc:	e008      	b.n	8000df0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dde:	f7ff fbcb 	bl	8000578 <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b64      	cmp	r3, #100	; 0x64
 8000dea:	d901      	bls.n	8000df0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e103      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df0:	4b75      	ldr	r3, [pc, #468]	; (8000fc8 <HAL_RCC_OscConfig+0x4c8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f0      	beq.n	8000dde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d106      	bne.n	8000e12 <HAL_RCC_OscConfig+0x312>
 8000e04:	4b6f      	ldr	r3, [pc, #444]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	4a6e      	ldr	r2, [pc, #440]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6213      	str	r3, [r2, #32]
 8000e10:	e02d      	b.n	8000e6e <HAL_RCC_OscConfig+0x36e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10c      	bne.n	8000e34 <HAL_RCC_OscConfig+0x334>
 8000e1a:	4b6a      	ldr	r3, [pc, #424]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	6a1b      	ldr	r3, [r3, #32]
 8000e1e:	4a69      	ldr	r2, [pc, #420]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	f023 0301 	bic.w	r3, r3, #1
 8000e24:	6213      	str	r3, [r2, #32]
 8000e26:	4b67      	ldr	r3, [pc, #412]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e28:	6a1b      	ldr	r3, [r3, #32]
 8000e2a:	4a66      	ldr	r2, [pc, #408]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	f023 0304 	bic.w	r3, r3, #4
 8000e30:	6213      	str	r3, [r2, #32]
 8000e32:	e01c      	b.n	8000e6e <HAL_RCC_OscConfig+0x36e>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	2b05      	cmp	r3, #5
 8000e3a:	d10c      	bne.n	8000e56 <HAL_RCC_OscConfig+0x356>
 8000e3c:	4b61      	ldr	r3, [pc, #388]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	4a60      	ldr	r2, [pc, #384]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	6213      	str	r3, [r2, #32]
 8000e48:	4b5e      	ldr	r3, [pc, #376]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	4a5d      	ldr	r2, [pc, #372]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6213      	str	r3, [r2, #32]
 8000e54:	e00b      	b.n	8000e6e <HAL_RCC_OscConfig+0x36e>
 8000e56:	4b5b      	ldr	r3, [pc, #364]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	4a5a      	ldr	r2, [pc, #360]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e5c:	f023 0301 	bic.w	r3, r3, #1
 8000e60:	6213      	str	r3, [r2, #32]
 8000e62:	4b58      	ldr	r3, [pc, #352]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e64:	6a1b      	ldr	r3, [r3, #32]
 8000e66:	4a57      	ldr	r2, [pc, #348]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e68:	f023 0304 	bic.w	r3, r3, #4
 8000e6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d015      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e76:	f7ff fb7f 	bl	8000578 <HAL_GetTick>
 8000e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e7c:	e00a      	b.n	8000e94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e7e:	f7ff fb7b 	bl	8000578 <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e0b1      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e94:	4b4b      	ldr	r3, [pc, #300]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0ee      	beq.n	8000e7e <HAL_RCC_OscConfig+0x37e>
 8000ea0:	e014      	b.n	8000ecc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fb69 	bl	8000578 <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fb65 	bl	8000578 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e09b      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec0:	4b40      	ldr	r3, [pc, #256]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1ee      	bne.n	8000eaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d105      	bne.n	8000ede <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed2:	4b3c      	ldr	r3, [pc, #240]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a3b      	ldr	r2, [pc, #236]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000edc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 8087 	beq.w	8000ff6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ee8:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d061      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d146      	bne.n	8000f8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000efc:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <HAL_RCC_OscConfig+0x4cc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f02:	f7ff fb39 	bl	8000578 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f0a:	f7ff fb35 	bl	8000578 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e06d      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f1c:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1f0      	bne.n	8000f0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f30:	d108      	bne.n	8000f44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f32:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	4921      	ldr	r1, [pc, #132]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f44:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a19      	ldr	r1, [r3, #32]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f54:	430b      	orrs	r3, r1
 8000f56:	491b      	ldr	r1, [pc, #108]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <HAL_RCC_OscConfig+0x4cc>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f62:	f7ff fb09 	bl	8000578 <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6a:	f7ff fb05 	bl	8000578 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e03d      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f0      	beq.n	8000f6a <HAL_RCC_OscConfig+0x46a>
 8000f88:	e035      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <HAL_RCC_OscConfig+0x4cc>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff faf2 	bl	8000578 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f98:	f7ff faee 	bl	8000578 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e026      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f0      	bne.n	8000f98 <HAL_RCC_OscConfig+0x498>
 8000fb6:	e01e      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d107      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e019      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40007000 	.word	0x40007000
 8000fcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_RCC_OscConfig+0x500>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d106      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d001      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e0d0      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001018:	4b6a      	ldr	r3, [pc, #424]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	429a      	cmp	r2, r3
 8001024:	d910      	bls.n	8001048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001026:	4b67      	ldr	r3, [pc, #412]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f023 0207 	bic.w	r2, r3, #7
 800102e:	4965      	ldr	r1, [pc, #404]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	4313      	orrs	r3, r2
 8001034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001036:	4b63      	ldr	r3, [pc, #396]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d001      	beq.n	8001048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e0b8      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d020      	beq.n	8001096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001060:	4b59      	ldr	r3, [pc, #356]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a58      	ldr	r2, [pc, #352]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800106a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0308 	and.w	r3, r3, #8
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001078:	4b53      	ldr	r3, [pc, #332]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4a52      	ldr	r2, [pc, #328]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001084:	4b50      	ldr	r3, [pc, #320]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	494d      	ldr	r1, [pc, #308]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001092:	4313      	orrs	r3, r2
 8001094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d040      	beq.n	8001124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d107      	bne.n	80010ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	4b47      	ldr	r3, [pc, #284]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d115      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e07f      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d107      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c2:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e073      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d2:	4b3d      	ldr	r3, [pc, #244]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e06b      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e2:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f023 0203 	bic.w	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4936      	ldr	r1, [pc, #216]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010f4:	f7ff fa40 	bl	8000578 <HAL_GetTick>
 80010f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fa:	e00a      	b.n	8001112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010fc:	f7ff fa3c 	bl	8000578 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	f241 3288 	movw	r2, #5000	; 0x1388
 800110a:	4293      	cmp	r3, r2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e053      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 020c 	and.w	r2, r3, #12
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	429a      	cmp	r2, r3
 8001122:	d1eb      	bne.n	80010fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d210      	bcs.n	8001154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 0207 	bic.w	r2, r3, #7
 800113a:	4922      	ldr	r1, [pc, #136]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	4313      	orrs	r3, r2
 8001140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d001      	beq.n	8001154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e032      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4916      	ldr	r1, [pc, #88]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800116e:	4313      	orrs	r3, r2
 8001170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d009      	beq.n	8001192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	490e      	ldr	r1, [pc, #56]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800118e:	4313      	orrs	r3, r2
 8001190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001192:	f000 f821 	bl	80011d8 <HAL_RCC_GetSysClockFreq>
 8001196:	4602      	mov	r2, r0
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	490a      	ldr	r1, [pc, #40]	; (80011cc <HAL_RCC_ClockConfig+0x1c8>)
 80011a4:	5ccb      	ldrb	r3, [r1, r3]
 80011a6:	fa22 f303 	lsr.w	r3, r2, r3
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <HAL_RCC_ClockConfig+0x1cc>)
 80011ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_RCC_ClockConfig+0x1d0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f8f0 	bl	8000398 <HAL_InitTick>

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40022000 	.word	0x40022000
 80011c8:	40021000 	.word	0x40021000
 80011cc:	08002a28 	.word	0x08002a28
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <HAL_RCC_GetSysClockFreq+0x94>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d002      	beq.n	8001208 <HAL_RCC_GetSysClockFreq+0x30>
 8001202:	2b08      	cmp	r3, #8
 8001204:	d003      	beq.n	800120e <HAL_RCC_GetSysClockFreq+0x36>
 8001206:	e027      	b.n	8001258 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_RCC_GetSysClockFreq+0x98>)
 800120a:	613b      	str	r3, [r7, #16]
      break;
 800120c:	e027      	b.n	800125e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	0c9b      	lsrs	r3, r3, #18
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	4a17      	ldr	r2, [pc, #92]	; (8001274 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001218:	5cd3      	ldrb	r3, [r2, r3]
 800121a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d010      	beq.n	8001248 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_RCC_GetSysClockFreq+0x94>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	0c5b      	lsrs	r3, r3, #17
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	4a11      	ldr	r2, [pc, #68]	; (8001278 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001232:	5cd3      	ldrb	r3, [r2, r3]
 8001234:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <HAL_RCC_GetSysClockFreq+0x98>)
 800123a:	fb03 f202 	mul.w	r2, r3, r2
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	fbb2 f3f3 	udiv	r3, r2, r3
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	e004      	b.n	8001252 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a0c      	ldr	r2, [pc, #48]	; (800127c <HAL_RCC_GetSysClockFreq+0xa4>)
 800124c:	fb02 f303 	mul.w	r3, r2, r3
 8001250:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	613b      	str	r3, [r7, #16]
      break;
 8001256:	e002      	b.n	800125e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_RCC_GetSysClockFreq+0x98>)
 800125a:	613b      	str	r3, [r7, #16]
      break;
 800125c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800125e:	693b      	ldr	r3, [r7, #16]
}
 8001260:	4618      	mov	r0, r3
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	007a1200 	.word	0x007a1200
 8001274:	08002a40 	.word	0x08002a40
 8001278:	08002a50 	.word	0x08002a50
 800127c:	003d0900 	.word	0x003d0900

08001280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001284:	4b02      	ldr	r3, [pc, #8]	; (8001290 <HAL_RCC_GetHCLKFreq+0x10>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000000 	.word	0x20000000

08001294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001298:	f7ff fff2 	bl	8001280 <HAL_RCC_GetHCLKFreq>
 800129c:	4602      	mov	r2, r0
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	0a1b      	lsrs	r3, r3, #8
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	4903      	ldr	r1, [pc, #12]	; (80012b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012aa:	5ccb      	ldrb	r3, [r1, r3]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40021000 	.word	0x40021000
 80012b8:	08002a38 	.word	0x08002a38

080012bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	220f      	movs	r2, #15
 80012ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_RCC_GetClockConfig+0x58>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0203 	and.w	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <HAL_RCC_GetClockConfig+0x58>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_RCC_GetClockConfig+0x58>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_RCC_GetClockConfig+0x58>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	08db      	lsrs	r3, r3, #3
 80012f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_RCC_GetClockConfig+0x5c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0207 	and.w	r2, r3, #7
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	40021000 	.word	0x40021000
 8001318:	40022000 	.word	0x40022000

0800131c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <RCC_Delay+0x34>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <RCC_Delay+0x38>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	0a5b      	lsrs	r3, r3, #9
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	fb02 f303 	mul.w	r3, r2, r3
 8001336:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001338:	bf00      	nop
  }
  while (Delay --);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1e5a      	subs	r2, r3, #1
 800133e:	60fa      	str	r2, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f9      	bne.n	8001338 <RCC_Delay+0x1c>
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	20000000 	.word	0x20000000
 8001354:	10624dd3 	.word	0x10624dd3

08001358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e041      	b.n	80013ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d106      	bne.n	8001384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f839 	bl	80013f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2202      	movs	r2, #2
 8001388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3304      	adds	r3, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f000 f9b4 	bl	8001704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b01      	cmp	r3, #1
 800141a:	d001      	beq.n	8001420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e03a      	b.n	8001496 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68da      	ldr	r2, [r3, #12]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0201 	orr.w	r2, r2, #1
 8001436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <HAL_TIM_Base_Start_IT+0x98>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d00e      	beq.n	8001460 <HAL_TIM_Base_Start_IT+0x58>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800144a:	d009      	beq.n	8001460 <HAL_TIM_Base_Start_IT+0x58>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d004      	beq.n	8001460 <HAL_TIM_Base_Start_IT+0x58>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d111      	bne.n	8001484 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b06      	cmp	r3, #6
 8001470:	d010      	beq.n	8001494 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 0201 	orr.w	r2, r2, #1
 8001480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001482:	e007      	b.n	8001494 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	40012c00 	.word	0x40012c00
 80014a4:	40000400 	.word	0x40000400
 80014a8:	40000800 	.word	0x40000800

080014ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d122      	bne.n	8001508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d11b      	bne.n	8001508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f06f 0202 	mvn.w	r2, #2
 80014d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f8ed 	bl	80016ce <HAL_TIM_IC_CaptureCallback>
 80014f4:	e005      	b.n	8001502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f8e0 	bl	80016bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f8ef 	bl	80016e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	2b04      	cmp	r3, #4
 8001514:	d122      	bne.n	800155c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b04      	cmp	r3, #4
 8001522:	d11b      	bne.n	800155c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f06f 0204 	mvn.w	r2, #4
 800152c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2202      	movs	r2, #2
 8001532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f8c3 	bl	80016ce <HAL_TIM_IC_CaptureCallback>
 8001548:	e005      	b.n	8001556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f8b6 	bl	80016bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f8c5 	bl	80016e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b08      	cmp	r3, #8
 8001568:	d122      	bne.n	80015b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	2b08      	cmp	r3, #8
 8001576:	d11b      	bne.n	80015b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f06f 0208 	mvn.w	r2, #8
 8001580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2204      	movs	r2, #4
 8001586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f899 	bl	80016ce <HAL_TIM_IC_CaptureCallback>
 800159c:	e005      	b.n	80015aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f88c 	bl	80016bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f89b 	bl	80016e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	2b10      	cmp	r3, #16
 80015bc:	d122      	bne.n	8001604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f003 0310 	and.w	r3, r3, #16
 80015c8:	2b10      	cmp	r3, #16
 80015ca:	d11b      	bne.n	8001604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f06f 0210 	mvn.w	r2, #16
 80015d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2208      	movs	r2, #8
 80015da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f86f 	bl	80016ce <HAL_TIM_IC_CaptureCallback>
 80015f0:	e005      	b.n	80015fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 f862 	bl	80016bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f871 	bl	80016e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b01      	cmp	r3, #1
 8001610:	d10e      	bne.n	8001630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d107      	bne.n	8001630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f06f 0201 	mvn.w	r2, #1
 8001628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7fe fe6e 	bl	800030c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163a:	2b80      	cmp	r3, #128	; 0x80
 800163c:	d10e      	bne.n	800165c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001648:	2b80      	cmp	r3, #128	; 0x80
 800164a:	d107      	bne.n	800165c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f8bf 	bl	80017da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001666:	2b40      	cmp	r3, #64	; 0x40
 8001668:	d10e      	bne.n	8001688 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001674:	2b40      	cmp	r3, #64	; 0x40
 8001676:	d107      	bne.n	8001688 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f835 	bl	80016f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	f003 0320 	and.w	r3, r3, #32
 8001692:	2b20      	cmp	r3, #32
 8001694:	d10e      	bne.n	80016b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0320 	and.w	r3, r3, #32
 80016a0:	2b20      	cmp	r3, #32
 80016a2:	d107      	bne.n	80016b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f06f 0220 	mvn.w	r2, #32
 80016ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f88a 	bl	80017c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a29      	ldr	r2, [pc, #164]	; (80017bc <TIM_Base_SetConfig+0xb8>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d00b      	beq.n	8001734 <TIM_Base_SetConfig+0x30>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001722:	d007      	beq.n	8001734 <TIM_Base_SetConfig+0x30>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a26      	ldr	r2, [pc, #152]	; (80017c0 <TIM_Base_SetConfig+0xbc>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d003      	beq.n	8001734 <TIM_Base_SetConfig+0x30>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a25      	ldr	r2, [pc, #148]	; (80017c4 <TIM_Base_SetConfig+0xc0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d108      	bne.n	8001746 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800173a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4313      	orrs	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a1c      	ldr	r2, [pc, #112]	; (80017bc <TIM_Base_SetConfig+0xb8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00b      	beq.n	8001766 <TIM_Base_SetConfig+0x62>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001754:	d007      	beq.n	8001766 <TIM_Base_SetConfig+0x62>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a19      	ldr	r2, [pc, #100]	; (80017c0 <TIM_Base_SetConfig+0xbc>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d003      	beq.n	8001766 <TIM_Base_SetConfig+0x62>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <TIM_Base_SetConfig+0xc0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d108      	bne.n	8001778 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800176c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	4313      	orrs	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a07      	ldr	r2, [pc, #28]	; (80017bc <TIM_Base_SetConfig+0xb8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d103      	bne.n	80017ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	615a      	str	r2, [r3, #20]
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	40012c00 	.word	0x40012c00
 80017c0:	40000400 	.word	0x40000400
 80017c4:	40000800 	.word	0x40000800

080017c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f103 0208 	add.w	r2, r3, #8
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f04f 32ff 	mov.w	r2, #4294967295
 8001804:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f103 0208 	add.w	r2, r3, #8
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f103 0208 	add.w	r2, r3, #8
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001858:	d103      	bne.n	8001862 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e00c      	b.n	800187c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3308      	adds	r3, #8
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	e002      	b.n	8001870 <vListInsert+0x2e>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	429a      	cmp	r2, r3
 800187a:	d2f6      	bcs.n	800186a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	601a      	str	r2, [r3, #0]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80018b2:	b480      	push	{r7}
 80018b4:	b085      	sub	sp, #20
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6892      	ldr	r2, [r2, #8]
 80018c8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6852      	ldr	r2, [r2, #4]
 80018d2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d103      	bne.n	80018e6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	1e5a      	subs	r2, r3, #1
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001904:	b580      	push	{r7, lr}
 8001906:	b08c      	sub	sp, #48	; 0x30
 8001908:	af04      	add	r7, sp, #16
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	4613      	mov	r3, r2
 8001912:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4618      	mov	r0, r3
 800191a:	f000 fe77 	bl	800260c <pvPortMalloc>
 800191e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d013      	beq.n	800194e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001926:	2058      	movs	r0, #88	; 0x58
 8001928:	f000 fe70 	bl	800260c <pvPortMalloc>
 800192c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001934:	2258      	movs	r2, #88	; 0x58
 8001936:	2100      	movs	r1, #0
 8001938:	69f8      	ldr	r0, [r7, #28]
 800193a:	f001 f831 	bl	80029a0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
 8001944:	e005      	b.n	8001952 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f000 ff1a 	bl	8002780 <vPortFree>
 800194c:	e001      	b.n	8001952 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	2300      	movs	r3, #0
 800195c:	9303      	str	r3, [sp, #12]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	9302      	str	r3, [sp, #8]
 8001962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f80e 	bl	8001990 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001974:	69f8      	ldr	r0, [r7, #28]
 8001976:	f000 f899 	bl	8001aac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800197a:	2301      	movs	r3, #1
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	e002      	b.n	8001986 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001986:	69bb      	ldr	r3, [r7, #24]
    }
 8001988:	4618      	mov	r0, r3
 800198a:	3720      	adds	r7, #32
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800199e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	461a      	mov	r2, r3
 80019a8:	21a5      	movs	r1, #165	; 0xa5
 80019aa:	f000 fff9 	bl	80029a0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80019ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019b8:	3b01      	subs	r3, #1
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	f023 0307 	bic.w	r3, r3, #7
 80019c6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00a      	beq.n	80019e8 <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80019d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d6:	f383 8811 	msr	BASEPRI, r3
 80019da:	f3bf 8f6f 	isb	sy
 80019de:	f3bf 8f4f 	dsb	sy
 80019e2:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80019e4:	bf00      	nop
 80019e6:	e7fe      	b.n	80019e6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d01e      	beq.n	8001a2c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	e012      	b.n	8001a1a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	4413      	add	r3, r2
 80019fa:	7819      	ldrb	r1, [r3, #0]
 80019fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	4413      	add	r3, r2
 8001a02:	3334      	adds	r3, #52	; 0x34
 8001a04:	460a      	mov	r2, r1
 8001a06:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	3301      	adds	r3, #1
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	2b09      	cmp	r3, #9
 8001a1e:	d9e9      	bls.n	80019f4 <prvInitialiseNewTask+0x64>
 8001a20:	e000      	b.n	8001a24 <prvInitialiseNewTask+0x94>
            {
                break;
 8001a22:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d90a      	bls.n	8001a48 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8001a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a36:	f383 8811 	msr	BASEPRI, r3
 8001a3a:	f3bf 8f6f 	isb	sy
 8001a3e:	f3bf 8f4f 	dsb	sy
 8001a42:	613b      	str	r3, [r7, #16]
    }
 8001a44:	bf00      	nop
 8001a46:	e7fe      	b.n	8001a46 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d901      	bls.n	8001a52 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a5c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	3304      	adds	r3, #4
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fee1 	bl	800182a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6a:	3318      	adds	r3, #24
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fedc 	bl	800182a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a76:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7a:	f1c3 0205 	rsb	r2, r3, #5
 8001a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a80:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a86:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	68f9      	ldr	r1, [r7, #12]
 8001a8c:	69b8      	ldr	r0, [r7, #24]
 8001a8e:	f000 fca9 	bl	80023e4 <pxPortInitialiseStack>
 8001a92:	4602      	mov	r2, r0
 8001a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a96:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aa2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001aa4:	bf00      	nop
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001ab4:	f000 fd08 	bl	80024c8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001ab8:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <prvAddNewTaskToReadyList+0x110>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	3301      	adds	r3, #1
 8001abe:	4a3f      	ldr	r2, [pc, #252]	; (8001bbc <prvAddNewTaskToReadyList+0x110>)
 8001ac0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	; (8001bc0 <prvAddNewTaskToReadyList+0x114>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001aca:	4a3d      	ldr	r2, [pc, #244]	; (8001bc0 <prvAddNewTaskToReadyList+0x114>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ad0:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <prvAddNewTaskToReadyList+0x110>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d110      	bne.n	8001afa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001ad8:	f000 fbaa 	bl	8002230 <prvInitialiseTaskLists>
 8001adc:	e00d      	b.n	8001afa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001ade:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <prvAddNewTaskToReadyList+0x118>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d109      	bne.n	8001afa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ae6:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <prvAddNewTaskToReadyList+0x114>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d802      	bhi.n	8001afa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001af4:	4a32      	ldr	r2, [pc, #200]	; (8001bc0 <prvAddNewTaskToReadyList+0x114>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001afa:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <prvAddNewTaskToReadyList+0x11c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3301      	adds	r3, #1
 8001b00:	4a31      	ldr	r2, [pc, #196]	; (8001bc8 <prvAddNewTaskToReadyList+0x11c>)
 8001b02:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001b04:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <prvAddNewTaskToReadyList+0x11c>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	2201      	movs	r2, #1
 8001b12:	409a      	lsls	r2, r3
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <prvAddNewTaskToReadyList+0x120>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	4a2c      	ldr	r2, [pc, #176]	; (8001bcc <prvAddNewTaskToReadyList+0x120>)
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b22:	492b      	ldr	r1, [pc, #172]	; (8001bd0 <prvAddNewTaskToReadyList+0x124>)
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3304      	adds	r3, #4
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	3204      	adds	r2, #4
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	1d1a      	adds	r2, r3, #4
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <prvAddNewTaskToReadyList+0x124>)
 8001b62:	441a      	add	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	615a      	str	r2, [r3, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b6c:	4918      	ldr	r1, [pc, #96]	; (8001bd0 <prvAddNewTaskToReadyList+0x124>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	1c59      	adds	r1, r3, #1
 8001b7c:	4814      	ldr	r0, [pc, #80]	; (8001bd0 <prvAddNewTaskToReadyList+0x124>)
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4403      	add	r3, r0
 8001b88:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001b8a:	f000 fccd 	bl	8002528 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <prvAddNewTaskToReadyList+0x118>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00e      	beq.n	8001bb4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <prvAddNewTaskToReadyList+0x114>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d207      	bcs.n	8001bb4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <prvAddNewTaskToReadyList+0x128>)
 8001ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	f3bf 8f4f 	dsb	sy
 8001bb0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	2000014c 	.word	0x2000014c
 8001bc0:	20000078 	.word	0x20000078
 8001bc4:	20000158 	.word	0x20000158
 8001bc8:	20000168 	.word	0x20000168
 8001bcc:	20000154 	.word	0x20000154
 8001bd0:	2000007c 	.word	0x2000007c
 8001bd4:	e000ed04 	.word	0xe000ed04

08001bd8 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10a      	bne.n	8001c02 <xTaskDelayUntil+0x2a>
        __asm volatile
 8001bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf0:	f383 8811 	msr	BASEPRI, r3
 8001bf4:	f3bf 8f6f 	isb	sy
 8001bf8:	f3bf 8f4f 	dsb	sy
 8001bfc:	617b      	str	r3, [r7, #20]
    }
 8001bfe:	bf00      	nop
 8001c00:	e7fe      	b.n	8001c00 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10a      	bne.n	8001c1e <xTaskDelayUntil+0x46>
        __asm volatile
 8001c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c0c:	f383 8811 	msr	BASEPRI, r3
 8001c10:	f3bf 8f6f 	isb	sy
 8001c14:	f3bf 8f4f 	dsb	sy
 8001c18:	613b      	str	r3, [r7, #16]
    }
 8001c1a:	bf00      	nop
 8001c1c:	e7fe      	b.n	8001c1c <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <xTaskDelayUntil+0xf0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00a      	beq.n	8001c3c <xTaskDelayUntil+0x64>
        __asm volatile
 8001c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c2a:	f383 8811 	msr	BASEPRI, r3
 8001c2e:	f3bf 8f6f 	isb	sy
 8001c32:	f3bf 8f4f 	dsb	sy
 8001c36:	60fb      	str	r3, [r7, #12]
    }
 8001c38:	bf00      	nop
 8001c3a:	e7fe      	b.n	8001c3a <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8001c3c:	f000 f87e 	bl	8001d3c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <xTaskDelayUntil+0xf4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6a3a      	ldr	r2, [r7, #32]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d20b      	bcs.n	8001c72 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	69fa      	ldr	r2, [r7, #28]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d211      	bcs.n	8001c88 <xTaskDelayUntil+0xb0>
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d90d      	bls.n	8001c88 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c70:	e00a      	b.n	8001c88 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d303      	bcc.n	8001c84 <xTaskDelayUntil+0xac>
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d901      	bls.n	8001c88 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8001c84:	2301      	movs	r3, #1
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d006      	beq.n	8001ca2 <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 fb21 	bl	80022e4 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8001ca2:	f000 f859 	bl	8001d58 <xTaskResumeAll>
 8001ca6:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d107      	bne.n	8001cbe <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <xTaskDelayUntil+0xf8>)
 8001cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	f3bf 8f4f 	dsb	sy
 8001cba:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3728      	adds	r7, #40	; 0x28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000170 	.word	0x20000170
 8001ccc:	20000150 	.word	0x20000150
 8001cd0:	e000ed04 	.word	0xe000ed04

08001cd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d017      	beq.n	8001d16 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <vTaskDelay+0x60>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00a      	beq.n	8001d04 <vTaskDelay+0x30>
        __asm volatile
 8001cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf2:	f383 8811 	msr	BASEPRI, r3
 8001cf6:	f3bf 8f6f 	isb	sy
 8001cfa:	f3bf 8f4f 	dsb	sy
 8001cfe:	60bb      	str	r3, [r7, #8]
    }
 8001d00:	bf00      	nop
 8001d02:	e7fe      	b.n	8001d02 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001d04:	f000 f81a 	bl	8001d3c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001d08:	2100      	movs	r1, #0
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 faea 	bl	80022e4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001d10:	f000 f822 	bl	8001d58 <xTaskResumeAll>
 8001d14:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <vTaskDelay+0x64>)
 8001d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	f3bf 8f4f 	dsb	sy
 8001d28:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000170 	.word	0x20000170
 8001d38:	e000ed04 	.word	0xe000ed04

08001d3c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <vTaskSuspendAll+0x18>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	3301      	adds	r3, #1
 8001d46:	4a03      	ldr	r2, [pc, #12]	; (8001d54 <vTaskSuspendAll+0x18>)
 8001d48:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000170 	.word	0x20000170

08001d58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001d66:	4b71      	ldr	r3, [pc, #452]	; (8001f2c <xTaskResumeAll+0x1d4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10a      	bne.n	8001d84 <xTaskResumeAll+0x2c>
        __asm volatile
 8001d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d72:	f383 8811 	msr	BASEPRI, r3
 8001d76:	f3bf 8f6f 	isb	sy
 8001d7a:	f3bf 8f4f 	dsb	sy
 8001d7e:	607b      	str	r3, [r7, #4]
    }
 8001d80:	bf00      	nop
 8001d82:	e7fe      	b.n	8001d82 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001d84:	f000 fba0 	bl	80024c8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001d88:	4b68      	ldr	r3, [pc, #416]	; (8001f2c <xTaskResumeAll+0x1d4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	4a67      	ldr	r2, [pc, #412]	; (8001f2c <xTaskResumeAll+0x1d4>)
 8001d90:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d92:	4b66      	ldr	r3, [pc, #408]	; (8001f2c <xTaskResumeAll+0x1d4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 80c0 	bne.w	8001f1c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d9c:	4b64      	ldr	r3, [pc, #400]	; (8001f30 <xTaskResumeAll+0x1d8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80bb 	beq.w	8001f1c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001da6:	e08a      	b.n	8001ebe <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001da8:	4b62      	ldr	r3, [pc, #392]	; (8001f34 <xTaskResumeAll+0x1dc>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	6a12      	ldr	r2, [r2, #32]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	69fa      	ldr	r2, [r7, #28]
 8001dc6:	69d2      	ldr	r2, [r2, #28]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3318      	adds	r3, #24
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d103      	bne.n	8001dde <xTaskResumeAll+0x86>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	6a1a      	ldr	r2, [r3, #32]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	2200      	movs	r2, #0
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	1e5a      	subs	r2, r3, #1
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	68d2      	ldr	r2, [r2, #12]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	6892      	ldr	r2, [r2, #8]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d103      	bne.n	8001e1c <xTaskResumeAll+0xc4>
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	615a      	str	r2, [r3, #20]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	1e5a      	subs	r2, r3, #1
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	2201      	movs	r2, #1
 8001e32:	409a      	lsls	r2, r3
 8001e34:	4b40      	ldr	r3, [pc, #256]	; (8001f38 <xTaskResumeAll+0x1e0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	4a3f      	ldr	r2, [pc, #252]	; (8001f38 <xTaskResumeAll+0x1e0>)
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e42:	493e      	ldr	r1, [pc, #248]	; (8001f3c <xTaskResumeAll+0x1e4>)
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3304      	adds	r3, #4
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	3204      	adds	r2, #4
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	1d1a      	adds	r2, r3, #4
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4a2e      	ldr	r2, [pc, #184]	; (8001f3c <xTaskResumeAll+0x1e4>)
 8001e82:	441a      	add	r2, r3
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	615a      	str	r2, [r3, #20]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8c:	492b      	ldr	r1, [pc, #172]	; (8001f3c <xTaskResumeAll+0x1e4>)
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	1c59      	adds	r1, r3, #1
 8001e9c:	4827      	ldr	r0, [pc, #156]	; (8001f3c <xTaskResumeAll+0x1e4>)
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4403      	add	r3, r0
 8001ea8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <xTaskResumeAll+0x1e8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d302      	bcc.n	8001ebe <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8001eb8:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <xTaskResumeAll+0x1ec>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <xTaskResumeAll+0x1dc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f47f af70 	bne.w	8001da8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001ece:	f000 f9ef 	bl	80022b0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <xTaskResumeAll+0x1f0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d010      	beq.n	8001f00 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001ede:	f000 f837 	bl	8001f50 <xTaskIncrementTick>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <xTaskResumeAll+0x1ec>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f1      	bne.n	8001ede <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <xTaskResumeAll+0x1f0>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001f00:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <xTaskResumeAll+0x1ec>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d009      	beq.n	8001f1c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <xTaskResumeAll+0x1f4>)
 8001f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	f3bf 8f4f 	dsb	sy
 8001f18:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001f1c:	f000 fb04 	bl	8002528 <vPortExitCritical>

    return xAlreadyYielded;
 8001f20:	69bb      	ldr	r3, [r7, #24]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000170 	.word	0x20000170
 8001f30:	2000014c 	.word	0x2000014c
 8001f34:	20000110 	.word	0x20000110
 8001f38:	20000154 	.word	0x20000154
 8001f3c:	2000007c 	.word	0x2000007c
 8001f40:	20000078 	.word	0x20000078
 8001f44:	20000160 	.word	0x20000160
 8001f48:	2000015c 	.word	0x2000015c
 8001f4c:	e000ed04 	.word	0xe000ed04

08001f50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f5a:	4b7d      	ldr	r3, [pc, #500]	; (8002150 <xTaskIncrementTick+0x200>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 80ec 	bne.w	800213c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f64:	4b7b      	ldr	r3, [pc, #492]	; (8002154 <xTaskIncrementTick+0x204>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001f6c:	4a79      	ldr	r2, [pc, #484]	; (8002154 <xTaskIncrementTick+0x204>)
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d120      	bne.n	8001fba <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001f78:	4b77      	ldr	r3, [pc, #476]	; (8002158 <xTaskIncrementTick+0x208>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <xTaskIncrementTick+0x48>
        __asm volatile
 8001f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f86:	f383 8811 	msr	BASEPRI, r3
 8001f8a:	f3bf 8f6f 	isb	sy
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	607b      	str	r3, [r7, #4]
    }
 8001f94:	bf00      	nop
 8001f96:	e7fe      	b.n	8001f96 <xTaskIncrementTick+0x46>
 8001f98:	4b6f      	ldr	r3, [pc, #444]	; (8002158 <xTaskIncrementTick+0x208>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	4b6f      	ldr	r3, [pc, #444]	; (800215c <xTaskIncrementTick+0x20c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a6d      	ldr	r2, [pc, #436]	; (8002158 <xTaskIncrementTick+0x208>)
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	4a6d      	ldr	r2, [pc, #436]	; (800215c <xTaskIncrementTick+0x20c>)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b6c      	ldr	r3, [pc, #432]	; (8002160 <xTaskIncrementTick+0x210>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	4a6b      	ldr	r2, [pc, #428]	; (8002160 <xTaskIncrementTick+0x210>)
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	f000 f97b 	bl	80022b0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001fba:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <xTaskIncrementTick+0x214>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a3a      	ldr	r2, [r7, #32]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	f0c0 80a6 	bcc.w	8002112 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fc6:	4b64      	ldr	r3, [pc, #400]	; (8002158 <xTaskIncrementTick+0x208>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d104      	bne.n	8001fda <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fd0:	4b64      	ldr	r3, [pc, #400]	; (8002164 <xTaskIncrementTick+0x214>)
 8001fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd6:	601a      	str	r2, [r3, #0]
                    break;
 8001fd8:	e09b      	b.n	8002112 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fda:	4b5f      	ldr	r3, [pc, #380]	; (8002158 <xTaskIncrementTick+0x208>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001fea:	6a3a      	ldr	r2, [r7, #32]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d203      	bcs.n	8001ffa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001ff2:	4a5c      	ldr	r2, [pc, #368]	; (8002164 <xTaskIncrementTick+0x214>)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001ff8:	e08b      	b.n	8002112 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	68d2      	ldr	r2, [r2, #12]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	6892      	ldr	r2, [r2, #8]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	3304      	adds	r3, #4
 800201c:	429a      	cmp	r2, r3
 800201e:	d103      	bne.n	8002028 <xTaskIncrementTick+0xd8>
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2200      	movs	r2, #0
 800202c:	615a      	str	r2, [r3, #20]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	1e5a      	subs	r2, r3, #1
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	2b00      	cmp	r3, #0
 800203e:	d01e      	beq.n	800207e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	6a12      	ldr	r2, [r2, #32]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	69d2      	ldr	r2, [r2, #28]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	3318      	adds	r3, #24
 8002062:	429a      	cmp	r2, r3
 8002064:	d103      	bne.n	800206e <xTaskIncrementTick+0x11e>
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	6a1a      	ldr	r2, [r3, #32]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2200      	movs	r2, #0
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	1e5a      	subs	r2, r3, #1
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	2201      	movs	r2, #1
 8002084:	409a      	lsls	r2, r3
 8002086:	4b38      	ldr	r3, [pc, #224]	; (8002168 <xTaskIncrementTick+0x218>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	4a36      	ldr	r2, [pc, #216]	; (8002168 <xTaskIncrementTick+0x218>)
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002094:	4935      	ldr	r1, [pc, #212]	; (800216c <xTaskIncrementTick+0x21c>)
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	3304      	adds	r3, #4
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	3204      	adds	r2, #4
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	1d1a      	adds	r2, r3, #4
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4a26      	ldr	r2, [pc, #152]	; (800216c <xTaskIncrementTick+0x21c>)
 80020d4:	441a      	add	r2, r3
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	615a      	str	r2, [r3, #20]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020de:	4923      	ldr	r1, [pc, #140]	; (800216c <xTaskIncrementTick+0x21c>)
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	1c59      	adds	r1, r3, #1
 80020ee:	481f      	ldr	r0, [pc, #124]	; (800216c <xTaskIncrementTick+0x21c>)
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4403      	add	r3, r0
 80020fa:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002100:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <xTaskIncrementTick+0x220>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	429a      	cmp	r2, r3
 8002108:	f67f af5d 	bls.w	8001fc6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800210c:	2301      	movs	r3, #1
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002110:	e759      	b.n	8001fc6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <xTaskIncrementTick+0x220>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002118:	4914      	ldr	r1, [pc, #80]	; (800216c <xTaskIncrementTick+0x21c>)
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d901      	bls.n	800212e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800212a:	2301      	movs	r3, #1
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <xTaskIncrementTick+0x224>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002136:	2301      	movs	r3, #1
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
 800213a:	e004      	b.n	8002146 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800213c:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <xTaskIncrementTick+0x228>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <xTaskIncrementTick+0x228>)
 8002144:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002148:	4618      	mov	r0, r3
 800214a:	3728      	adds	r7, #40	; 0x28
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000170 	.word	0x20000170
 8002154:	20000150 	.word	0x20000150
 8002158:	20000108 	.word	0x20000108
 800215c:	2000010c 	.word	0x2000010c
 8002160:	20000164 	.word	0x20000164
 8002164:	2000016c 	.word	0x2000016c
 8002168:	20000154 	.word	0x20000154
 800216c:	2000007c 	.word	0x2000007c
 8002170:	20000078 	.word	0x20000078
 8002174:	20000160 	.word	0x20000160
 8002178:	2000015c 	.word	0x2000015c

0800217c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002182:	4b26      	ldr	r3, [pc, #152]	; (800221c <vTaskSwitchContext+0xa0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800218a:	4b25      	ldr	r3, [pc, #148]	; (8002220 <vTaskSwitchContext+0xa4>)
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002190:	e03f      	b.n	8002212 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002192:	4b23      	ldr	r3, [pc, #140]	; (8002220 <vTaskSwitchContext+0xa4>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002198:	4b22      	ldr	r3, [pc, #136]	; (8002224 <vTaskSwitchContext+0xa8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80021a6:	7afb      	ldrb	r3, [r7, #11]
 80021a8:	f1c3 031f 	rsb	r3, r3, #31
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	491e      	ldr	r1, [pc, #120]	; (8002228 <vTaskSwitchContext+0xac>)
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10a      	bne.n	80021d8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80021c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c6:	f383 8811 	msr	BASEPRI, r3
 80021ca:	f3bf 8f6f 	isb	sy
 80021ce:	f3bf 8f4f 	dsb	sy
 80021d2:	607b      	str	r3, [r7, #4]
    }
 80021d4:	bf00      	nop
 80021d6:	e7fe      	b.n	80021d6 <vTaskSwitchContext+0x5a>
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4a11      	ldr	r2, [pc, #68]	; (8002228 <vTaskSwitchContext+0xac>)
 80021e4:	4413      	add	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	3308      	adds	r3, #8
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d104      	bne.n	8002208 <vTaskSwitchContext+0x8c>
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <vTaskSwitchContext+0xb0>)
 8002210:	6013      	str	r3, [r2, #0]
}
 8002212:	bf00      	nop
 8002214:	371c      	adds	r7, #28
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	20000170 	.word	0x20000170
 8002220:	20000160 	.word	0x20000160
 8002224:	20000154 	.word	0x20000154
 8002228:	2000007c 	.word	0x2000007c
 800222c:	20000078 	.word	0x20000078

08002230 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	e00c      	b.n	8002256 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <prvInitialiseTaskLists+0x60>)
 8002248:	4413      	add	r3, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff face 	bl	80017ec <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3301      	adds	r3, #1
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b04      	cmp	r3, #4
 800225a:	d9ef      	bls.n	800223c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800225c:	480d      	ldr	r0, [pc, #52]	; (8002294 <prvInitialiseTaskLists+0x64>)
 800225e:	f7ff fac5 	bl	80017ec <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002262:	480d      	ldr	r0, [pc, #52]	; (8002298 <prvInitialiseTaskLists+0x68>)
 8002264:	f7ff fac2 	bl	80017ec <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002268:	480c      	ldr	r0, [pc, #48]	; (800229c <prvInitialiseTaskLists+0x6c>)
 800226a:	f7ff fabf 	bl	80017ec <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800226e:	480c      	ldr	r0, [pc, #48]	; (80022a0 <prvInitialiseTaskLists+0x70>)
 8002270:	f7ff fabc 	bl	80017ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002274:	480b      	ldr	r0, [pc, #44]	; (80022a4 <prvInitialiseTaskLists+0x74>)
 8002276:	f7ff fab9 	bl	80017ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <prvInitialiseTaskLists+0x78>)
 800227c:	4a05      	ldr	r2, [pc, #20]	; (8002294 <prvInitialiseTaskLists+0x64>)
 800227e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <prvInitialiseTaskLists+0x7c>)
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <prvInitialiseTaskLists+0x68>)
 8002284:	601a      	str	r2, [r3, #0]
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000007c 	.word	0x2000007c
 8002294:	200000e0 	.word	0x200000e0
 8002298:	200000f4 	.word	0x200000f4
 800229c:	20000110 	.word	0x20000110
 80022a0:	20000124 	.word	0x20000124
 80022a4:	20000138 	.word	0x20000138
 80022a8:	20000108 	.word	0x20000108
 80022ac:	2000010c 	.word	0x2000010c

080022b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <prvResetNextTaskUnblockTime+0x2c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d104      	bne.n	80022c8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <prvResetNextTaskUnblockTime+0x30>)
 80022c0:	f04f 32ff 	mov.w	r2, #4294967295
 80022c4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80022c6:	e005      	b.n	80022d4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <prvResetNextTaskUnblockTime+0x2c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a03      	ldr	r2, [pc, #12]	; (80022e0 <prvResetNextTaskUnblockTime+0x30>)
 80022d2:	6013      	str	r3, [r2, #0]
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	20000108 	.word	0x20000108
 80022e0:	2000016c 	.word	0x2000016c

080022e4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80022ee:	4b36      	ldr	r3, [pc, #216]	; (80023c8 <prvAddCurrentTaskToDelayedList+0xe4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022f4:	4b35      	ldr	r3, [pc, #212]	; (80023cc <prvAddCurrentTaskToDelayedList+0xe8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3304      	adds	r3, #4
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fad9 	bl	80018b2 <uxListRemove>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10b      	bne.n	800231e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002306:	4b31      	ldr	r3, [pc, #196]	; (80023cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	2201      	movs	r2, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	4b2e      	ldr	r3, [pc, #184]	; (80023d0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4013      	ands	r3, r2
 800231a:	4a2d      	ldr	r2, [pc, #180]	; (80023d0 <prvAddCurrentTaskToDelayedList+0xec>)
 800231c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d124      	bne.n	8002370 <prvAddCurrentTaskToDelayedList+0x8c>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d021      	beq.n	8002370 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800232c:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	4b26      	ldr	r3, [pc, #152]	; (80023cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	4b24      	ldr	r3, [pc, #144]	; (80023cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	6892      	ldr	r2, [r2, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	4b21      	ldr	r3, [pc, #132]	; (80023cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	3204      	adds	r2, #4
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	1d1a      	adds	r2, r3, #4
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002360:	615a      	str	r2, [r3, #20]
 8002362:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	4a1a      	ldr	r2, [pc, #104]	; (80023d4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800236e:	e026      	b.n	80023be <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002378:	4b14      	ldr	r3, [pc, #80]	; (80023cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	429a      	cmp	r2, r3
 8002386:	d209      	bcs.n	800239c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	3304      	adds	r3, #4
 8002392:	4619      	mov	r1, r3
 8002394:	4610      	mov	r0, r2
 8002396:	f7ff fa54 	bl	8001842 <vListInsert>
}
 800239a:	e010      	b.n	80023be <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <prvAddCurrentTaskToDelayedList+0xf8>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <prvAddCurrentTaskToDelayedList+0xe8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	3304      	adds	r3, #4
 80023a6:	4619      	mov	r1, r3
 80023a8:	4610      	mov	r0, r2
 80023aa:	f7ff fa4a 	bl	8001842 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d202      	bcs.n	80023be <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80023b8:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6013      	str	r3, [r2, #0]
}
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000150 	.word	0x20000150
 80023cc:	20000078 	.word	0x20000078
 80023d0:	20000154 	.word	0x20000154
 80023d4:	20000138 	.word	0x20000138
 80023d8:	2000010c 	.word	0x2000010c
 80023dc:	20000108 	.word	0x20000108
 80023e0:	2000016c 	.word	0x2000016c

080023e4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3b04      	subs	r3, #4
 80023f4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3b04      	subs	r3, #4
 8002402:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f023 0201 	bic.w	r2, r3, #1
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	3b04      	subs	r3, #4
 8002412:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002414:	4a08      	ldr	r2, [pc, #32]	; (8002438 <pxPortInitialiseStack+0x54>)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3b14      	subs	r3, #20
 800241e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	3b20      	subs	r3, #32
 800242a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800242c:	68fb      	ldr	r3, [r7, #12]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	0800243d 	.word	0x0800243d

0800243c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <prvTaskExitError+0x54>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244e:	d00a      	beq.n	8002466 <prvTaskExitError+0x2a>
        __asm volatile
 8002450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	60fb      	str	r3, [r7, #12]
    }
 8002462:	bf00      	nop
 8002464:	e7fe      	b.n	8002464 <prvTaskExitError+0x28>
        __asm volatile
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	60bb      	str	r3, [r7, #8]
    }
 8002478:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800247a:	bf00      	nop
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0fc      	beq.n	800247c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002482:	bf00      	nop
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	2000000c 	.word	0x2000000c
	...

080024a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <pxCurrentTCBConst2>)
 80024a2:	6819      	ldr	r1, [r3, #0]
 80024a4:	6808      	ldr	r0, [r1, #0]
 80024a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80024aa:	f380 8809 	msr	PSP, r0
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f04f 0000 	mov.w	r0, #0
 80024b6:	f380 8811 	msr	BASEPRI, r0
 80024ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80024be:	4770      	bx	lr

080024c0 <pxCurrentTCBConst2>:
 80024c0:	20000078 	.word	0x20000078
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop

080024c8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
        __asm volatile
 80024ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d2:	f383 8811 	msr	BASEPRI, r3
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	f3bf 8f4f 	dsb	sy
 80024de:	607b      	str	r3, [r7, #4]
    }
 80024e0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80024e2:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <vPortEnterCritical+0x58>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3301      	adds	r3, #1
 80024e8:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <vPortEnterCritical+0x58>)
 80024ea:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <vPortEnterCritical+0x58>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d10f      	bne.n	8002514 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <vPortEnterCritical+0x5c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <vPortEnterCritical+0x4c>
        __asm volatile
 80024fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002502:	f383 8811 	msr	BASEPRI, r3
 8002506:	f3bf 8f6f 	isb	sy
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	603b      	str	r3, [r7, #0]
    }
 8002510:	bf00      	nop
 8002512:	e7fe      	b.n	8002512 <vPortEnterCritical+0x4a>
    }
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	2000000c 	.word	0x2000000c
 8002524:	e000ed04 	.word	0xe000ed04

08002528 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <vPortExitCritical+0x4c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10a      	bne.n	800254c <vPortExitCritical+0x24>
        __asm volatile
 8002536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	607b      	str	r3, [r7, #4]
    }
 8002548:	bf00      	nop
 800254a:	e7fe      	b.n	800254a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <vPortExitCritical+0x4c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3b01      	subs	r3, #1
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <vPortExitCritical+0x4c>)
 8002554:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002556:	4b07      	ldr	r3, [pc, #28]	; (8002574 <vPortExitCritical+0x4c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d105      	bne.n	800256a <vPortExitCritical+0x42>
 800255e:	2300      	movs	r3, #0
 8002560:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002568:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	2000000c 	.word	0x2000000c
	...

08002580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002580:	f3ef 8009 	mrs	r0, PSP
 8002584:	f3bf 8f6f 	isb	sy
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <pxCurrentTCBConst>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002590:	6010      	str	r0, [r2, #0]
 8002592:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002596:	f04f 0050 	mov.w	r0, #80	; 0x50
 800259a:	f380 8811 	msr	BASEPRI, r0
 800259e:	f7ff fded 	bl	800217c <vTaskSwitchContext>
 80025a2:	f04f 0000 	mov.w	r0, #0
 80025a6:	f380 8811 	msr	BASEPRI, r0
 80025aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80025ae:	6819      	ldr	r1, [r3, #0]
 80025b0:	6808      	ldr	r0, [r1, #0]
 80025b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80025b6:	f380 8809 	msr	PSP, r0
 80025ba:	f3bf 8f6f 	isb	sy
 80025be:	4770      	bx	lr

080025c0 <pxCurrentTCBConst>:
 80025c0:	20000078 	.word	0x20000078
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop

080025c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
        __asm volatile
 80025ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d2:	f383 8811 	msr	BASEPRI, r3
 80025d6:	f3bf 8f6f 	isb	sy
 80025da:	f3bf 8f4f 	dsb	sy
 80025de:	607b      	str	r3, [r7, #4]
    }
 80025e0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80025e2:	f7ff fcb5 	bl	8001f50 <xTaskIncrementTick>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <SysTick_Handler+0x40>)
 80025ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	2300      	movs	r3, #0
 80025f6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f383 8811 	msr	BASEPRI, r3
    }
 80025fe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	e000ed04 	.word	0xe000ed04

0800260c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002618:	f7ff fb90 	bl	8001d3c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800261c:	4b53      	ldr	r3, [pc, #332]	; (800276c <pvPortMalloc+0x160>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002624:	f000 f908 	bl	8002838 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d012      	beq.n	8002654 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800262e:	2208      	movs	r2, #8
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	3308      	adds	r3, #8
 800263a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	43db      	mvns	r3, r3
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	429a      	cmp	r2, r3
 8002644:	d804      	bhi.n	8002650 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	e001      	b.n	8002654 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	db70      	blt.n	800273c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d06d      	beq.n	800273c <pvPortMalloc+0x130>
 8002660:	4b43      	ldr	r3, [pc, #268]	; (8002770 <pvPortMalloc+0x164>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	429a      	cmp	r2, r3
 8002668:	d868      	bhi.n	800273c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800266a:	4b42      	ldr	r3, [pc, #264]	; (8002774 <pvPortMalloc+0x168>)
 800266c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800266e:	4b41      	ldr	r3, [pc, #260]	; (8002774 <pvPortMalloc+0x168>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002674:	e004      	b.n	8002680 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	429a      	cmp	r2, r3
 8002688:	d903      	bls.n	8002692 <pvPortMalloc+0x86>
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f1      	bne.n	8002676 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002692:	4b36      	ldr	r3, [pc, #216]	; (800276c <pvPortMalloc+0x160>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002698:	429a      	cmp	r2, r3
 800269a:	d04f      	beq.n	800273c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2208      	movs	r2, #8
 80026a2:	4413      	add	r3, r2
 80026a4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	1ad2      	subs	r2, r2, r3
 80026b6:	2308      	movs	r3, #8
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d91f      	bls.n	80026fe <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80026be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <pvPortMalloc+0xda>
        __asm volatile
 80026d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	613b      	str	r3, [r7, #16]
    }
 80026e2:	bf00      	nop
 80026e4:	e7fe      	b.n	80026e4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	1ad2      	subs	r2, r2, r3
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80026f8:	6978      	ldr	r0, [r7, #20]
 80026fa:	f000 f8f9 	bl	80028f0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80026fe:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <pvPortMalloc+0x164>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	4a19      	ldr	r2, [pc, #100]	; (8002770 <pvPortMalloc+0x164>)
 800270a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800270c:	4b18      	ldr	r3, [pc, #96]	; (8002770 <pvPortMalloc+0x164>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <pvPortMalloc+0x16c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d203      	bcs.n	8002720 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002718:	4b15      	ldr	r3, [pc, #84]	; (8002770 <pvPortMalloc+0x164>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a16      	ldr	r2, [pc, #88]	; (8002778 <pvPortMalloc+0x16c>)
 800271e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <pvPortMalloc+0x170>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	3301      	adds	r3, #1
 8002738:	4a10      	ldr	r2, [pc, #64]	; (800277c <pvPortMalloc+0x170>)
 800273a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800273c:	f7ff fb0c 	bl	8001d58 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <pvPortMalloc+0x154>
        __asm volatile
 800274a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274e:	f383 8811 	msr	BASEPRI, r3
 8002752:	f3bf 8f6f 	isb	sy
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	60fb      	str	r3, [r7, #12]
    }
 800275c:	bf00      	nop
 800275e:	e7fe      	b.n	800275e <pvPortMalloc+0x152>
    return pvReturn;
 8002760:	69fb      	ldr	r3, [r7, #28]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3728      	adds	r7, #40	; 0x28
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	2000297c 	.word	0x2000297c
 8002770:	20002980 	.word	0x20002980
 8002774:	20002974 	.word	0x20002974
 8002778:	20002984 	.word	0x20002984
 800277c:	20002988 	.word	0x20002988

08002780 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d049      	beq.n	8002826 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002792:	2308      	movs	r3, #8
 8002794:	425b      	negs	r3, r3
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4413      	add	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	db0a      	blt.n	80027be <vPortFree+0x3e>
        __asm volatile
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	60fb      	str	r3, [r7, #12]
    }
 80027ba:	bf00      	nop
 80027bc:	e7fe      	b.n	80027bc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <vPortFree+0x5c>
        __asm volatile
 80027c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	60bb      	str	r3, [r7, #8]
    }
 80027d8:	bf00      	nop
 80027da:	e7fe      	b.n	80027da <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	0fdb      	lsrs	r3, r3, #31
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01c      	beq.n	8002826 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d118      	bne.n	8002826 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002800:	f7ff fa9c 	bl	8001d3c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <vPortFree+0xb0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4413      	add	r3, r2
 800280e:	4a08      	ldr	r2, [pc, #32]	; (8002830 <vPortFree+0xb0>)
 8002810:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002812:	6938      	ldr	r0, [r7, #16]
 8002814:	f000 f86c 	bl	80028f0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <vPortFree+0xb4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3301      	adds	r3, #1
 800281e:	4a05      	ldr	r2, [pc, #20]	; (8002834 <vPortFree+0xb4>)
 8002820:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002822:	f7ff fa99 	bl	8001d58 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002826:	bf00      	nop
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20002980 	.word	0x20002980
 8002834:	2000298c 	.word	0x2000298c

08002838 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800283e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002842:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002844:	4b25      	ldr	r3, [pc, #148]	; (80028dc <prvHeapInit+0xa4>)
 8002846:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00c      	beq.n	800286c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3307      	adds	r3, #7
 8002856:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0307 	bic.w	r3, r3, #7
 800285e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	4a1d      	ldr	r2, [pc, #116]	; (80028dc <prvHeapInit+0xa4>)
 8002868:	4413      	add	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002870:	4a1b      	ldr	r2, [pc, #108]	; (80028e0 <prvHeapInit+0xa8>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <prvHeapInit+0xa8>)
 8002878:	2200      	movs	r2, #0
 800287a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	4413      	add	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002884:	2208      	movs	r2, #8
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0307 	bic.w	r3, r3, #7
 8002892:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a13      	ldr	r2, [pc, #76]	; (80028e4 <prvHeapInit+0xac>)
 8002898:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <prvHeapInit+0xac>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2200      	movs	r2, #0
 80028a0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <prvHeapInit+0xac>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	1ad2      	subs	r2, r2, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <prvHeapInit+0xac>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	4a08      	ldr	r2, [pc, #32]	; (80028e8 <prvHeapInit+0xb0>)
 80028c6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a07      	ldr	r2, [pc, #28]	; (80028ec <prvHeapInit+0xb4>)
 80028ce:	6013      	str	r3, [r2, #0]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000174 	.word	0x20000174
 80028e0:	20002974 	.word	0x20002974
 80028e4:	2000297c 	.word	0x2000297c
 80028e8:	20002984 	.word	0x20002984
 80028ec:	20002980 	.word	0x20002980

080028f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80028f8:	4b27      	ldr	r3, [pc, #156]	; (8002998 <prvInsertBlockIntoFreeList+0xa8>)
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	e002      	b.n	8002904 <prvInsertBlockIntoFreeList+0x14>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	429a      	cmp	r2, r3
 800290c:	d8f7      	bhi.n	80028fe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	4413      	add	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	d108      	bne.n	8002932 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	441a      	add	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	441a      	add	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d118      	bne.n	8002978 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4b14      	ldr	r3, [pc, #80]	; (800299c <prvInsertBlockIntoFreeList+0xac>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d00d      	beq.n	800296e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	441a      	add	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e008      	b.n	8002980 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <prvInsertBlockIntoFreeList+0xac>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e003      	b.n	8002980 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	429a      	cmp	r2, r3
 8002986:	d002      	beq.n	800298e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	20002974 	.word	0x20002974
 800299c:	2000297c 	.word	0x2000297c

080029a0 <memset>:
 80029a0:	4603      	mov	r3, r0
 80029a2:	4402      	add	r2, r0
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d100      	bne.n	80029aa <memset+0xa>
 80029a8:	4770      	bx	lr
 80029aa:	f803 1b01 	strb.w	r1, [r3], #1
 80029ae:	e7f9      	b.n	80029a4 <memset+0x4>

080029b0 <__libc_init_array>:
 80029b0:	b570      	push	{r4, r5, r6, lr}
 80029b2:	2600      	movs	r6, #0
 80029b4:	4d0c      	ldr	r5, [pc, #48]	; (80029e8 <__libc_init_array+0x38>)
 80029b6:	4c0d      	ldr	r4, [pc, #52]	; (80029ec <__libc_init_array+0x3c>)
 80029b8:	1b64      	subs	r4, r4, r5
 80029ba:	10a4      	asrs	r4, r4, #2
 80029bc:	42a6      	cmp	r6, r4
 80029be:	d109      	bne.n	80029d4 <__libc_init_array+0x24>
 80029c0:	f000 f81a 	bl	80029f8 <_init>
 80029c4:	2600      	movs	r6, #0
 80029c6:	4d0a      	ldr	r5, [pc, #40]	; (80029f0 <__libc_init_array+0x40>)
 80029c8:	4c0a      	ldr	r4, [pc, #40]	; (80029f4 <__libc_init_array+0x44>)
 80029ca:	1b64      	subs	r4, r4, r5
 80029cc:	10a4      	asrs	r4, r4, #2
 80029ce:	42a6      	cmp	r6, r4
 80029d0:	d105      	bne.n	80029de <__libc_init_array+0x2e>
 80029d2:	bd70      	pop	{r4, r5, r6, pc}
 80029d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d8:	4798      	blx	r3
 80029da:	3601      	adds	r6, #1
 80029dc:	e7ee      	b.n	80029bc <__libc_init_array+0xc>
 80029de:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e2:	4798      	blx	r3
 80029e4:	3601      	adds	r6, #1
 80029e6:	e7f2      	b.n	80029ce <__libc_init_array+0x1e>
 80029e8:	08002a54 	.word	0x08002a54
 80029ec:	08002a54 	.word	0x08002a54
 80029f0:	08002a54 	.word	0x08002a54
 80029f4:	08002a58 	.word	0x08002a58

080029f8 <_init>:
 80029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fa:	bf00      	nop
 80029fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fe:	bc08      	pop	{r3}
 8002a00:	469e      	mov	lr, r3
 8002a02:	4770      	bx	lr

08002a04 <_fini>:
 8002a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a06:	bf00      	nop
 8002a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0a:	bc08      	pop	{r3}
 8002a0c:	469e      	mov	lr, r3
 8002a0e:	4770      	bx	lr
