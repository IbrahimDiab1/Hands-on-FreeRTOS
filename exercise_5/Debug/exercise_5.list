
exercise_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fec  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080040fc  080040fc  000140fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800414c  0800414c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800414c  0800414c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800414c  0800414c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800414c  0800414c  0001414c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004150  08004150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a1c  20000014  08004168  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a30  08004168  00022a30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eff8  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002594  00000000  00000000  0002f078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00008000  00000000  00000000  0003160c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e80  00000000  00000000  00039610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000d68  00000000  00000000  0003a490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017f9e  00000000  00000000  0003b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fddd  00000000  00000000  00053196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009052a  00000000  00000000  00062f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ba4  00000000  00000000  000f34a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	080040e4 	.word	0x080040e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	080040e4 	.word	0x080040e4

08000150 <Task_1_Handler>:

/* USER CODE BEGIN PV */
    TaskHandle_t Task_1_handle =NULL, Task_2_handle= NULL, Task_3_handle =NULL, next_handle;

void Task_1_Handler(void * parameters)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b086      	sub	sp, #24
 8000154:	af02      	add	r7, sp, #8
 8000156:	6078      	str	r0, [r7, #4]
	BaseType_t ret = pdFALSE;
 8000158:	2300      	movs	r3, #0
 800015a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800015c:	2101      	movs	r1, #1
 800015e:	4810      	ldr	r0, [pc, #64]	; (80001a0 <Task_1_Handler+0x50>)
 8000160:	f000 fd2a 	bl	8000bb8 <HAL_GPIO_TogglePin>
		ret = xTaskNotifyWait( 0, 0, NULL,pdMS_TO_TICKS(500));
 8000164:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000168:	9300      	str	r3, [sp, #0]
 800016a:	2300      	movs	r3, #0
 800016c:	2200      	movs	r2, #0
 800016e:	2100      	movs	r1, #0
 8000170:	2000      	movs	r0, #0
 8000172:	f002 fee3 	bl	8002f3c <xTaskGenericNotifyWait>
 8000176:	60f8      	str	r0, [r7, #12]

		if(ret == pdTRUE)
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	2b01      	cmp	r3, #1
 800017c:	d1ee      	bne.n	800015c <Task_1_Handler+0xc>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800017e:	2201      	movs	r2, #1
 8000180:	2101      	movs	r1, #1
 8000182:	4807      	ldr	r0, [pc, #28]	; (80001a0 <Task_1_Handler+0x50>)
 8000184:	f000 fd00 	bl	8000b88 <HAL_GPIO_WritePin>

			taskENTER_CRITICAL();
 8000188:	f003 fcaa 	bl	8003ae0 <vPortEnterCritical>
			next_handle = Task_2_handle;
 800018c:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <Task_1_Handler+0x54>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a05      	ldr	r2, [pc, #20]	; (80001a8 <Task_1_Handler+0x58>)
 8000192:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8000194:	f003 fcd4 	bl	8003b40 <vPortExitCritical>

			vTaskDelete( NULL);
 8000198:	2000      	movs	r0, #0
 800019a:	f002 f8cb 	bl	8002334 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800019e:	e7dd      	b.n	800015c <Task_1_Handler+0xc>
 80001a0:	40010800 	.word	0x40010800
 80001a4:	20000034 	.word	0x20000034
 80001a8:	2000003c 	.word	0x2000003c

080001ac <Task_2_Handler>:
	}
}


void Task_2_Handler(void * parameters)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	6078      	str	r0, [r7, #4]
	BaseType_t ret = pdFALSE;
 80001b4:	2300      	movs	r3, #0
 80001b6:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80001b8:	2102      	movs	r1, #2
 80001ba:	4810      	ldr	r0, [pc, #64]	; (80001fc <Task_2_Handler+0x50>)
 80001bc:	f000 fcfc 	bl	8000bb8 <HAL_GPIO_TogglePin>
		ret = xTaskNotifyWait( 0, 0, NULL,pdMS_TO_TICKS(500));
 80001c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001c4:	9300      	str	r3, [sp, #0]
 80001c6:	2300      	movs	r3, #0
 80001c8:	2200      	movs	r2, #0
 80001ca:	2100      	movs	r1, #0
 80001cc:	2000      	movs	r0, #0
 80001ce:	f002 feb5 	bl	8002f3c <xTaskGenericNotifyWait>
 80001d2:	60f8      	str	r0, [r7, #12]

		if(ret == pdTRUE)
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	2b01      	cmp	r3, #1
 80001d8:	d1ee      	bne.n	80001b8 <Task_2_Handler+0xc>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80001da:	2201      	movs	r2, #1
 80001dc:	2102      	movs	r1, #2
 80001de:	4807      	ldr	r0, [pc, #28]	; (80001fc <Task_2_Handler+0x50>)
 80001e0:	f000 fcd2 	bl	8000b88 <HAL_GPIO_WritePin>

			taskENTER_CRITICAL();
 80001e4:	f003 fc7c 	bl	8003ae0 <vPortEnterCritical>
			next_handle = Task_3_handle;
 80001e8:	4b05      	ldr	r3, [pc, #20]	; (8000200 <Task_2_Handler+0x54>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a05      	ldr	r2, [pc, #20]	; (8000204 <Task_2_Handler+0x58>)
 80001ee:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80001f0:	f003 fca6 	bl	8003b40 <vPortExitCritical>

			vTaskDelete( NULL);
 80001f4:	2000      	movs	r0, #0
 80001f6:	f002 f89d 	bl	8002334 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80001fa:	e7dd      	b.n	80001b8 <Task_2_Handler+0xc>
 80001fc:	40010800 	.word	0x40010800
 8000200:	20000038 	.word	0x20000038
 8000204:	2000003c 	.word	0x2000003c

08000208 <Task_3_Handler>:
	}
}


void Task_3_Handler(void * parameters)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b086      	sub	sp, #24
 800020c:	af02      	add	r7, sp, #8
 800020e:	6078      	str	r0, [r7, #4]
	BaseType_t ret = pdFALSE;
 8000210:	2300      	movs	r3, #0
 8000212:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000214:	2104      	movs	r1, #4
 8000216:	4810      	ldr	r0, [pc, #64]	; (8000258 <Task_3_Handler+0x50>)
 8000218:	f000 fcce 	bl	8000bb8 <HAL_GPIO_TogglePin>
		ret = xTaskNotifyWait( 0, 0, NULL,pdMS_TO_TICKS(500));
 800021c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	2300      	movs	r3, #0
 8000224:	2200      	movs	r2, #0
 8000226:	2100      	movs	r1, #0
 8000228:	2000      	movs	r0, #0
 800022a:	f002 fe87 	bl	8002f3c <xTaskGenericNotifyWait>
 800022e:	60f8      	str	r0, [r7, #12]

		if(ret == pdTRUE)
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d1ee      	bne.n	8000214 <Task_3_Handler+0xc>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000236:	2201      	movs	r2, #1
 8000238:	2104      	movs	r1, #4
 800023a:	4807      	ldr	r0, [pc, #28]	; (8000258 <Task_3_Handler+0x50>)
 800023c:	f000 fca4 	bl	8000b88 <HAL_GPIO_WritePin>

			taskENTER_CRITICAL();
 8000240:	f003 fc4e 	bl	8003ae0 <vPortEnterCritical>
			next_handle = NULL;
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <Task_3_Handler+0x54>)
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 800024a:	f003 fc79 	bl	8003b40 <vPortExitCritical>

			vTaskDelete( NULL);
 800024e:	2000      	movs	r0, #0
 8000250:	f002 f870 	bl	8002334 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000254:	e7de      	b.n	8000214 <Task_3_Handler+0xc>
 8000256:	bf00      	nop
 8000258:	40010800 	.word	0x40010800
 800025c:	2000003c 	.word	0x2000003c

08000260 <sendNotification>:
	}
}


sendNotification()
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af02      	add	r7, sp, #8
	BaseType_t xHigherPriorityTaskWoken;
	xTaskNotifyFromISR( next_handle, 0, eNoAction, &xHigherPriorityTaskWoken );
 8000266:	4b0d      	ldr	r3, [pc, #52]	; (800029c <sendNotification+0x3c>)
 8000268:	6818      	ldr	r0, [r3, #0]
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	9301      	str	r3, [sp, #4]
 800026e:	2300      	movs	r3, #0
 8000270:	9300      	str	r3, [sp, #0]
 8000272:	2300      	movs	r3, #0
 8000274:	2200      	movs	r2, #0
 8000276:	2100      	movs	r1, #0
 8000278:	f002 fee0 	bl	800303c <xTaskGenericNotifyFromISR>

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d007      	beq.n	8000292 <sendNotification+0x32>
 8000282:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <sendNotification+0x40>)
 8000284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	f3bf 8f4f 	dsb	sy
 800028e:	f3bf 8f6f 	isb	sy
}
 8000292:	bf00      	nop
 8000294:	4618      	mov	r0, r3
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	2000003c 	.word	0x2000003c
 80002a0:	e000ed04 	.word	0xe000ed04

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002aa:	f000 f9d7 	bl	800065c <HAL_Init>
  /* USER CODE BEGIN Init */
  	BaseType_t Task_return;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ae:	f000 f83b 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b2:	f000 f875 	bl	80003a0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Task_return = xTaskCreate( Task_1_Handler, "Toggle_1", 100, NULL, 1, &Task_1_handle );
 80002b6:	4b14      	ldr	r3, [pc, #80]	; (8000308 <main+0x64>)
 80002b8:	9301      	str	r3, [sp, #4]
 80002ba:	2301      	movs	r3, #1
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	2300      	movs	r3, #0
 80002c0:	2264      	movs	r2, #100	; 0x64
 80002c2:	4912      	ldr	r1, [pc, #72]	; (800030c <main+0x68>)
 80002c4:	4812      	ldr	r0, [pc, #72]	; (8000310 <main+0x6c>)
 80002c6:	f001 fecb 	bl	8002060 <xTaskCreate>
 80002ca:	6078      	str	r0, [r7, #4]
  Task_return = xTaskCreate( Task_2_Handler, "Toggle_1", 100, NULL, 2, &Task_2_handle );
 80002cc:	4b11      	ldr	r3, [pc, #68]	; (8000314 <main+0x70>)
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	2302      	movs	r3, #2
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2300      	movs	r3, #0
 80002d6:	2264      	movs	r2, #100	; 0x64
 80002d8:	490c      	ldr	r1, [pc, #48]	; (800030c <main+0x68>)
 80002da:	480f      	ldr	r0, [pc, #60]	; (8000318 <main+0x74>)
 80002dc:	f001 fec0 	bl	8002060 <xTaskCreate>
 80002e0:	6078      	str	r0, [r7, #4]
  Task_return = xTaskCreate( Task_3_Handler, "Toggle_1", 100, NULL, 3, &Task_3_handle );
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <main+0x78>)
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	2303      	movs	r3, #3
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2300      	movs	r3, #0
 80002ec:	2264      	movs	r2, #100	; 0x64
 80002ee:	4907      	ldr	r1, [pc, #28]	; (800030c <main+0x68>)
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <main+0x7c>)
 80002f2:	f001 feb5 	bl	8002060 <xTaskCreate>
 80002f6:	6078      	str	r0, [r7, #4]

  next_handle= Task_1_handle;
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <main+0x64>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a09      	ldr	r2, [pc, #36]	; (8000324 <main+0x80>)
 80002fe:	6013      	str	r3, [r2, #0]

  vTaskStartScheduler();
 8000300:	f002 f8ac 	bl	800245c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000304:	e7fe      	b.n	8000304 <main+0x60>
 8000306:	bf00      	nop
 8000308:	20000030 	.word	0x20000030
 800030c:	080040fc 	.word	0x080040fc
 8000310:	08000151 	.word	0x08000151
 8000314:	20000034 	.word	0x20000034
 8000318:	080001ad 	.word	0x080001ad
 800031c:	20000038 	.word	0x20000038
 8000320:	08000209 	.word	0x08000209
 8000324:	2000003c 	.word	0x2000003c

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b090      	sub	sp, #64	; 0x40
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	2228      	movs	r2, #40	; 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f003 fe9a 	bl	8004070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034a:	2302      	movs	r3, #2
 800034c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034e:	2301      	movs	r3, #1
 8000350:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000352:	2310      	movs	r3, #16
 8000354:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000356:	2300      	movs	r3, #0
 8000358:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035a:	f107 0318 	add.w	r3, r7, #24
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fc66 	bl	8000c30 <HAL_RCC_OscConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800036a:	f000 f870 	bl	800044e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	230f      	movs	r3, #15
 8000370:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000372:	2300      	movs	r3, #0
 8000374:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fed4 	bl	8001134 <HAL_RCC_ClockConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000392:	f000 f85c 	bl	800044e <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3740      	adds	r7, #64	; 0x40
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a6:	f107 0308 	add.w	r3, r7, #8
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <MX_GPIO_Init+0x84>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a1a      	ldr	r2, [pc, #104]	; (8000424 <MX_GPIO_Init+0x84>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b18      	ldr	r3, [pc, #96]	; (8000424 <MX_GPIO_Init+0x84>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2107      	movs	r1, #7
 80003d0:	4815      	ldr	r0, [pc, #84]	; (8000428 <MX_GPIO_Init+0x88>)
 80003d2:	f000 fbd9 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80003d6:	2307      	movs	r3, #7
 80003d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	2301      	movs	r3, #1
 80003dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	2302      	movs	r3, #2
 80003e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	4619      	mov	r1, r3
 80003ec:	480e      	ldr	r0, [pc, #56]	; (8000428 <MX_GPIO_Init+0x88>)
 80003ee:	f000 fa47 	bl	8000880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003f2:	2308      	movs	r3, #8
 80003f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <MX_GPIO_Init+0x8c>)
 80003f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fe:	f107 0308 	add.w	r3, r7, #8
 8000402:	4619      	mov	r1, r3
 8000404:	4808      	ldr	r0, [pc, #32]	; (8000428 <MX_GPIO_Init+0x88>)
 8000406:	f000 fa3b 	bl	8000880 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	2105      	movs	r1, #5
 800040e:	2009      	movs	r0, #9
 8000410:	f000 fa0b 	bl	800082a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000414:	2009      	movs	r0, #9
 8000416:	f000 fa24 	bl	8000862 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800041a:	bf00      	nop
 800041c:	3718      	adds	r7, #24
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000
 8000428:	40010800 	.word	0x40010800
 800042c:	10110000 	.word	0x10110000

08000430 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000440:	d101      	bne.n	8000446 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000442:	f000 f921 	bl	8000688 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000452:	b672      	cpsid	i
}
 8000454:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000456:	e7fe      	b.n	8000456 <Error_Handler+0x8>

08000458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <HAL_MspInit+0x5c>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	4a14      	ldr	r2, [pc, #80]	; (80004b4 <HAL_MspInit+0x5c>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	6193      	str	r3, [r2, #24]
 800046a:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <HAL_MspInit+0x5c>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000476:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <HAL_MspInit+0x5c>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	4a0e      	ldr	r2, [pc, #56]	; (80004b4 <HAL_MspInit+0x5c>)
 800047c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000480:	61d3      	str	r3, [r2, #28]
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <HAL_MspInit+0x5c>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800048e:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <HAL_MspInit+0x60>)
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <HAL_MspInit+0x60>)
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004aa:	bf00      	nop
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40010000 	.word	0x40010000

080004bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08e      	sub	sp, #56	; 0x38
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80004c4:	2300      	movs	r3, #0
 80004c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80004c8:	2300      	movs	r3, #0
 80004ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004cc:	2300      	movs	r3, #0
 80004ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80004d2:	4b34      	ldr	r3, [pc, #208]	; (80005a4 <HAL_InitTick+0xe8>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a33      	ldr	r2, [pc, #204]	; (80005a4 <HAL_InitTick+0xe8>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b31      	ldr	r3, [pc, #196]	; (80005a4 <HAL_InitTick+0xe8>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004ea:	f107 0210 	add.w	r2, r7, #16
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	4611      	mov	r1, r2
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 ff79 	bl	80013ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004fa:	6a3b      	ldr	r3, [r7, #32]
 80004fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000500:	2b00      	cmp	r3, #0
 8000502:	d103      	bne.n	800050c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000504:	f000 ff5e 	bl	80013c4 <HAL_RCC_GetPCLK1Freq>
 8000508:	6378      	str	r0, [r7, #52]	; 0x34
 800050a:	e004      	b.n	8000516 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800050c:	f000 ff5a 	bl	80013c4 <HAL_RCC_GetPCLK1Freq>
 8000510:	4603      	mov	r3, r0
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000518:	4a23      	ldr	r2, [pc, #140]	; (80005a8 <HAL_InitTick+0xec>)
 800051a:	fba2 2303 	umull	r2, r3, r2, r3
 800051e:	0c9b      	lsrs	r3, r3, #18
 8000520:	3b01      	subs	r3, #1
 8000522:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000524:	4b21      	ldr	r3, [pc, #132]	; (80005ac <HAL_InitTick+0xf0>)
 8000526:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800052a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <HAL_InitTick+0xf0>)
 800052e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000532:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000534:	4a1d      	ldr	r2, [pc, #116]	; (80005ac <HAL_InitTick+0xf0>)
 8000536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000538:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <HAL_InitTick+0xf0>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <HAL_InitTick+0xf0>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <HAL_InitTick+0xf0>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800054c:	4817      	ldr	r0, [pc, #92]	; (80005ac <HAL_InitTick+0xf0>)
 800054e:	f000 ff9b 	bl	8001488 <HAL_TIM_Base_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000558:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800055c:	2b00      	cmp	r3, #0
 800055e:	d11b      	bne.n	8000598 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000560:	4812      	ldr	r0, [pc, #72]	; (80005ac <HAL_InitTick+0xf0>)
 8000562:	f000 ffe9 	bl	8001538 <HAL_TIM_Base_Start_IT>
 8000566:	4603      	mov	r3, r0
 8000568:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800056c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000570:	2b00      	cmp	r3, #0
 8000572:	d111      	bne.n	8000598 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000574:	201c      	movs	r0, #28
 8000576:	f000 f974 	bl	8000862 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b0f      	cmp	r3, #15
 800057e:	d808      	bhi.n	8000592 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000580:	2200      	movs	r2, #0
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	201c      	movs	r0, #28
 8000586:	f000 f950 	bl	800082a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800058a:	4a09      	ldr	r2, [pc, #36]	; (80005b0 <HAL_InitTick+0xf4>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	e002      	b.n	8000598 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000598:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800059c:	4618      	mov	r0, r3
 800059e:	3738      	adds	r7, #56	; 0x38
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40021000 	.word	0x40021000
 80005a8:	431bde83 	.word	0x431bde83
 80005ac:	20000040 	.word	0x20000040
 80005b0:	20000004 	.word	0x20000004

080005b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <NMI_Handler+0x4>

080005ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <HardFault_Handler+0x4>

080005c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <MemManage_Handler+0x4>

080005c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <BusFault_Handler+0x4>

080005cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <UsageFault_Handler+0x4>

080005d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr

080005de <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

	sendNotification();
 80005e2:	f7ff fe3d 	bl	8000260 <sendNotification>
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80005e6:	2008      	movs	r0, #8
 80005e8:	f000 fb00 	bl	8000bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <TIM2_IRQHandler+0x10>)
 80005f6:	f000 fff1 	bl	80015dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000040 	.word	0x20000040

08000604 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000610:	f7ff fff8 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000616:	490c      	ldr	r1, [pc, #48]	; (8000648 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000618:	4a0c      	ldr	r2, [pc, #48]	; (800064c <LoopFillZerobss+0x16>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800061c:	e002      	b.n	8000624 <LoopCopyDataInit>

0800061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000622:	3304      	adds	r3, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000628:	d3f9      	bcc.n	800061e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062a:	4a09      	ldr	r2, [pc, #36]	; (8000650 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800062c:	4c09      	ldr	r4, [pc, #36]	; (8000654 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000630:	e001      	b.n	8000636 <LoopFillZerobss>

08000632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000634:	3204      	adds	r2, #4

08000636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000638:	d3fb      	bcc.n	8000632 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800063a:	f003 fd21 	bl	8004080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063e:	f7ff fe31 	bl	80002a4 <main>
  bx lr
 8000642:	4770      	bx	lr
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800064c:	08004154 	.word	0x08004154
  ldr r2, =_sbss
 8000650:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000654:	20002a30 	.word	0x20002a30

08000658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC1_2_IRQHandler>
	...

0800065c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <HAL_Init+0x28>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <HAL_Init+0x28>)
 8000666:	f043 0310 	orr.w	r3, r3, #16
 800066a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066c:	2003      	movs	r0, #3
 800066e:	f000 f8d1 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000672:	200f      	movs	r0, #15
 8000674:	f7ff ff22 	bl	80004bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000678:	f7ff feee 	bl	8000458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40022000 	.word	0x40022000

08000688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HAL_IncTick+0x1c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_IncTick+0x20>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4413      	add	r3, r2
 8000698:	4a03      	ldr	r2, [pc, #12]	; (80006a8 <HAL_IncTick+0x20>)
 800069a:	6013      	str	r3, [r2, #0]
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	20000008 	.word	0x20000008
 80006a8:	20000088 	.word	0x20000088

080006ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return uwTick;
 80006b0:	4b02      	ldr	r3, [pc, #8]	; (80006bc <HAL_GetTick+0x10>)
 80006b2:	681b      	ldr	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	20000088 	.word	0x20000088

080006c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <__NVIC_SetPriorityGrouping+0x44>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006dc:	4013      	ands	r3, r2
 80006de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f2:	4a04      	ldr	r2, [pc, #16]	; (8000704 <__NVIC_SetPriorityGrouping+0x44>)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	60d3      	str	r3, [r2, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <__NVIC_GetPriorityGrouping+0x18>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	f003 0307 	and.w	r3, r3, #7
}
 8000716:	4618      	mov	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	2b00      	cmp	r3, #0
 8000734:	db0b      	blt.n	800074e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f003 021f 	and.w	r2, r3, #31
 800073c:	4906      	ldr	r1, [pc, #24]	; (8000758 <__NVIC_EnableIRQ+0x34>)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	095b      	lsrs	r3, r3, #5
 8000744:	2001      	movs	r0, #1
 8000746:	fa00 f202 	lsl.w	r2, r0, r2
 800074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	e000e100 	.word	0xe000e100

0800075c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076c:	2b00      	cmp	r3, #0
 800076e:	db0a      	blt.n	8000786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	b2da      	uxtb	r2, r3
 8000774:	490c      	ldr	r1, [pc, #48]	; (80007a8 <__NVIC_SetPriority+0x4c>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	0112      	lsls	r2, r2, #4
 800077c:	b2d2      	uxtb	r2, r2
 800077e:	440b      	add	r3, r1
 8000780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000784:	e00a      	b.n	800079c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4908      	ldr	r1, [pc, #32]	; (80007ac <__NVIC_SetPriority+0x50>)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	f003 030f 	and.w	r3, r3, #15
 8000792:	3b04      	subs	r3, #4
 8000794:	0112      	lsls	r2, r2, #4
 8000796:	b2d2      	uxtb	r2, r2
 8000798:	440b      	add	r3, r1
 800079a:	761a      	strb	r2, [r3, #24]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000e100 	.word	0xe000e100
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b089      	sub	sp, #36	; 0x24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	f1c3 0307 	rsb	r3, r3, #7
 80007ca:	2b04      	cmp	r3, #4
 80007cc:	bf28      	it	cs
 80007ce:	2304      	movcs	r3, #4
 80007d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	3304      	adds	r3, #4
 80007d6:	2b06      	cmp	r3, #6
 80007d8:	d902      	bls.n	80007e0 <NVIC_EncodePriority+0x30>
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	3b03      	subs	r3, #3
 80007de:	e000      	b.n	80007e2 <NVIC_EncodePriority+0x32>
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	f04f 32ff 	mov.w	r2, #4294967295
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	43da      	mvns	r2, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	401a      	ands	r2, r3
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f8:	f04f 31ff 	mov.w	r1, #4294967295
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	43d9      	mvns	r1, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	4313      	orrs	r3, r2
         );
}
 800080a:	4618      	mov	r0, r3
 800080c:	3724      	adds	r7, #36	; 0x24
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff4f 	bl	80006c0 <__NVIC_SetPriorityGrouping>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800083c:	f7ff ff64 	bl	8000708 <__NVIC_GetPriorityGrouping>
 8000840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	6978      	ldr	r0, [r7, #20]
 8000848:	f7ff ffb2 	bl	80007b0 <NVIC_EncodePriority>
 800084c:	4602      	mov	r2, r0
 800084e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff81 	bl	800075c <__NVIC_SetPriority>
}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff57 	bl	8000724 <__NVIC_EnableIRQ>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000880:	b480      	push	{r7}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000892:	e169      	b.n	8000b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000894:	2201      	movs	r2, #1
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	69fa      	ldr	r2, [r7, #28]
 80008a4:	4013      	ands	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	f040 8158 	bne.w	8000b62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	4a9a      	ldr	r2, [pc, #616]	; (8000b20 <HAL_GPIO_Init+0x2a0>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d05e      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008bc:	4a98      	ldr	r2, [pc, #608]	; (8000b20 <HAL_GPIO_Init+0x2a0>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d875      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008c2:	4a98      	ldr	r2, [pc, #608]	; (8000b24 <HAL_GPIO_Init+0x2a4>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d058      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008c8:	4a96      	ldr	r2, [pc, #600]	; (8000b24 <HAL_GPIO_Init+0x2a4>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d86f      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008ce:	4a96      	ldr	r2, [pc, #600]	; (8000b28 <HAL_GPIO_Init+0x2a8>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d052      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008d4:	4a94      	ldr	r2, [pc, #592]	; (8000b28 <HAL_GPIO_Init+0x2a8>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d869      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008da:	4a94      	ldr	r2, [pc, #592]	; (8000b2c <HAL_GPIO_Init+0x2ac>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d04c      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008e0:	4a92      	ldr	r2, [pc, #584]	; (8000b2c <HAL_GPIO_Init+0x2ac>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d863      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008e6:	4a92      	ldr	r2, [pc, #584]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d046      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008ec:	4a90      	ldr	r2, [pc, #576]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d85d      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008f2:	2b12      	cmp	r3, #18
 80008f4:	d82a      	bhi.n	800094c <HAL_GPIO_Init+0xcc>
 80008f6:	2b12      	cmp	r3, #18
 80008f8:	d859      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008fa:	a201      	add	r2, pc, #4	; (adr r2, 8000900 <HAL_GPIO_Init+0x80>)
 80008fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000900:	0800097b 	.word	0x0800097b
 8000904:	08000955 	.word	0x08000955
 8000908:	08000967 	.word	0x08000967
 800090c:	080009a9 	.word	0x080009a9
 8000910:	080009af 	.word	0x080009af
 8000914:	080009af 	.word	0x080009af
 8000918:	080009af 	.word	0x080009af
 800091c:	080009af 	.word	0x080009af
 8000920:	080009af 	.word	0x080009af
 8000924:	080009af 	.word	0x080009af
 8000928:	080009af 	.word	0x080009af
 800092c:	080009af 	.word	0x080009af
 8000930:	080009af 	.word	0x080009af
 8000934:	080009af 	.word	0x080009af
 8000938:	080009af 	.word	0x080009af
 800093c:	080009af 	.word	0x080009af
 8000940:	080009af 	.word	0x080009af
 8000944:	0800095d 	.word	0x0800095d
 8000948:	08000971 	.word	0x08000971
 800094c:	4a79      	ldr	r2, [pc, #484]	; (8000b34 <HAL_GPIO_Init+0x2b4>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d013      	beq.n	800097a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000952:	e02c      	b.n	80009ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	623b      	str	r3, [r7, #32]
          break;
 800095a:	e029      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	3304      	adds	r3, #4
 8000962:	623b      	str	r3, [r7, #32]
          break;
 8000964:	e024      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	3308      	adds	r3, #8
 800096c:	623b      	str	r3, [r7, #32]
          break;
 800096e:	e01f      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	330c      	adds	r3, #12
 8000976:	623b      	str	r3, [r7, #32]
          break;
 8000978:	e01a      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d102      	bne.n	8000988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000982:	2304      	movs	r3, #4
 8000984:	623b      	str	r3, [r7, #32]
          break;
 8000986:	e013      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d105      	bne.n	800099c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000990:	2308      	movs	r3, #8
 8000992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	611a      	str	r2, [r3, #16]
          break;
 800099a:	e009      	b.n	80009b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800099c:	2308      	movs	r3, #8
 800099e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	615a      	str	r2, [r3, #20]
          break;
 80009a6:	e003      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
          break;
 80009ac:	e000      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          break;
 80009ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	2bff      	cmp	r3, #255	; 0xff
 80009b4:	d801      	bhi.n	80009ba <HAL_GPIO_Init+0x13a>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	e001      	b.n	80009be <HAL_GPIO_Init+0x13e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3304      	adds	r3, #4
 80009be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	2bff      	cmp	r3, #255	; 0xff
 80009c4:	d802      	bhi.n	80009cc <HAL_GPIO_Init+0x14c>
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	e002      	b.n	80009d2 <HAL_GPIO_Init+0x152>
 80009cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ce:	3b08      	subs	r3, #8
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	210f      	movs	r1, #15
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	fa01 f303 	lsl.w	r3, r1, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	401a      	ands	r2, r3
 80009e4:	6a39      	ldr	r1, [r7, #32]
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	431a      	orrs	r2, r3
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 80b1 	beq.w	8000b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a00:	4b4d      	ldr	r3, [pc, #308]	; (8000b38 <HAL_GPIO_Init+0x2b8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a4c      	ldr	r2, [pc, #304]	; (8000b38 <HAL_GPIO_Init+0x2b8>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b4a      	ldr	r3, [pc, #296]	; (8000b38 <HAL_GPIO_Init+0x2b8>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a18:	4a48      	ldr	r2, [pc, #288]	; (8000b3c <HAL_GPIO_Init+0x2bc>)
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	089b      	lsrs	r3, r3, #2
 8000a1e:	3302      	adds	r3, #2
 8000a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	f003 0303 	and.w	r3, r3, #3
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	220f      	movs	r2, #15
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a40      	ldr	r2, [pc, #256]	; (8000b40 <HAL_GPIO_Init+0x2c0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d013      	beq.n	8000a6c <HAL_GPIO_Init+0x1ec>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a3f      	ldr	r2, [pc, #252]	; (8000b44 <HAL_GPIO_Init+0x2c4>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d00d      	beq.n	8000a68 <HAL_GPIO_Init+0x1e8>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a3e      	ldr	r2, [pc, #248]	; (8000b48 <HAL_GPIO_Init+0x2c8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d007      	beq.n	8000a64 <HAL_GPIO_Init+0x1e4>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a3d      	ldr	r2, [pc, #244]	; (8000b4c <HAL_GPIO_Init+0x2cc>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d101      	bne.n	8000a60 <HAL_GPIO_Init+0x1e0>
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	e006      	b.n	8000a6e <HAL_GPIO_Init+0x1ee>
 8000a60:	2304      	movs	r3, #4
 8000a62:	e004      	b.n	8000a6e <HAL_GPIO_Init+0x1ee>
 8000a64:	2302      	movs	r3, #2
 8000a66:	e002      	b.n	8000a6e <HAL_GPIO_Init+0x1ee>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e000      	b.n	8000a6e <HAL_GPIO_Init+0x1ee>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a70:	f002 0203 	and.w	r2, r2, #3
 8000a74:	0092      	lsls	r2, r2, #2
 8000a76:	4093      	lsls	r3, r2
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a7e:	492f      	ldr	r1, [pc, #188]	; (8000b3c <HAL_GPIO_Init+0x2bc>)
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	3302      	adds	r3, #2
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a98:	4b2d      	ldr	r3, [pc, #180]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	689a      	ldr	r2, [r3, #8]
 8000a9c:	492c      	ldr	r1, [pc, #176]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	608b      	str	r3, [r1, #8]
 8000aa4:	e006      	b.n	8000ab4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aa6:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	4928      	ldr	r1, [pc, #160]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d006      	beq.n	8000ace <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ac0:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	4922      	ldr	r1, [pc, #136]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	60cb      	str	r3, [r1, #12]
 8000acc:	e006      	b.n	8000adc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ad0:	68da      	ldr	r2, [r3, #12]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	491e      	ldr	r1, [pc, #120]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d006      	beq.n	8000af6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	4918      	ldr	r1, [pc, #96]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	604b      	str	r3, [r1, #4]
 8000af4:	e006      	b.n	8000b04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	4914      	ldr	r1, [pc, #80]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000b00:	4013      	ands	r3, r2
 8000b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d021      	beq.n	8000b54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	490e      	ldr	r1, [pc, #56]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	600b      	str	r3, [r1, #0]
 8000b1c:	e021      	b.n	8000b62 <HAL_GPIO_Init+0x2e2>
 8000b1e:	bf00      	nop
 8000b20:	10320000 	.word	0x10320000
 8000b24:	10310000 	.word	0x10310000
 8000b28:	10220000 	.word	0x10220000
 8000b2c:	10210000 	.word	0x10210000
 8000b30:	10120000 	.word	0x10120000
 8000b34:	10110000 	.word	0x10110000
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010000 	.word	0x40010000
 8000b40:	40010800 	.word	0x40010800
 8000b44:	40010c00 	.word	0x40010c00
 8000b48:	40011000 	.word	0x40011000
 8000b4c:	40011400 	.word	0x40011400
 8000b50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_GPIO_Init+0x304>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	4909      	ldr	r1, [pc, #36]	; (8000b84 <HAL_GPIO_Init+0x304>)
 8000b5e:	4013      	ands	r3, r2
 8000b60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	3301      	adds	r3, #1
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f47f ae8e 	bne.w	8000894 <HAL_GPIO_Init+0x14>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	372c      	adds	r7, #44	; 0x2c
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	40010400 	.word	0x40010400

08000b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
 8000b94:	4613      	mov	r3, r2
 8000b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b98:	787b      	ldrb	r3, [r7, #1]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ba4:	e003      	b.n	8000bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	041a      	lsls	r2, r3, #16
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	611a      	str	r2, [r3, #16]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bca:	887a      	ldrh	r2, [r7, #2]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	041a      	lsls	r2, r3, #16
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	43d9      	mvns	r1, r3
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	400b      	ands	r3, r1
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	611a      	str	r2, [r3, #16]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
	...

08000bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bf8:	695a      	ldr	r2, [r3, #20]
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d006      	beq.n	8000c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f806 	bl	8000c1c <HAL_GPIO_EXTI_Callback>
  }
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40010400 	.word	0x40010400

08000c1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e272      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f000 8087 	beq.w	8000d5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c50:	4b92      	ldr	r3, [pc, #584]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 030c 	and.w	r3, r3, #12
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	d00c      	beq.n	8000c76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c5c:	4b8f      	ldr	r3, [pc, #572]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 030c 	and.w	r3, r3, #12
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d112      	bne.n	8000c8e <HAL_RCC_OscConfig+0x5e>
 8000c68:	4b8c      	ldr	r3, [pc, #560]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c74:	d10b      	bne.n	8000c8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c76:	4b89      	ldr	r3, [pc, #548]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d06c      	beq.n	8000d5c <HAL_RCC_OscConfig+0x12c>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d168      	bne.n	8000d5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e24c      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c96:	d106      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x76>
 8000c98:	4b80      	ldr	r3, [pc, #512]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a7f      	ldr	r2, [pc, #508]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	e02e      	b.n	8000d04 <HAL_RCC_OscConfig+0xd4>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10c      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x98>
 8000cae:	4b7b      	ldr	r3, [pc, #492]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a7a      	ldr	r2, [pc, #488]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	4b78      	ldr	r3, [pc, #480]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a77      	ldr	r2, [pc, #476]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	e01d      	b.n	8000d04 <HAL_RCC_OscConfig+0xd4>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cd0:	d10c      	bne.n	8000cec <HAL_RCC_OscConfig+0xbc>
 8000cd2:	4b72      	ldr	r3, [pc, #456]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a71      	ldr	r2, [pc, #452]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	4b6f      	ldr	r3, [pc, #444]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a6e      	ldr	r2, [pc, #440]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	e00b      	b.n	8000d04 <HAL_RCC_OscConfig+0xd4>
 8000cec:	4b6b      	ldr	r3, [pc, #428]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a6a      	ldr	r2, [pc, #424]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	4b68      	ldr	r3, [pc, #416]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a67      	ldr	r2, [pc, #412]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d013      	beq.n	8000d34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fcce 	bl	80006ac <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d14:	f7ff fcca 	bl	80006ac <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b64      	cmp	r3, #100	; 0x64
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e200      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d26:	4b5d      	ldr	r3, [pc, #372]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f0      	beq.n	8000d14 <HAL_RCC_OscConfig+0xe4>
 8000d32:	e014      	b.n	8000d5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d34:	f7ff fcba 	bl	80006ac <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d3c:	f7ff fcb6 	bl	80006ac <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b64      	cmp	r3, #100	; 0x64
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e1ec      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4e:	4b53      	ldr	r3, [pc, #332]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f0      	bne.n	8000d3c <HAL_RCC_OscConfig+0x10c>
 8000d5a:	e000      	b.n	8000d5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d063      	beq.n	8000e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d6a:	4b4c      	ldr	r3, [pc, #304]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 030c 	and.w	r3, r3, #12
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d00b      	beq.n	8000d8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d76:	4b49      	ldr	r3, [pc, #292]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 030c 	and.w	r3, r3, #12
 8000d7e:	2b08      	cmp	r3, #8
 8000d80:	d11c      	bne.n	8000dbc <HAL_RCC_OscConfig+0x18c>
 8000d82:	4b46      	ldr	r3, [pc, #280]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d116      	bne.n	8000dbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8e:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d005      	beq.n	8000da6 <HAL_RCC_OscConfig+0x176>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d001      	beq.n	8000da6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e1c0      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da6:	4b3d      	ldr	r3, [pc, #244]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	4939      	ldr	r1, [pc, #228]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000db6:	4313      	orrs	r3, r2
 8000db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dba:	e03a      	b.n	8000e32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d020      	beq.n	8000e06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dc4:	4b36      	ldr	r3, [pc, #216]	; (8000ea0 <HAL_RCC_OscConfig+0x270>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dca:	f7ff fc6f 	bl	80006ac <HAL_GetTick>
 8000dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd0:	e008      	b.n	8000de4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd2:	f7ff fc6b 	bl	80006ac <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d901      	bls.n	8000de4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000de0:	2303      	movs	r3, #3
 8000de2:	e1a1      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de4:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0f0      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df0:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	4927      	ldr	r1, [pc, #156]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000e00:	4313      	orrs	r3, r2
 8000e02:	600b      	str	r3, [r1, #0]
 8000e04:	e015      	b.n	8000e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e06:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <HAL_RCC_OscConfig+0x270>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fc4e 	bl	80006ac <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e14:	f7ff fc4a 	bl	80006ac <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e180      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f0      	bne.n	8000e14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0308 	and.w	r3, r3, #8
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d03a      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d019      	beq.n	8000e7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_RCC_OscConfig+0x274>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4c:	f7ff fc2e 	bl	80006ac <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e54:	f7ff fc2a 	bl	80006ac <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e160      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f0      	beq.n	8000e54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f000 faea 	bl	800144c <RCC_Delay>
 8000e78:	e01c      	b.n	8000eb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_RCC_OscConfig+0x274>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e80:	f7ff fc14 	bl	80006ac <HAL_GetTick>
 8000e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e86:	e00f      	b.n	8000ea8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e88:	f7ff fc10 	bl	80006ac <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d908      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e146      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	42420000 	.word	0x42420000
 8000ea4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea8:	4b92      	ldr	r3, [pc, #584]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1e9      	bne.n	8000e88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80a6 	beq.w	800100e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ec6:	4b8b      	ldr	r3, [pc, #556]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10d      	bne.n	8000eee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	4b88      	ldr	r3, [pc, #544]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a87      	ldr	r2, [pc, #540]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000edc:	61d3      	str	r3, [r2, #28]
 8000ede:	4b85      	ldr	r3, [pc, #532]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eea:	2301      	movs	r3, #1
 8000eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eee:	4b82      	ldr	r3, [pc, #520]	; (80010f8 <HAL_RCC_OscConfig+0x4c8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d118      	bne.n	8000f2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000efa:	4b7f      	ldr	r3, [pc, #508]	; (80010f8 <HAL_RCC_OscConfig+0x4c8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a7e      	ldr	r2, [pc, #504]	; (80010f8 <HAL_RCC_OscConfig+0x4c8>)
 8000f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f06:	f7ff fbd1 	bl	80006ac <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f0e:	f7ff fbcd 	bl	80006ac <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b64      	cmp	r3, #100	; 0x64
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e103      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f20:	4b75      	ldr	r3, [pc, #468]	; (80010f8 <HAL_RCC_OscConfig+0x4c8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0f0      	beq.n	8000f0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d106      	bne.n	8000f42 <HAL_RCC_OscConfig+0x312>
 8000f34:	4b6f      	ldr	r3, [pc, #444]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	4a6e      	ldr	r2, [pc, #440]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6213      	str	r3, [r2, #32]
 8000f40:	e02d      	b.n	8000f9e <HAL_RCC_OscConfig+0x36e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10c      	bne.n	8000f64 <HAL_RCC_OscConfig+0x334>
 8000f4a:	4b6a      	ldr	r3, [pc, #424]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	4a69      	ldr	r2, [pc, #420]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	f023 0301 	bic.w	r3, r3, #1
 8000f54:	6213      	str	r3, [r2, #32]
 8000f56:	4b67      	ldr	r3, [pc, #412]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	6a1b      	ldr	r3, [r3, #32]
 8000f5a:	4a66      	ldr	r2, [pc, #408]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	f023 0304 	bic.w	r3, r3, #4
 8000f60:	6213      	str	r3, [r2, #32]
 8000f62:	e01c      	b.n	8000f9e <HAL_RCC_OscConfig+0x36e>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d10c      	bne.n	8000f86 <HAL_RCC_OscConfig+0x356>
 8000f6c:	4b61      	ldr	r3, [pc, #388]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	4a60      	ldr	r2, [pc, #384]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	6213      	str	r3, [r2, #32]
 8000f78:	4b5e      	ldr	r3, [pc, #376]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	4a5d      	ldr	r2, [pc, #372]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6213      	str	r3, [r2, #32]
 8000f84:	e00b      	b.n	8000f9e <HAL_RCC_OscConfig+0x36e>
 8000f86:	4b5b      	ldr	r3, [pc, #364]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	4a5a      	ldr	r2, [pc, #360]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	6213      	str	r3, [r2, #32]
 8000f92:	4b58      	ldr	r3, [pc, #352]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	4a57      	ldr	r2, [pc, #348]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	f023 0304 	bic.w	r3, r3, #4
 8000f9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d015      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fb81 	bl	80006ac <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fac:	e00a      	b.n	8000fc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fae:	f7ff fb7d 	bl	80006ac <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e0b1      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc4:	4b4b      	ldr	r3, [pc, #300]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0ee      	beq.n	8000fae <HAL_RCC_OscConfig+0x37e>
 8000fd0:	e014      	b.n	8000ffc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd2:	f7ff fb6b 	bl	80006ac <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd8:	e00a      	b.n	8000ff0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fda:	f7ff fb67 	bl	80006ac <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e09b      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff0:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1ee      	bne.n	8000fda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d105      	bne.n	800100e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001002:	4b3c      	ldr	r3, [pc, #240]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a3b      	ldr	r2, [pc, #236]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800100c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 8087 	beq.w	8001126 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001018:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 030c 	and.w	r3, r3, #12
 8001020:	2b08      	cmp	r3, #8
 8001022:	d061      	beq.n	80010e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d146      	bne.n	80010ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800102c:	4b33      	ldr	r3, [pc, #204]	; (80010fc <HAL_RCC_OscConfig+0x4cc>)
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001032:	f7ff fb3b 	bl	80006ac <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800103a:	f7ff fb37 	bl	80006ac <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e06d      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104c:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f0      	bne.n	800103a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001060:	d108      	bne.n	8001074 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	4921      	ldr	r1, [pc, #132]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a19      	ldr	r1, [r3, #32]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	430b      	orrs	r3, r1
 8001086:	491b      	ldr	r1, [pc, #108]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	4313      	orrs	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_RCC_OscConfig+0x4cc>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fb0b 	bl	80006ac <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800109a:	f7ff fb07 	bl	80006ac <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e03d      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x46a>
 80010b8:	e035      	b.n	8001126 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_RCC_OscConfig+0x4cc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff faf4 	bl	80006ac <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c8:	f7ff faf0 	bl	80006ac <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e026      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x498>
 80010e6:	e01e      	b.n	8001126 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d107      	bne.n	8001100 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e019      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40007000 	.word	0x40007000
 80010fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_RCC_OscConfig+0x500>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	429a      	cmp	r2, r3
 8001112:	d106      	bne.n	8001122 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111e:	429a      	cmp	r2, r3
 8001120:	d001      	beq.n	8001126 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e0d0      	b.n	80012ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001148:	4b6a      	ldr	r3, [pc, #424]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d910      	bls.n	8001178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001156:	4b67      	ldr	r3, [pc, #412]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 0207 	bic.w	r2, r3, #7
 800115e:	4965      	ldr	r1, [pc, #404]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001166:	4b63      	ldr	r3, [pc, #396]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d001      	beq.n	8001178 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e0b8      	b.n	80012ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d020      	beq.n	80011c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001190:	4b59      	ldr	r3, [pc, #356]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	4a58      	ldr	r2, [pc, #352]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800119a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011a8:	4b53      	ldr	r3, [pc, #332]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4a52      	ldr	r2, [pc, #328]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b4:	4b50      	ldr	r3, [pc, #320]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	494d      	ldr	r1, [pc, #308]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d040      	beq.n	8001254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d107      	bne.n	80011ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011da:	4b47      	ldr	r3, [pc, #284]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d115      	bne.n	8001212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e07f      	b.n	80012ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d107      	bne.n	8001202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f2:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e073      	b.n	80012ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001202:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e06b      	b.n	80012ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001212:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f023 0203 	bic.w	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4936      	ldr	r1, [pc, #216]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001220:	4313      	orrs	r3, r2
 8001222:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001224:	f7ff fa42 	bl	80006ac <HAL_GetTick>
 8001228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122a:	e00a      	b.n	8001242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800122c:	f7ff fa3e 	bl	80006ac <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	f241 3288 	movw	r2, #5000	; 0x1388
 800123a:	4293      	cmp	r3, r2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e053      	b.n	80012ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 020c 	and.w	r2, r3, #12
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	429a      	cmp	r2, r3
 8001252:	d1eb      	bne.n	800122c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001254:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d210      	bcs.n	8001284 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001262:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 0207 	bic.w	r2, r3, #7
 800126a:	4922      	ldr	r1, [pc, #136]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001272:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d001      	beq.n	8001284 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e032      	b.n	80012ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d008      	beq.n	80012a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	4916      	ldr	r1, [pc, #88]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d009      	beq.n	80012c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	490e      	ldr	r1, [pc, #56]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012c2:	f000 f821 	bl	8001308 <HAL_RCC_GetSysClockFreq>
 80012c6:	4602      	mov	r2, r0
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	490a      	ldr	r1, [pc, #40]	; (80012fc <HAL_RCC_ClockConfig+0x1c8>)
 80012d4:	5ccb      	ldrb	r3, [r1, r3]
 80012d6:	fa22 f303 	lsr.w	r3, r2, r3
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <HAL_RCC_ClockConfig+0x1cc>)
 80012dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_RCC_ClockConfig+0x1d0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f8ea 	bl	80004bc <HAL_InitTick>

  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40022000 	.word	0x40022000
 80012f8:	40021000 	.word	0x40021000
 80012fc:	08004120 	.word	0x08004120
 8001300:	20000000 	.word	0x20000000
 8001304:	20000004 	.word	0x20000004

08001308 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <HAL_RCC_GetSysClockFreq+0x94>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b04      	cmp	r3, #4
 8001330:	d002      	beq.n	8001338 <HAL_RCC_GetSysClockFreq+0x30>
 8001332:	2b08      	cmp	r3, #8
 8001334:	d003      	beq.n	800133e <HAL_RCC_GetSysClockFreq+0x36>
 8001336:	e027      	b.n	8001388 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800133a:	613b      	str	r3, [r7, #16]
      break;
 800133c:	e027      	b.n	800138e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	0c9b      	lsrs	r3, r3, #18
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001348:	5cd3      	ldrb	r3, [r2, r3]
 800134a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d010      	beq.n	8001378 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_RCC_GetSysClockFreq+0x94>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	0c5b      	lsrs	r3, r3, #17
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	4a11      	ldr	r2, [pc, #68]	; (80013a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001362:	5cd3      	ldrb	r3, [r2, r3]
 8001364:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800136a:	fb03 f202 	mul.w	r2, r3, r2
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	fbb2 f3f3 	udiv	r3, r2, r3
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e004      	b.n	8001382 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800137c:	fb02 f303 	mul.w	r3, r2, r3
 8001380:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	613b      	str	r3, [r7, #16]
      break;
 8001386:	e002      	b.n	800138e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800138a:	613b      	str	r3, [r7, #16]
      break;
 800138c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800138e:	693b      	ldr	r3, [r7, #16]
}
 8001390:	4618      	mov	r0, r3
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	007a1200 	.word	0x007a1200
 80013a4:	08004138 	.word	0x08004138
 80013a8:	08004148 	.word	0x08004148
 80013ac:	003d0900 	.word	0x003d0900

080013b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013b4:	4b02      	ldr	r3, [pc, #8]	; (80013c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	20000000 	.word	0x20000000

080013c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013c8:	f7ff fff2 	bl	80013b0 <HAL_RCC_GetHCLKFreq>
 80013cc:	4602      	mov	r2, r0
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	0a1b      	lsrs	r3, r3, #8
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	4903      	ldr	r1, [pc, #12]	; (80013e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013da:	5ccb      	ldrb	r3, [r1, r3]
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40021000 	.word	0x40021000
 80013e8:	08004130 	.word	0x08004130

080013ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	220f      	movs	r2, #15
 80013fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_RCC_GetClockConfig+0x58>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0203 	and.w	r2, r3, #3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_RCC_GetClockConfig+0x58>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_RCC_GetClockConfig+0x58>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_RCC_GetClockConfig+0x58>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	08db      	lsrs	r3, r3, #3
 8001426:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_RCC_GetClockConfig+0x5c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0207 	and.w	r2, r3, #7
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	40021000 	.word	0x40021000
 8001448:	40022000 	.word	0x40022000

0800144c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <RCC_Delay+0x34>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <RCC_Delay+0x38>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	0a5b      	lsrs	r3, r3, #9
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	fb02 f303 	mul.w	r3, r2, r3
 8001466:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001468:	bf00      	nop
  }
  while (Delay --);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1e5a      	subs	r2, r3, #1
 800146e:	60fa      	str	r2, [r7, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f9      	bne.n	8001468 <RCC_Delay+0x1c>
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000000 	.word	0x20000000
 8001484:	10624dd3 	.word	0x10624dd3

08001488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e041      	b.n	800151e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d106      	bne.n	80014b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f839 	bl	8001526 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3304      	adds	r3, #4
 80014c4:	4619      	mov	r1, r3
 80014c6:	4610      	mov	r0, r2
 80014c8:	f000 f9b4 	bl	8001834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b01      	cmp	r3, #1
 800154a:	d001      	beq.n	8001550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e03a      	b.n	80015c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a18      	ldr	r2, [pc, #96]	; (80015d0 <HAL_TIM_Base_Start_IT+0x98>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00e      	beq.n	8001590 <HAL_TIM_Base_Start_IT+0x58>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800157a:	d009      	beq.n	8001590 <HAL_TIM_Base_Start_IT+0x58>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d004      	beq.n	8001590 <HAL_TIM_Base_Start_IT+0x58>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d111      	bne.n	80015b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d010      	beq.n	80015c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 0201 	orr.w	r2, r2, #1
 80015b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015b2:	e007      	b.n	80015c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0201 	orr.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40012c00 	.word	0x40012c00
 80015d4:	40000400 	.word	0x40000400
 80015d8:	40000800 	.word	0x40000800

080015dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d122      	bne.n	8001638 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d11b      	bne.n	8001638 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f06f 0202 	mvn.w	r2, #2
 8001608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f8ed 	bl	80017fe <HAL_TIM_IC_CaptureCallback>
 8001624:	e005      	b.n	8001632 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f8e0 	bl	80017ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f8ef 	bl	8001810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	2b04      	cmp	r3, #4
 8001644:	d122      	bne.n	800168c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b04      	cmp	r3, #4
 8001652:	d11b      	bne.n	800168c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f06f 0204 	mvn.w	r2, #4
 800165c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2202      	movs	r2, #2
 8001662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f8c3 	bl	80017fe <HAL_TIM_IC_CaptureCallback>
 8001678:	e005      	b.n	8001686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f8b6 	bl	80017ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f8c5 	bl	8001810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b08      	cmp	r3, #8
 8001698:	d122      	bne.n	80016e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d11b      	bne.n	80016e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f06f 0208 	mvn.w	r2, #8
 80016b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2204      	movs	r2, #4
 80016b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f899 	bl	80017fe <HAL_TIM_IC_CaptureCallback>
 80016cc:	e005      	b.n	80016da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f88c 	bl	80017ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f89b 	bl	8001810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	2b10      	cmp	r3, #16
 80016ec:	d122      	bne.n	8001734 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	2b10      	cmp	r3, #16
 80016fa:	d11b      	bne.n	8001734 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f06f 0210 	mvn.w	r2, #16
 8001704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2208      	movs	r2, #8
 800170a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f86f 	bl	80017fe <HAL_TIM_IC_CaptureCallback>
 8001720:	e005      	b.n	800172e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f862 	bl	80017ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f871 	bl	8001810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b01      	cmp	r3, #1
 8001740:	d10e      	bne.n	8001760 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b01      	cmp	r3, #1
 800174e:	d107      	bne.n	8001760 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f06f 0201 	mvn.w	r2, #1
 8001758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7fe fe68 	bl	8000430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176a:	2b80      	cmp	r3, #128	; 0x80
 800176c:	d10e      	bne.n	800178c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001778:	2b80      	cmp	r3, #128	; 0x80
 800177a:	d107      	bne.n	800178c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f8bf 	bl	800190a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001796:	2b40      	cmp	r3, #64	; 0x40
 8001798:	d10e      	bne.n	80017b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a4:	2b40      	cmp	r3, #64	; 0x40
 80017a6:	d107      	bne.n	80017b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80017b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f835 	bl	8001822 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	f003 0320 	and.w	r3, r3, #32
 80017c2:	2b20      	cmp	r3, #32
 80017c4:	d10e      	bne.n	80017e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	2b20      	cmp	r3, #32
 80017d2:	d107      	bne.n	80017e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f06f 0220 	mvn.w	r2, #32
 80017dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f88a 	bl	80018f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a29      	ldr	r2, [pc, #164]	; (80018ec <TIM_Base_SetConfig+0xb8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d00b      	beq.n	8001864 <TIM_Base_SetConfig+0x30>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001852:	d007      	beq.n	8001864 <TIM_Base_SetConfig+0x30>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <TIM_Base_SetConfig+0xbc>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d003      	beq.n	8001864 <TIM_Base_SetConfig+0x30>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a25      	ldr	r2, [pc, #148]	; (80018f4 <TIM_Base_SetConfig+0xc0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d108      	bne.n	8001876 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800186a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <TIM_Base_SetConfig+0xb8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d00b      	beq.n	8001896 <TIM_Base_SetConfig+0x62>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001884:	d007      	beq.n	8001896 <TIM_Base_SetConfig+0x62>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a19      	ldr	r2, [pc, #100]	; (80018f0 <TIM_Base_SetConfig+0xbc>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d003      	beq.n	8001896 <TIM_Base_SetConfig+0x62>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <TIM_Base_SetConfig+0xc0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d108      	bne.n	80018a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800189c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a07      	ldr	r2, [pc, #28]	; (80018ec <TIM_Base_SetConfig+0xb8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d103      	bne.n	80018dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	615a      	str	r2, [r3, #20]
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	40012c00 	.word	0x40012c00
 80018f0:	40000400 	.word	0x40000400
 80018f4:	40000800 	.word	0x40000800

080018f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f103 0208 	add.w	r2, r3, #8
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f103 0208 	add.w	r2, r3, #8
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f103 0208 	add.w	r2, r3, #8
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	601a      	str	r2, [r3, #0]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ce:	d103      	bne.n	80019d8 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	e00c      	b.n	80019f2 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3308      	adds	r3, #8
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	e002      	b.n	80019e6 <vListInsert+0x2e>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d2f6      	bcs.n	80019e0 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	601a      	str	r2, [r3, #0]
}
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6892      	ldr	r2, [r2, #8]
 8001a3e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6852      	ldr	r2, [r2, #4]
 8001a48:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d103      	bne.n	8001a5c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	1e5a      	subs	r2, r3, #1
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
	...

08001a7c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001a86:	2301      	movs	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10a      	bne.n	8001aaa <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a98:	f383 8811 	msr	BASEPRI, r3
 8001a9c:	f3bf 8f6f 	isb	sy
 8001aa0:	f3bf 8f4f 	dsb	sy
 8001aa4:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001aa6:	bf00      	nop
 8001aa8:	e7fe      	b.n	8001aa8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d05d      	beq.n	8001b6c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d059      	beq.n	8001b6c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d000      	beq.n	8001acc <xQueueGenericReset+0x50>
 8001aca:	2101      	movs	r1, #1
 8001acc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d14c      	bne.n	8001b6c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001ad2:	f002 f805 	bl	8003ae0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ade:	6939      	ldr	r1, [r7, #16]
 8001ae0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	441a      	add	r2, r3
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	2200      	movs	r2, #0
 8001af0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6939      	ldr	r1, [r7, #16]
 8001b06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b08:	fb01 f303 	mul.w	r3, r1, r3
 8001b0c:	441a      	add	r2, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	22ff      	movs	r2, #255	; 0xff
 8001b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	22ff      	movs	r2, #255	; 0xff
 8001b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d114      	bne.n	8001b52 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01a      	beq.n	8001b66 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	3310      	adds	r3, #16
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 ffd5 	bl	8002ae4 <xTaskRemoveFromEventList>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d012      	beq.n	8001b66 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <xQueueGenericReset+0x11c>)
 8001b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	f3bf 8f4f 	dsb	sy
 8001b4c:	f3bf 8f6f 	isb	sy
 8001b50:	e009      	b.n	8001b66 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	3310      	adds	r3, #16
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fee0 	bl	800191c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	3324      	adds	r3, #36	; 0x24
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fedb 	bl	800191c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001b66:	f001 ffeb 	bl	8003b40 <vPortExitCritical>
 8001b6a:	e001      	b.n	8001b70 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10a      	bne.n	8001b8c <xQueueGenericReset+0x110>
        __asm volatile
 8001b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b7a:	f383 8811 	msr	BASEPRI, r3
 8001b7e:	f3bf 8f6f 	isb	sy
 8001b82:	f3bf 8f4f 	dsb	sy
 8001b86:	60bb      	str	r3, [r7, #8]
    }
 8001b88:	bf00      	nop
 8001b8a:	e7fe      	b.n	8001b8a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001b8c:	697b      	ldr	r3, [r7, #20]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	e000ed04 	.word	0xe000ed04

08001b9c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d02e      	beq.n	8001c12 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	fba3 2302 	umull	r2, r3, r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d000      	beq.n	8001bc4 <xQueueGenericCreate+0x28>
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d123      	bne.n	8001c12 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001bd2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001bd6:	d81c      	bhi.n	8001c12 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	3350      	adds	r3, #80	; 0x50
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 f878 	bl	8003cdc <pvPortMalloc>
 8001bec:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d01c      	beq.n	8001c2e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3350      	adds	r3, #80	; 0x50
 8001bfc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001bfe:	79fa      	ldrb	r2, [r7, #7]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	4613      	mov	r3, r2
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 f814 	bl	8001c38 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001c10:	e00d      	b.n	8001c2e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10a      	bne.n	8001c2e <xQueueGenericCreate+0x92>
        __asm volatile
 8001c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c1c:	f383 8811 	msr	BASEPRI, r3
 8001c20:	f3bf 8f6f 	isb	sy
 8001c24:	f3bf 8f4f 	dsb	sy
 8001c28:	613b      	str	r3, [r7, #16]
    }
 8001c2a:	bf00      	nop
 8001c2c:	e7fe      	b.n	8001c2c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
    }
 8001c30:	4618      	mov	r0, r3
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d103      	bne.n	8001c54 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	e002      	b.n	8001c5a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c66:	2101      	movs	r1, #1
 8001c68:	69b8      	ldr	r0, [r7, #24]
 8001c6a:	f7ff ff07 	bl	8001a7c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08c      	sub	sp, #48	; 0x30
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10a      	bne.n	8001cb0 <xQueueReceive+0x30>
        __asm volatile
 8001c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9e:	f383 8811 	msr	BASEPRI, r3
 8001ca2:	f3bf 8f6f 	isb	sy
 8001ca6:	f3bf 8f4f 	dsb	sy
 8001caa:	623b      	str	r3, [r7, #32]
    }
 8001cac:	bf00      	nop
 8001cae:	e7fe      	b.n	8001cae <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d103      	bne.n	8001cbe <xQueueReceive+0x3e>
 8001cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <xQueueReceive+0x42>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <xQueueReceive+0x44>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10a      	bne.n	8001cde <xQueueReceive+0x5e>
        __asm volatile
 8001cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ccc:	f383 8811 	msr	BASEPRI, r3
 8001cd0:	f3bf 8f6f 	isb	sy
 8001cd4:	f3bf 8f4f 	dsb	sy
 8001cd8:	61fb      	str	r3, [r7, #28]
    }
 8001cda:	bf00      	nop
 8001cdc:	e7fe      	b.n	8001cdc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cde:	f001 f90f 	bl	8002f00 <xTaskGetSchedulerState>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <xQueueReceive+0x6e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <xQueueReceive+0x72>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <xQueueReceive+0x74>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10a      	bne.n	8001d0e <xQueueReceive+0x8e>
        __asm volatile
 8001cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfc:	f383 8811 	msr	BASEPRI, r3
 8001d00:	f3bf 8f6f 	isb	sy
 8001d04:	f3bf 8f4f 	dsb	sy
 8001d08:	61bb      	str	r3, [r7, #24]
    }
 8001d0a:	bf00      	nop
 8001d0c:	e7fe      	b.n	8001d0c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001d0e:	f001 fee7 	bl	8003ae0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d01f      	beq.n	8001d5e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001d1e:	68b9      	ldr	r1, [r7, #8]
 8001d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d22:	f000 f88d 	bl	8001e40 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	1e5a      	subs	r2, r3, #1
 8001d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00f      	beq.n	8001d56 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d38:	3310      	adds	r3, #16
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 fed2 	bl	8002ae4 <xTaskRemoveFromEventList>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001d46:	4b3d      	ldr	r3, [pc, #244]	; (8001e3c <xQueueReceive+0x1bc>)
 8001d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f3bf 8f4f 	dsb	sy
 8001d52:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001d56:	f001 fef3 	bl	8003b40 <vPortExitCritical>
                return pdPASS;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e069      	b.n	8001e32 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d103      	bne.n	8001d6c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001d64:	f001 feec 	bl	8003b40 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	e062      	b.n	8001e32 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d106      	bne.n	8001d80 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001d72:	f107 0310 	add.w	r3, r7, #16
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 ff8a 	bl	8002c90 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001d80:	f001 fede 	bl	8003b40 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001d84:	f000 fbbc 	bl	8002500 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001d88:	f001 feaa 	bl	8003ae0 <vPortEnterCritical>
 8001d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d103      	bne.n	8001da2 <xQueueReceive+0x122>
 8001d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001da8:	b25b      	sxtb	r3, r3
 8001daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dae:	d103      	bne.n	8001db8 <xQueueReceive+0x138>
 8001db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001db8:	f001 fec2 	bl	8003b40 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001dbc:	1d3a      	adds	r2, r7, #4
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 ff79 	bl	8002cbc <xTaskCheckForTimeOut>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d123      	bne.n	8001e18 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dd2:	f000 f8ad 	bl	8001f30 <prvIsQueueEmpty>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d017      	beq.n	8001e0c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dde:	3324      	adds	r3, #36	; 0x24
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 fe13 	bl	8002a10 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dec:	f000 f84e 	bl	8001e8c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001df0:	f000 fb94 	bl	800251c <xTaskResumeAll>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d189      	bne.n	8001d0e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <xQueueReceive+0x1bc>)
 8001dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	f3bf 8f4f 	dsb	sy
 8001e06:	f3bf 8f6f 	isb	sy
 8001e0a:	e780      	b.n	8001d0e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e0e:	f000 f83d 	bl	8001e8c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001e12:	f000 fb83 	bl	800251c <xTaskResumeAll>
 8001e16:	e77a      	b.n	8001d0e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e1a:	f000 f837 	bl	8001e8c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001e1e:	f000 fb7d 	bl	800251c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e24:	f000 f884 	bl	8001f30 <prvIsQueueEmpty>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f43f af6f 	beq.w	8001d0e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001e30:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3730      	adds	r7, #48	; 0x30
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	e000ed04 	.word	0xe000ed04

08001e40 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d018      	beq.n	8001e84 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	441a      	add	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d303      	bcc.n	8001e74 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68d9      	ldr	r1, [r3, #12]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6838      	ldr	r0, [r7, #0]
 8001e80:	f002 f922 	bl	80040c8 <memcpy>
    }
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001e94:	f001 fe24 	bl	8003ae0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e9e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ea0:	e011      	b.n	8001ec6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d012      	beq.n	8001ed0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3324      	adds	r3, #36	; 0x24
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fe18 	bl	8002ae4 <xTaskRemoveFromEventList>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001eba:	f000 ff65 	bl	8002d88 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	dce9      	bgt.n	8001ea2 <prvUnlockQueue+0x16>
 8001ece:	e000      	b.n	8001ed2 <prvUnlockQueue+0x46>
                    break;
 8001ed0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	22ff      	movs	r2, #255	; 0xff
 8001ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001eda:	f001 fe31 	bl	8003b40 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001ede:	f001 fdff 	bl	8003ae0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ee8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001eea:	e011      	b.n	8001f10 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d012      	beq.n	8001f1a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3310      	adds	r3, #16
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fdf3 	bl	8002ae4 <xTaskRemoveFromEventList>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001f04:	f000 ff40 	bl	8002d88 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001f08:	7bbb      	ldrb	r3, [r7, #14]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	dce9      	bgt.n	8001eec <prvUnlockQueue+0x60>
 8001f18:	e000      	b.n	8001f1c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001f1a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	22ff      	movs	r2, #255	; 0xff
 8001f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001f24:	f001 fe0c 	bl	8003b40 <vPortExitCritical>
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001f38:	f001 fdd2 	bl	8003ae0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001f44:	2301      	movs	r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	e001      	b.n	8001f4e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001f4e:	f001 fdf7 	bl	8003b40 <vPortExitCritical>

    return xReturn;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10a      	bne.n	8001f86 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8001f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f74:	f383 8811 	msr	BASEPRI, r3
 8001f78:	f3bf 8f6f 	isb	sy
 8001f7c:	f3bf 8f4f 	dsb	sy
 8001f80:	60fb      	str	r3, [r7, #12]
    }
 8001f82:	bf00      	nop
 8001f84:	e7fe      	b.n	8001f84 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d024      	beq.n	8001fd6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	e01e      	b.n	8001fd0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001f92:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <vQueueAddToRegistry+0x98>)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d105      	bne.n	8001fae <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4a13      	ldr	r2, [pc, #76]	; (8001ff4 <vQueueAddToRegistry+0x98>)
 8001fa8:	4413      	add	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
                    break;
 8001fac:	e013      	b.n	8001fd6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10a      	bne.n	8001fca <vQueueAddToRegistry+0x6e>
 8001fb4:	4a0f      	ldr	r2, [pc, #60]	; (8001ff4 <vQueueAddToRegistry+0x98>)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d104      	bne.n	8001fca <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <vQueueAddToRegistry+0x98>)
 8001fc6:	4413      	add	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2b07      	cmp	r3, #7
 8001fd4:	d9dd      	bls.n	8001f92 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001fe8:	bf00      	nop
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	2000008c 	.word	0x2000008c

08001ff8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002008:	f001 fd6a 	bl	8003ae0 <vPortEnterCritical>
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002012:	b25b      	sxtb	r3, r3
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d103      	bne.n	8002022 <vQueueWaitForMessageRestricted+0x2a>
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002028:	b25b      	sxtb	r3, r3
 800202a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202e:	d103      	bne.n	8002038 <vQueueWaitForMessageRestricted+0x40>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002038:	f001 fd82 	bl	8003b40 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002040:	2b00      	cmp	r3, #0
 8002042:	d106      	bne.n	8002052 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3324      	adds	r3, #36	; 0x24
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	68b9      	ldr	r1, [r7, #8]
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fd03 	bl	8002a58 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002052:	6978      	ldr	r0, [r7, #20]
 8002054:	f7ff ff1a 	bl	8001e8c <prvUnlockQueue>
    }
 8002058:	bf00      	nop
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	; 0x30
 8002064:	af04      	add	r7, sp, #16
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	4613      	mov	r3, r2
 800206e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4618      	mov	r0, r3
 8002076:	f001 fe31 	bl	8003cdc <pvPortMalloc>
 800207a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d013      	beq.n	80020aa <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002082:	2058      	movs	r0, #88	; 0x58
 8002084:	f001 fe2a 	bl	8003cdc <pvPortMalloc>
 8002088:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002090:	2258      	movs	r2, #88	; 0x58
 8002092:	2100      	movs	r1, #0
 8002094:	69f8      	ldr	r0, [r7, #28]
 8002096:	f001 ffeb 	bl	8004070 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
 80020a0:	e005      	b.n	80020ae <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f001 fed4 	bl	8003e50 <vPortFree>
 80020a8:	e001      	b.n	80020ae <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80020b4:	88fa      	ldrh	r2, [r7, #6]
 80020b6:	2300      	movs	r3, #0
 80020b8:	9303      	str	r3, [sp, #12]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	9302      	str	r3, [sp, #8]
 80020be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f80e 	bl	80020ec <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80020d0:	69f8      	ldr	r0, [r7, #28]
 80020d2:	f000 f899 	bl	8002208 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80020d6:	2301      	movs	r3, #1
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	e002      	b.n	80020e2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295
 80020e0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80020e2:	69bb      	ldr	r3, [r7, #24]
    }
 80020e4:	4618      	mov	r0, r3
 80020e6:	3720      	adds	r7, #32
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80020fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	461a      	mov	r2, r3
 8002104:	21a5      	movs	r1, #165	; 0xa5
 8002106:	f001 ffb3 	bl	8004070 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002114:	3b01      	subs	r3, #1
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	f023 0307 	bic.w	r3, r3, #7
 8002122:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <prvInitialiseNewTask+0x58>
        __asm volatile
 800212e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002132:	f383 8811 	msr	BASEPRI, r3
 8002136:	f3bf 8f6f 	isb	sy
 800213a:	f3bf 8f4f 	dsb	sy
 800213e:	617b      	str	r3, [r7, #20]
    }
 8002140:	bf00      	nop
 8002142:	e7fe      	b.n	8002142 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d01e      	beq.n	8002188 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	e012      	b.n	8002176 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	4413      	add	r3, r2
 8002156:	7819      	ldrb	r1, [r3, #0]
 8002158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	4413      	add	r3, r2
 800215e:	3334      	adds	r3, #52	; 0x34
 8002160:	460a      	mov	r2, r1
 8002162:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4413      	add	r3, r2
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	3301      	adds	r3, #1
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	2b09      	cmp	r3, #9
 800217a:	d9e9      	bls.n	8002150 <prvInitialiseNewTask+0x64>
 800217c:	e000      	b.n	8002180 <prvInitialiseNewTask+0x94>
            {
                break;
 800217e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	2b04      	cmp	r3, #4
 800218c:	d90a      	bls.n	80021a4 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800218e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002192:	f383 8811 	msr	BASEPRI, r3
 8002196:	f3bf 8f6f 	isb	sy
 800219a:	f3bf 8f4f 	dsb	sy
 800219e:	613b      	str	r3, [r7, #16]
    }
 80021a0:	bf00      	nop
 80021a2:	e7fe      	b.n	80021a2 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80021a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d901      	bls.n	80021ae <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80021aa:	2304      	movs	r3, #4
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80021ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80021b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021b8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	3304      	adds	r3, #4
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fbcb 	bl	800195a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	3318      	adds	r3, #24
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fbc6 	bl	800195a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021d2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d6:	f1c3 0205 	rsb	r2, r3, #5
 80021da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021dc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80021de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	68f9      	ldr	r1, [r7, #12]
 80021e8:	69b8      	ldr	r0, [r7, #24]
 80021ea:	f001 fb85 	bl	80038f8 <pxPortInitialiseStack>
 80021ee:	4602      	mov	r2, r0
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80021f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021fe:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002200:	bf00      	nop
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002210:	f001 fc66 	bl	8003ae0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002214:	4b40      	ldr	r3, [pc, #256]	; (8002318 <prvAddNewTaskToReadyList+0x110>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3301      	adds	r3, #1
 800221a:	4a3f      	ldr	r2, [pc, #252]	; (8002318 <prvAddNewTaskToReadyList+0x110>)
 800221c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800221e:	4b3f      	ldr	r3, [pc, #252]	; (800231c <prvAddNewTaskToReadyList+0x114>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002226:	4a3d      	ldr	r2, [pc, #244]	; (800231c <prvAddNewTaskToReadyList+0x114>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800222c:	4b3a      	ldr	r3, [pc, #232]	; (8002318 <prvAddNewTaskToReadyList+0x110>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d110      	bne.n	8002256 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002234:	f000 fdcc 	bl	8002dd0 <prvInitialiseTaskLists>
 8002238:	e00d      	b.n	8002256 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800223a:	4b39      	ldr	r3, [pc, #228]	; (8002320 <prvAddNewTaskToReadyList+0x118>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002242:	4b36      	ldr	r3, [pc, #216]	; (800231c <prvAddNewTaskToReadyList+0x114>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	429a      	cmp	r2, r3
 800224e:	d802      	bhi.n	8002256 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002250:	4a32      	ldr	r2, [pc, #200]	; (800231c <prvAddNewTaskToReadyList+0x114>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002256:	4b33      	ldr	r3, [pc, #204]	; (8002324 <prvAddNewTaskToReadyList+0x11c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3301      	adds	r3, #1
 800225c:	4a31      	ldr	r2, [pc, #196]	; (8002324 <prvAddNewTaskToReadyList+0x11c>)
 800225e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002260:	4b30      	ldr	r3, [pc, #192]	; (8002324 <prvAddNewTaskToReadyList+0x11c>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	2201      	movs	r2, #1
 800226e:	409a      	lsls	r2, r3
 8002270:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <prvAddNewTaskToReadyList+0x120>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4313      	orrs	r3, r2
 8002276:	4a2c      	ldr	r2, [pc, #176]	; (8002328 <prvAddNewTaskToReadyList+0x120>)
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227e:	492b      	ldr	r1, [pc, #172]	; (800232c <prvAddNewTaskToReadyList+0x124>)
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	3304      	adds	r3, #4
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	3204      	adds	r2, #4
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	1d1a      	adds	r2, r3, #4
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4a1b      	ldr	r2, [pc, #108]	; (800232c <prvAddNewTaskToReadyList+0x124>)
 80022be:	441a      	add	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	615a      	str	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c8:	4918      	ldr	r1, [pc, #96]	; (800232c <prvAddNewTaskToReadyList+0x124>)
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	1c59      	adds	r1, r3, #1
 80022d8:	4814      	ldr	r0, [pc, #80]	; (800232c <prvAddNewTaskToReadyList+0x124>)
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4403      	add	r3, r0
 80022e4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80022e6:	f001 fc2b 	bl	8003b40 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <prvAddNewTaskToReadyList+0x118>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00e      	beq.n	8002310 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <prvAddNewTaskToReadyList+0x114>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d207      	bcs.n	8002310 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <prvAddNewTaskToReadyList+0x128>)
 8002302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	f3bf 8f4f 	dsb	sy
 800230c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200001a4 	.word	0x200001a4
 800231c:	200000cc 	.word	0x200000cc
 8002320:	200001b0 	.word	0x200001b0
 8002324:	200001c0 	.word	0x200001c0
 8002328:	200001ac 	.word	0x200001ac
 800232c:	200000d0 	.word	0x200000d0
 8002330:	e000ed04 	.word	0xe000ed04

08002334 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800233c:	f001 fbd0 	bl	8003ae0 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <vTaskDelete+0x18>
 8002346:	4b3b      	ldr	r3, [pc, #236]	; (8002434 <vTaskDelete+0x100>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	e000      	b.n	800234e <vTaskDelete+0x1a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3304      	adds	r3, #4
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fb67 	bl	8001a28 <uxListRemove>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d115      	bne.n	800238c <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002364:	4934      	ldr	r1, [pc, #208]	; (8002438 <vTaskDelete+0x104>)
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10a      	bne.n	800238c <vTaskDelete+0x58>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	2201      	movs	r2, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43da      	mvns	r2, r3
 8002382:	4b2e      	ldr	r3, [pc, #184]	; (800243c <vTaskDelete+0x108>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4013      	ands	r3, r2
 8002388:	4a2c      	ldr	r2, [pc, #176]	; (800243c <vTaskDelete+0x108>)
 800238a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3318      	adds	r3, #24
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fb45 	bl	8001a28 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800239e:	4b28      	ldr	r3, [pc, #160]	; (8002440 <vTaskDelete+0x10c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	3301      	adds	r3, #1
 80023a4:	4a26      	ldr	r2, [pc, #152]	; (8002440 <vTaskDelete+0x10c>)
 80023a6:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80023a8:	4b22      	ldr	r3, [pc, #136]	; (8002434 <vTaskDelete+0x100>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d10b      	bne.n	80023ca <vTaskDelete+0x96>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	3304      	adds	r3, #4
 80023b6:	4619      	mov	r1, r3
 80023b8:	4822      	ldr	r0, [pc, #136]	; (8002444 <vTaskDelete+0x110>)
 80023ba:	f7ff fada 	bl	8001972 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <vTaskDelete+0x114>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	3301      	adds	r3, #1
 80023c4:	4a20      	ldr	r2, [pc, #128]	; (8002448 <vTaskDelete+0x114>)
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	e006      	b.n	80023d8 <vTaskDelete+0xa4>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <vTaskDelete+0x118>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	4a1e      	ldr	r2, [pc, #120]	; (800244c <vTaskDelete+0x118>)
 80023d2:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80023d4:	f000 fd7a 	bl	8002ecc <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80023d8:	f001 fbb2 	bl	8003b40 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 80023dc:	4b15      	ldr	r3, [pc, #84]	; (8002434 <vTaskDelete+0x100>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d002      	beq.n	80023ec <vTaskDelete+0xb8>
        {
            prvDeleteTCB( pxTCB );
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 fd60 	bl	8002eac <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80023ec:	4b18      	ldr	r3, [pc, #96]	; (8002450 <vTaskDelete+0x11c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01b      	beq.n	800242c <vTaskDelete+0xf8>
        {
            if( pxTCB == pxCurrentTCB )
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <vTaskDelete+0x100>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d116      	bne.n	800242c <vTaskDelete+0xf8>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <vTaskDelete+0x120>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <vTaskDelete+0xe8>
        __asm volatile
 8002406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240a:	f383 8811 	msr	BASEPRI, r3
 800240e:	f3bf 8f6f 	isb	sy
 8002412:	f3bf 8f4f 	dsb	sy
 8002416:	60bb      	str	r3, [r7, #8]
    }
 8002418:	bf00      	nop
 800241a:	e7fe      	b.n	800241a <vTaskDelete+0xe6>
                portYIELD_WITHIN_API();
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <vTaskDelete+0x124>)
 800241e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	200000cc 	.word	0x200000cc
 8002438:	200000d0 	.word	0x200000d0
 800243c:	200001ac 	.word	0x200001ac
 8002440:	200001c0 	.word	0x200001c0
 8002444:	20000178 	.word	0x20000178
 8002448:	2000018c 	.word	0x2000018c
 800244c:	200001a4 	.word	0x200001a4
 8002450:	200001b0 	.word	0x200001b0
 8002454:	200001cc 	.word	0x200001cc
 8002458:	e000ed04 	.word	0xe000ed04

0800245c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <vTaskStartScheduler+0x88>)
 8002464:	9301      	str	r3, [sp, #4]
 8002466:	2300      	movs	r3, #0
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	2300      	movs	r3, #0
 800246c:	2282      	movs	r2, #130	; 0x82
 800246e:	491e      	ldr	r1, [pc, #120]	; (80024e8 <vTaskStartScheduler+0x8c>)
 8002470:	481e      	ldr	r0, [pc, #120]	; (80024ec <vTaskStartScheduler+0x90>)
 8002472:	f7ff fdf5 	bl	8002060 <xTaskCreate>
 8002476:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d102      	bne.n	8002484 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800247e:	f000 ffb9 	bl	80033f4 <xTimerCreateTimerTask>
 8002482:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d116      	bne.n	80024b8 <vTaskStartScheduler+0x5c>
        __asm volatile
 800248a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248e:	f383 8811 	msr	BASEPRI, r3
 8002492:	f3bf 8f6f 	isb	sy
 8002496:	f3bf 8f4f 	dsb	sy
 800249a:	60bb      	str	r3, [r7, #8]
    }
 800249c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800249e:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <vTaskStartScheduler+0x94>)
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <vTaskStartScheduler+0x98>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <vTaskStartScheduler+0x9c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80024b2:	f001 faa3 	bl	80039fc <xPortStartScheduler>
 80024b6:	e00e      	b.n	80024d6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024be:	d10a      	bne.n	80024d6 <vTaskStartScheduler+0x7a>
        __asm volatile
 80024c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	607b      	str	r3, [r7, #4]
    }
 80024d2:	bf00      	nop
 80024d4:	e7fe      	b.n	80024d4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <vTaskStartScheduler+0xa0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	200001c8 	.word	0x200001c8
 80024e8:	08004108 	.word	0x08004108
 80024ec:	08002da1 	.word	0x08002da1
 80024f0:	200001c4 	.word	0x200001c4
 80024f4:	200001b0 	.word	0x200001b0
 80024f8:	200001a8 	.word	0x200001a8
 80024fc:	2000000c 	.word	0x2000000c

08002500 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <vTaskSuspendAll+0x18>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	4a03      	ldr	r2, [pc, #12]	; (8002518 <vTaskSuspendAll+0x18>)
 800250c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	200001cc 	.word	0x200001cc

0800251c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800252a:	4b71      	ldr	r3, [pc, #452]	; (80026f0 <xTaskResumeAll+0x1d4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10a      	bne.n	8002548 <xTaskResumeAll+0x2c>
        __asm volatile
 8002532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002536:	f383 8811 	msr	BASEPRI, r3
 800253a:	f3bf 8f6f 	isb	sy
 800253e:	f3bf 8f4f 	dsb	sy
 8002542:	607b      	str	r3, [r7, #4]
    }
 8002544:	bf00      	nop
 8002546:	e7fe      	b.n	8002546 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002548:	f001 faca 	bl	8003ae0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800254c:	4b68      	ldr	r3, [pc, #416]	; (80026f0 <xTaskResumeAll+0x1d4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3b01      	subs	r3, #1
 8002552:	4a67      	ldr	r2, [pc, #412]	; (80026f0 <xTaskResumeAll+0x1d4>)
 8002554:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002556:	4b66      	ldr	r3, [pc, #408]	; (80026f0 <xTaskResumeAll+0x1d4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 80c0 	bne.w	80026e0 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002560:	4b64      	ldr	r3, [pc, #400]	; (80026f4 <xTaskResumeAll+0x1d8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80bb 	beq.w	80026e0 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800256a:	e08a      	b.n	8002682 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800256c:	4b62      	ldr	r3, [pc, #392]	; (80026f8 <xTaskResumeAll+0x1dc>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	6a12      	ldr	r2, [r2, #32]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	69d2      	ldr	r2, [r2, #28]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3318      	adds	r3, #24
 8002596:	429a      	cmp	r2, r3
 8002598:	d103      	bne.n	80025a2 <xTaskResumeAll+0x86>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	6a1a      	ldr	r2, [r3, #32]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	2200      	movs	r2, #0
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	1e5a      	subs	r2, r3, #1
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	68d2      	ldr	r2, [r2, #12]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	6892      	ldr	r2, [r2, #8]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	3304      	adds	r3, #4
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d103      	bne.n	80025e0 <xTaskResumeAll+0xc4>
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2200      	movs	r2, #0
 80025e4:	615a      	str	r2, [r3, #20]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	1e5a      	subs	r2, r3, #1
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	2201      	movs	r2, #1
 80025f6:	409a      	lsls	r2, r3
 80025f8:	4b40      	ldr	r3, [pc, #256]	; (80026fc <xTaskResumeAll+0x1e0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	4a3f      	ldr	r2, [pc, #252]	; (80026fc <xTaskResumeAll+0x1e0>)
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002606:	493e      	ldr	r1, [pc, #248]	; (8002700 <xTaskResumeAll+0x1e4>)
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3304      	adds	r3, #4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	3204      	adds	r2, #4
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	1d1a      	adds	r2, r3, #4
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4a2e      	ldr	r2, [pc, #184]	; (8002700 <xTaskResumeAll+0x1e4>)
 8002646:	441a      	add	r2, r3
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	615a      	str	r2, [r3, #20]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002650:	492b      	ldr	r1, [pc, #172]	; (8002700 <xTaskResumeAll+0x1e4>)
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	1c59      	adds	r1, r3, #1
 8002660:	4827      	ldr	r0, [pc, #156]	; (8002700 <xTaskResumeAll+0x1e4>)
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4403      	add	r3, r0
 800266c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <xTaskResumeAll+0x1e8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	429a      	cmp	r2, r3
 800267a:	d302      	bcc.n	8002682 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 800267c:	4b22      	ldr	r3, [pc, #136]	; (8002708 <xTaskResumeAll+0x1ec>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <xTaskResumeAll+0x1dc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f47f af70 	bne.w	800256c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002692:	f000 fc1b 	bl	8002ecc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002696:	4b1d      	ldr	r3, [pc, #116]	; (800270c <xTaskResumeAll+0x1f0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d010      	beq.n	80026c4 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80026a2:	f000 f845 	bl	8002730 <xTaskIncrementTick>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80026ac:	4b16      	ldr	r3, [pc, #88]	; (8002708 <xTaskResumeAll+0x1ec>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f1      	bne.n	80026a2 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <xTaskResumeAll+0x1f0>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80026c4:	4b10      	ldr	r3, [pc, #64]	; (8002708 <xTaskResumeAll+0x1ec>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80026cc:	2301      	movs	r3, #1
 80026ce:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <xTaskResumeAll+0x1f4>)
 80026d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80026e0:	f001 fa2e 	bl	8003b40 <vPortExitCritical>

    return xAlreadyYielded;
 80026e4:	69bb      	ldr	r3, [r7, #24]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3720      	adds	r7, #32
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200001cc 	.word	0x200001cc
 80026f4:	200001a4 	.word	0x200001a4
 80026f8:	20000164 	.word	0x20000164
 80026fc:	200001ac 	.word	0x200001ac
 8002700:	200000d0 	.word	0x200000d0
 8002704:	200000cc 	.word	0x200000cc
 8002708:	200001b8 	.word	0x200001b8
 800270c:	200001b4 	.word	0x200001b4
 8002710:	e000ed04 	.word	0xe000ed04

08002714 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800271a:	4b04      	ldr	r3, [pc, #16]	; (800272c <xTaskGetTickCount+0x18>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002720:	687b      	ldr	r3, [r7, #4]
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	200001a8 	.word	0x200001a8

08002730 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	; 0x28
 8002734:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002736:	2300      	movs	r3, #0
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800273a:	4b7d      	ldr	r3, [pc, #500]	; (8002930 <xTaskIncrementTick+0x200>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 80ec 	bne.w	800291c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002744:	4b7b      	ldr	r3, [pc, #492]	; (8002934 <xTaskIncrementTick+0x204>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800274c:	4a79      	ldr	r2, [pc, #484]	; (8002934 <xTaskIncrementTick+0x204>)
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d120      	bne.n	800279a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002758:	4b77      	ldr	r3, [pc, #476]	; (8002938 <xTaskIncrementTick+0x208>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <xTaskIncrementTick+0x48>
        __asm volatile
 8002762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002766:	f383 8811 	msr	BASEPRI, r3
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	f3bf 8f4f 	dsb	sy
 8002772:	607b      	str	r3, [r7, #4]
    }
 8002774:	bf00      	nop
 8002776:	e7fe      	b.n	8002776 <xTaskIncrementTick+0x46>
 8002778:	4b6f      	ldr	r3, [pc, #444]	; (8002938 <xTaskIncrementTick+0x208>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	4b6f      	ldr	r3, [pc, #444]	; (800293c <xTaskIncrementTick+0x20c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6d      	ldr	r2, [pc, #436]	; (8002938 <xTaskIncrementTick+0x208>)
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4a6d      	ldr	r2, [pc, #436]	; (800293c <xTaskIncrementTick+0x20c>)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b6c      	ldr	r3, [pc, #432]	; (8002940 <xTaskIncrementTick+0x210>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	4a6b      	ldr	r2, [pc, #428]	; (8002940 <xTaskIncrementTick+0x210>)
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	f000 fb99 	bl	8002ecc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800279a:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <xTaskIncrementTick+0x214>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6a3a      	ldr	r2, [r7, #32]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	f0c0 80a6 	bcc.w	80028f2 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027a6:	4b64      	ldr	r3, [pc, #400]	; (8002938 <xTaskIncrementTick+0x208>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d104      	bne.n	80027ba <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027b0:	4b64      	ldr	r3, [pc, #400]	; (8002944 <xTaskIncrementTick+0x214>)
 80027b2:	f04f 32ff 	mov.w	r2, #4294967295
 80027b6:	601a      	str	r2, [r3, #0]
                    break;
 80027b8:	e09b      	b.n	80028f2 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027ba:	4b5f      	ldr	r3, [pc, #380]	; (8002938 <xTaskIncrementTick+0x208>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80027ca:	6a3a      	ldr	r2, [r7, #32]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d203      	bcs.n	80027da <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80027d2:	4a5c      	ldr	r2, [pc, #368]	; (8002944 <xTaskIncrementTick+0x214>)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80027d8:	e08b      	b.n	80028f2 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	68d2      	ldr	r2, [r2, #12]
 80027e8:	609a      	str	r2, [r3, #8]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	6892      	ldr	r2, [r2, #8]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	3304      	adds	r3, #4
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d103      	bne.n	8002808 <xTaskIncrementTick+0xd8>
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2200      	movs	r2, #0
 800280c:	615a      	str	r2, [r3, #20]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	1e5a      	subs	r2, r3, #1
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01e      	beq.n	800285e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	6a12      	ldr	r2, [r2, #32]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	69d2      	ldr	r2, [r2, #28]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	3318      	adds	r3, #24
 8002842:	429a      	cmp	r2, r3
 8002844:	d103      	bne.n	800284e <xTaskIncrementTick+0x11e>
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	6a1a      	ldr	r2, [r3, #32]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	2200      	movs	r2, #0
 8002852:	629a      	str	r2, [r3, #40]	; 0x28
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	1e5a      	subs	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	2201      	movs	r2, #1
 8002864:	409a      	lsls	r2, r3
 8002866:	4b38      	ldr	r3, [pc, #224]	; (8002948 <xTaskIncrementTick+0x218>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	4a36      	ldr	r2, [pc, #216]	; (8002948 <xTaskIncrementTick+0x218>)
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002874:	4935      	ldr	r1, [pc, #212]	; (800294c <xTaskIncrementTick+0x21c>)
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	3304      	adds	r3, #4
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	60da      	str	r2, [r3, #12]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	3204      	adds	r2, #4
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	1d1a      	adds	r2, r3, #4
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4a26      	ldr	r2, [pc, #152]	; (800294c <xTaskIncrementTick+0x21c>)
 80028b4:	441a      	add	r2, r3
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	615a      	str	r2, [r3, #20]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028be:	4923      	ldr	r1, [pc, #140]	; (800294c <xTaskIncrementTick+0x21c>)
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	1c59      	adds	r1, r3, #1
 80028ce:	481f      	ldr	r0, [pc, #124]	; (800294c <xTaskIncrementTick+0x21c>)
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4403      	add	r3, r0
 80028da:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <xTaskIncrementTick+0x220>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	429a      	cmp	r2, r3
 80028e8:	f67f af5d 	bls.w	80027a6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80028ec:	2301      	movs	r3, #1
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028f0:	e759      	b.n	80027a6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028f2:	4b17      	ldr	r3, [pc, #92]	; (8002950 <xTaskIncrementTick+0x220>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f8:	4914      	ldr	r1, [pc, #80]	; (800294c <xTaskIncrementTick+0x21c>)
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d901      	bls.n	800290e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800290a:	2301      	movs	r3, #1
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800290e:	4b11      	ldr	r3, [pc, #68]	; (8002954 <xTaskIncrementTick+0x224>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d007      	beq.n	8002926 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002916:	2301      	movs	r3, #1
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
 800291a:	e004      	b.n	8002926 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <xTaskIncrementTick+0x228>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	4a0d      	ldr	r2, [pc, #52]	; (8002958 <xTaskIncrementTick+0x228>)
 8002924:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002928:	4618      	mov	r0, r3
 800292a:	3728      	adds	r7, #40	; 0x28
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	200001cc 	.word	0x200001cc
 8002934:	200001a8 	.word	0x200001a8
 8002938:	2000015c 	.word	0x2000015c
 800293c:	20000160 	.word	0x20000160
 8002940:	200001bc 	.word	0x200001bc
 8002944:	200001c4 	.word	0x200001c4
 8002948:	200001ac 	.word	0x200001ac
 800294c:	200000d0 	.word	0x200000d0
 8002950:	200000cc 	.word	0x200000cc
 8002954:	200001b8 	.word	0x200001b8
 8002958:	200001b4 	.word	0x200001b4

0800295c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002962:	4b26      	ldr	r3, [pc, #152]	; (80029fc <vTaskSwitchContext+0xa0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800296a:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <vTaskSwitchContext+0xa4>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002970:	e03f      	b.n	80029f2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002972:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <vTaskSwitchContext+0xa4>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002978:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <vTaskSwitchContext+0xa8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002986:	7afb      	ldrb	r3, [r7, #11]
 8002988:	f1c3 031f 	rsb	r3, r3, #31
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	491e      	ldr	r1, [pc, #120]	; (8002a08 <vTaskSwitchContext+0xac>)
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10a      	bne.n	80029b8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80029a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	607b      	str	r3, [r7, #4]
    }
 80029b4:	bf00      	nop
 80029b6:	e7fe      	b.n	80029b6 <vTaskSwitchContext+0x5a>
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4a11      	ldr	r2, [pc, #68]	; (8002a08 <vTaskSwitchContext+0xac>)
 80029c4:	4413      	add	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	3308      	adds	r3, #8
 80029da:	429a      	cmp	r2, r3
 80029dc:	d104      	bne.n	80029e8 <vTaskSwitchContext+0x8c>
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <vTaskSwitchContext+0xb0>)
 80029f0:	6013      	str	r3, [r2, #0]
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	200001cc 	.word	0x200001cc
 8002a00:	200001b8 	.word	0x200001b8
 8002a04:	200001ac 	.word	0x200001ac
 8002a08:	200000d0 	.word	0x200000d0
 8002a0c:	200000cc 	.word	0x200000cc

08002a10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	60fb      	str	r3, [r7, #12]
    }
 8002a32:	bf00      	nop
 8002a34:	e7fe      	b.n	8002a34 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a36:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <vTaskPlaceOnEventList+0x44>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3318      	adds	r3, #24
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe ffba 	bl	80019b8 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002a44:	2101      	movs	r1, #1
 8002a46:	6838      	ldr	r0, [r7, #0]
 8002a48:	f000 fc54 	bl	80032f4 <prvAddCurrentTaskToDelayedList>
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	200000cc 	.word	0x200000cc

08002a58 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	613b      	str	r3, [r7, #16]
    }
 8002a7c:	bf00      	nop
 8002a7e:	e7fe      	b.n	8002a7e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <vTaskPlaceOnEventListRestricted+0x88>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	61da      	str	r2, [r3, #28]
 8002a8e:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <vTaskPlaceOnEventListRestricted+0x88>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	6892      	ldr	r2, [r2, #8]
 8002a96:	621a      	str	r2, [r3, #32]
 8002a98:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <vTaskPlaceOnEventListRestricted+0x88>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	3218      	adds	r2, #24
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <vTaskPlaceOnEventListRestricted+0x88>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f103 0218 	add.w	r2, r3, #24
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <vTaskPlaceOnEventListRestricted+0x88>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8002acc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	68b8      	ldr	r0, [r7, #8]
 8002ad2:	f000 fc0f 	bl	80032f4 <prvAddCurrentTaskToDelayedList>
    }
 8002ad6:	bf00      	nop
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200000cc 	.word	0x200000cc

08002ae4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b08b      	sub	sp, #44	; 0x2c
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afe:	f383 8811 	msr	BASEPRI, r3
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	60fb      	str	r3, [r7, #12]
    }
 8002b0c:	bf00      	nop
 8002b0e:	e7fe      	b.n	8002b0e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	6a3a      	ldr	r2, [r7, #32]
 8002b1c:	6a12      	ldr	r2, [r2, #32]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	6a3a      	ldr	r2, [r7, #32]
 8002b26:	69d2      	ldr	r2, [r2, #28]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	3318      	adds	r3, #24
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d103      	bne.n	8002b3e <xTaskRemoveFromEventList+0x5a>
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	6a1a      	ldr	r2, [r3, #32]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	2200      	movs	r2, #0
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	1e5a      	subs	r2, r3, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b4e:	4b4a      	ldr	r3, [pc, #296]	; (8002c78 <xTaskRemoveFromEventList+0x194>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d15e      	bne.n	8002c14 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	6a3a      	ldr	r2, [r7, #32]
 8002b62:	68d2      	ldr	r2, [r2, #12]
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	6a3a      	ldr	r2, [r7, #32]
 8002b6c:	6892      	ldr	r2, [r2, #8]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	3304      	adds	r3, #4
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d103      	bne.n	8002b84 <xTaskRemoveFromEventList+0xa0>
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	2200      	movs	r2, #0
 8002b88:	615a      	str	r2, [r3, #20]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	1e5a      	subs	r2, r3, #1
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	2201      	movs	r2, #1
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	4b37      	ldr	r3, [pc, #220]	; (8002c7c <xTaskRemoveFromEventList+0x198>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	4a36      	ldr	r2, [pc, #216]	; (8002c7c <xTaskRemoveFromEventList+0x198>)
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002baa:	4935      	ldr	r1, [pc, #212]	; (8002c80 <xTaskRemoveFromEventList+0x19c>)
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	6a3a      	ldr	r2, [r7, #32]
 8002bd0:	3204      	adds	r2, #4
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	1d1a      	adds	r2, r3, #4
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4a25      	ldr	r2, [pc, #148]	; (8002c80 <xTaskRemoveFromEventList+0x19c>)
 8002bea:	441a      	add	r2, r3
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	615a      	str	r2, [r3, #20]
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf4:	4922      	ldr	r1, [pc, #136]	; (8002c80 <xTaskRemoveFromEventList+0x19c>)
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	1c59      	adds	r1, r3, #1
 8002c04:	481e      	ldr	r0, [pc, #120]	; (8002c80 <xTaskRemoveFromEventList+0x19c>)
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4403      	add	r3, r0
 8002c10:	6019      	str	r1, [r3, #0]
 8002c12:	e01b      	b.n	8002c4c <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c14:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <xTaskRemoveFromEventList+0x1a0>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	61da      	str	r2, [r3, #28]
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	621a      	str	r2, [r3, #32]
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	6a3a      	ldr	r2, [r7, #32]
 8002c2e:	3218      	adds	r2, #24
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	f103 0218 	add.w	r2, r3, #24
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	4a11      	ldr	r2, [pc, #68]	; (8002c84 <xTaskRemoveFromEventList+0x1a0>)
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <xTaskRemoveFromEventList+0x1a0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	3301      	adds	r3, #1
 8002c48:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <xTaskRemoveFromEventList+0x1a0>)
 8002c4a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c50:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <xTaskRemoveFromEventList+0x1a4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d905      	bls.n	8002c66 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <xTaskRemoveFromEventList+0x1a8>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e001      	b.n	8002c6a <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	372c      	adds	r7, #44	; 0x2c
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	200001cc 	.word	0x200001cc
 8002c7c:	200001ac 	.word	0x200001ac
 8002c80:	200000d0 	.word	0x200000d0
 8002c84:	20000164 	.word	0x20000164
 8002c88:	200000cc 	.word	0x200000cc
 8002c8c:	200001b8 	.word	0x200001b8

08002c90 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <vTaskInternalSetTimeOutState+0x24>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <vTaskInternalSetTimeOutState+0x28>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	605a      	str	r2, [r3, #4]
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	200001bc 	.word	0x200001bc
 8002cb8:	200001a8 	.word	0x200001a8

08002cbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	613b      	str	r3, [r7, #16]
    }
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10a      	bne.n	8002cfe <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	60fb      	str	r3, [r7, #12]
    }
 8002cfa:	bf00      	nop
 8002cfc:	e7fe      	b.n	8002cfc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002cfe:	f000 feef 	bl	8003ae0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002d02:	4b1f      	ldr	r3, [pc, #124]	; (8002d80 <xTaskCheckForTimeOut+0xc4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d102      	bne.n	8002d22 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	e026      	b.n	8002d70 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <xTaskCheckForTimeOut+0xc8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d00a      	beq.n	8002d44 <xTaskCheckForTimeOut+0x88>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d305      	bcc.n	8002d44 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	e015      	b.n	8002d70 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d20b      	bcs.n	8002d66 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	1ad2      	subs	r2, r2, r3
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff ff98 	bl	8002c90 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61fb      	str	r3, [r7, #28]
 8002d64:	e004      	b.n	8002d70 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002d70:	f000 fee6 	bl	8003b40 <vPortExitCritical>

    return xReturn;
 8002d74:	69fb      	ldr	r3, [r7, #28]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3720      	adds	r7, #32
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	200001a8 	.word	0x200001a8
 8002d84:	200001bc 	.word	0x200001bc

08002d88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <vTaskMissedYield+0x14>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
}
 8002d92:	bf00      	nop
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	200001b8 	.word	0x200001b8

08002da0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002da8:	f000 f852 	bl	8002e50 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <prvIdleTask+0x28>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d9f9      	bls.n	8002da8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <prvIdleTask+0x2c>)
 8002db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002dc4:	e7f0      	b.n	8002da8 <prvIdleTask+0x8>
 8002dc6:	bf00      	nop
 8002dc8:	200000d0 	.word	0x200000d0
 8002dcc:	e000ed04 	.word	0xe000ed04

08002dd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	e00c      	b.n	8002df6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <prvInitialiseTaskLists+0x60>)
 8002de8:	4413      	add	r3, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fd96 	bl	800191c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3301      	adds	r3, #1
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d9ef      	bls.n	8002ddc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002dfc:	480d      	ldr	r0, [pc, #52]	; (8002e34 <prvInitialiseTaskLists+0x64>)
 8002dfe:	f7fe fd8d 	bl	800191c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e02:	480d      	ldr	r0, [pc, #52]	; (8002e38 <prvInitialiseTaskLists+0x68>)
 8002e04:	f7fe fd8a 	bl	800191c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e08:	480c      	ldr	r0, [pc, #48]	; (8002e3c <prvInitialiseTaskLists+0x6c>)
 8002e0a:	f7fe fd87 	bl	800191c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002e0e:	480c      	ldr	r0, [pc, #48]	; (8002e40 <prvInitialiseTaskLists+0x70>)
 8002e10:	f7fe fd84 	bl	800191c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002e14:	480b      	ldr	r0, [pc, #44]	; (8002e44 <prvInitialiseTaskLists+0x74>)
 8002e16:	f7fe fd81 	bl	800191c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <prvInitialiseTaskLists+0x78>)
 8002e1c:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <prvInitialiseTaskLists+0x64>)
 8002e1e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <prvInitialiseTaskLists+0x7c>)
 8002e22:	4a05      	ldr	r2, [pc, #20]	; (8002e38 <prvInitialiseTaskLists+0x68>)
 8002e24:	601a      	str	r2, [r3, #0]
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200000d0 	.word	0x200000d0
 8002e34:	20000134 	.word	0x20000134
 8002e38:	20000148 	.word	0x20000148
 8002e3c:	20000164 	.word	0x20000164
 8002e40:	20000178 	.word	0x20000178
 8002e44:	20000190 	.word	0x20000190
 8002e48:	2000015c 	.word	0x2000015c
 8002e4c:	20000160 	.word	0x20000160

08002e50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e56:	e019      	b.n	8002e8c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002e58:	f000 fe42 	bl	8003ae0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e5c:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <prvCheckTasksWaitingTermination+0x50>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3304      	adds	r3, #4
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fe fddd 	bl	8001a28 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <prvCheckTasksWaitingTermination+0x54>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	4a0b      	ldr	r2, [pc, #44]	; (8002ea4 <prvCheckTasksWaitingTermination+0x54>)
 8002e76:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <prvCheckTasksWaitingTermination+0x58>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <prvCheckTasksWaitingTermination+0x58>)
 8002e80:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002e82:	f000 fe5d 	bl	8003b40 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f810 	bl	8002eac <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <prvCheckTasksWaitingTermination+0x58>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1e1      	bne.n	8002e58 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000178 	.word	0x20000178
 8002ea4:	200001a4 	.word	0x200001a4
 8002ea8:	2000018c 	.word	0x2000018c

08002eac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 ffc9 	bl	8003e50 <vPortFree>
            vPortFree( pxTCB );
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 ffc6 	bl	8003e50 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <prvResetNextTaskUnblockTime+0x2c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d104      	bne.n	8002ee4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <prvResetNextTaskUnblockTime+0x30>)
 8002edc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002ee2:	e005      	b.n	8002ef0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ee4:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <prvResetNextTaskUnblockTime+0x2c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a03      	ldr	r2, [pc, #12]	; (8002efc <prvResetNextTaskUnblockTime+0x30>)
 8002eee:	6013      	str	r3, [r2, #0]
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	2000015c 	.word	0x2000015c
 8002efc:	200001c4 	.word	0x200001c4

08002f00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <xTaskGetSchedulerState+0x34>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d102      	bne.n	8002f14 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	607b      	str	r3, [r7, #4]
 8002f12:	e008      	b.n	8002f26 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <xTaskGetSchedulerState+0x38>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d102      	bne.n	8002f22 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	607b      	str	r3, [r7, #4]
 8002f20:	e001      	b.n	8002f26 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002f22:	2300      	movs	r3, #0
 8002f24:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002f26:	687b      	ldr	r3, [r7, #4]
    }
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	200001b0 	.word	0x200001b0
 8002f38:	200001cc 	.word	0x200001cc

08002f3c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	613b      	str	r3, [r7, #16]
    }
 8002f62:	bf00      	nop
 8002f64:	e7fe      	b.n	8002f64 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002f66:	f000 fdbb 	bl	8003ae0 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002f6a:	4b32      	ldr	r3, [pc, #200]	; (8003034 <xTaskGenericNotifyWait+0xf8>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4413      	add	r3, r2
 8002f72:	3354      	adds	r3, #84	; 0x54
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d022      	beq.n	8002fc2 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <xTaskGenericNotifyWait+0xf8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	3214      	adds	r2, #20
 8002f84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	43d2      	mvns	r2, r2
 8002f8c:	4011      	ands	r1, r2
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	3214      	adds	r2, #20
 8002f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002f96:	4b27      	ldr	r3, [pc, #156]	; (8003034 <xTaskGenericNotifyWait+0xf8>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3354      	adds	r3, #84	; 0x54
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00b      	beq.n	8002fc2 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002faa:	2101      	movs	r1, #1
 8002fac:	6a38      	ldr	r0, [r7, #32]
 8002fae:	f000 f9a1 	bl	80032f4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002fb2:	4b21      	ldr	r3, [pc, #132]	; (8003038 <xTaskGenericNotifyWait+0xfc>)
 8002fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002fc2:	f000 fdbd 	bl	8003b40 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002fc6:	f000 fd8b 	bl	8003ae0 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002fd0:	4b18      	ldr	r3, [pc, #96]	; (8003034 <xTaskGenericNotifyWait+0xf8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	3214      	adds	r2, #20
 8002fd8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <xTaskGenericNotifyWait+0xf8>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3354      	adds	r3, #84	; 0x54
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d002      	beq.n	8002ff8 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e00e      	b.n	8003016 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <xTaskGenericNotifyWait+0xf8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	3214      	adds	r2, #20
 8003000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	43d2      	mvns	r2, r2
 8003008:	4011      	ands	r1, r2
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	3214      	adds	r2, #20
 800300e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003012:	2301      	movs	r3, #1
 8003014:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <xTaskGenericNotifyWait+0xf8>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4413      	add	r3, r2
 800301e:	3354      	adds	r3, #84	; 0x54
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003024:	f000 fd8c 	bl	8003b40 <vPortExitCritical>

        return xReturn;
 8003028:	697b      	ldr	r3, [r7, #20]
    }
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	200000cc 	.word	0x200000cc
 8003038:	e000ed04 	.word	0xe000ed04

0800303c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800303c:	b580      	push	{r7, lr}
 800303e:	b092      	sub	sp, #72	; 0x48
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800304a:	2301      	movs	r3, #1
 800304c:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003066:	bf00      	nop
 8003068:	e7fe      	b.n	8003068 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003086:	f000 fdeb 	bl	8003c60 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800308e:	f3ef 8211 	mrs	r2, BASEPRI
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	623a      	str	r2, [r7, #32]
 80030a4:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80030a6:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80030aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d006      	beq.n	80030be <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80030b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	3214      	adds	r2, #20
 80030b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030bc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80030be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4413      	add	r3, r2
 80030c4:	3354      	adds	r3, #84	; 0x54
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80030cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	4413      	add	r3, r2
 80030d2:	3354      	adds	r3, #84	; 0x54
 80030d4:	2202      	movs	r2, #2
 80030d6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d83b      	bhi.n	8003156 <xTaskGenericNotifyFromISR+0x11a>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <xTaskGenericNotifyFromISR+0xa8>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	08003175 	.word	0x08003175
 80030e8:	080030f9 	.word	0x080030f9
 80030ec:	08003115 	.word	0x08003115
 80030f0:	0800312d 	.word	0x0800312d
 80030f4:	0800313b 	.word	0x0800313b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80030f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	3214      	adds	r2, #20
 80030fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	ea42 0103 	orr.w	r1, r2, r3
 8003108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	3214      	adds	r2, #20
 800310e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003112:	e032      	b.n	800317a <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	3214      	adds	r2, #20
 800311a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311e:	1c59      	adds	r1, r3, #1
 8003120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	3214      	adds	r2, #20
 8003126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800312a:	e026      	b.n	800317a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800312c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	3214      	adds	r2, #20
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003138:	e01f      	b.n	800317a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800313a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800313e:	2b02      	cmp	r3, #2
 8003140:	d006      	beq.n	8003150 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	3214      	adds	r2, #20
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800314e:	e014      	b.n	800317a <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8003150:	2300      	movs	r3, #0
 8003152:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8003154:	e011      	b.n	800317a <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003156:	4b60      	ldr	r3, [pc, #384]	; (80032d8 <xTaskGenericNotifyFromISR+0x29c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00c      	beq.n	8003178 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	61bb      	str	r3, [r7, #24]
    }
 8003170:	bf00      	nop
 8003172:	e7fe      	b.n	8003172 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003174:	bf00      	nop
 8003176:	e000      	b.n	800317a <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8003178:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800317a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800317e:	2b01      	cmp	r3, #1
 8003180:	f040 809e 	bne.w	80032c0 <xTaskGenericNotifyFromISR+0x284>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <xTaskGenericNotifyFromISR+0x166>
        __asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	617b      	str	r3, [r7, #20]
    }
 800319e:	bf00      	nop
 80031a0:	e7fe      	b.n	80031a0 <xTaskGenericNotifyFromISR+0x164>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031a2:	4b4e      	ldr	r3, [pc, #312]	; (80032dc <xTaskGenericNotifyFromISR+0x2a0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d15e      	bne.n	8003268 <xTaskGenericNotifyFromISR+0x22c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80031aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	633b      	str	r3, [r7, #48]	; 0x30
 80031b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031b6:	68d2      	ldr	r2, [r2, #12]
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031c0:	6892      	ldr	r2, [r2, #8]
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ca:	3304      	adds	r3, #4
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d103      	bne.n	80031d8 <xTaskGenericNotifyFromISR+0x19c>
 80031d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	605a      	str	r2, [r3, #4]
 80031d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031da:	2200      	movs	r2, #0
 80031dc:	615a      	str	r2, [r3, #20]
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	1e5a      	subs	r2, r3, #1
 80031e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80031e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	2201      	movs	r2, #1
 80031ee:	409a      	lsls	r2, r3
 80031f0:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <xTaskGenericNotifyFromISR+0x2a4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	4a3a      	ldr	r2, [pc, #232]	; (80032e0 <xTaskGenericNotifyFromISR+0x2a4>)
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fe:	4939      	ldr	r1, [pc, #228]	; (80032e4 <xTaskGenericNotifyFromISR+0x2a8>)
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	3304      	adds	r3, #4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003214:	609a      	str	r2, [r3, #8]
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003224:	3204      	adds	r2, #4
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800322a:	1d1a      	adds	r2, r3, #4
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4a29      	ldr	r2, [pc, #164]	; (80032e4 <xTaskGenericNotifyFromISR+0x2a8>)
 800323e:	441a      	add	r2, r3
 8003240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003242:	615a      	str	r2, [r3, #20]
 8003244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003248:	4926      	ldr	r1, [pc, #152]	; (80032e4 <xTaskGenericNotifyFromISR+0x2a8>)
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	1c59      	adds	r1, r3, #1
 8003258:	4822      	ldr	r0, [pc, #136]	; (80032e4 <xTaskGenericNotifyFromISR+0x2a8>)
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4403      	add	r3, r0
 8003264:	6019      	str	r1, [r3, #0]
 8003266:	e01b      	b.n	80032a0 <xTaskGenericNotifyFromISR+0x264>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003268:	4b1f      	ldr	r3, [pc, #124]	; (80032e8 <xTaskGenericNotifyFromISR+0x2ac>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	637b      	str	r3, [r7, #52]	; 0x34
 800326e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003272:	61da      	str	r2, [r3, #28]
 8003274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800327a:	621a      	str	r2, [r3, #32]
 800327c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003282:	3218      	adds	r2, #24
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003288:	f103 0218 	add.w	r2, r3, #24
 800328c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003292:	4a15      	ldr	r2, [pc, #84]	; (80032e8 <xTaskGenericNotifyFromISR+0x2ac>)
 8003294:	629a      	str	r2, [r3, #40]	; 0x28
 8003296:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <xTaskGenericNotifyFromISR+0x2ac>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3301      	adds	r3, #1
 800329c:	4a12      	ldr	r2, [pc, #72]	; (80032e8 <xTaskGenericNotifyFromISR+0x2ac>)
 800329e:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <xTaskGenericNotifyFromISR+0x2b0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d908      	bls.n	80032c0 <xTaskGenericNotifyFromISR+0x284>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80032ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <xTaskGenericNotifyFromISR+0x27e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80032b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80032ba:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <xTaskGenericNotifyFromISR+0x2b4>)
 80032bc:	2201      	movs	r2, #1
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c2:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80032ca:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80032cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 80032ce:	4618      	mov	r0, r3
 80032d0:	3748      	adds	r7, #72	; 0x48
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200001a8 	.word	0x200001a8
 80032dc:	200001cc 	.word	0x200001cc
 80032e0:	200001ac 	.word	0x200001ac
 80032e4:	200000d0 	.word	0x200000d0
 80032e8:	20000164 	.word	0x20000164
 80032ec:	200000cc 	.word	0x200000cc
 80032f0:	200001b8 	.word	0x200001b8

080032f4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80032fe:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003304:	4b35      	ldr	r3, [pc, #212]	; (80033dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3304      	adds	r3, #4
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe fb8c 	bl	8001a28 <uxListRemove>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10b      	bne.n	800332e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003316:	4b31      	ldr	r3, [pc, #196]	; (80033dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	2201      	movs	r2, #1
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43da      	mvns	r2, r3
 8003324:	4b2e      	ldr	r3, [pc, #184]	; (80033e0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4013      	ands	r3, r2
 800332a:	4a2d      	ldr	r2, [pc, #180]	; (80033e0 <prvAddCurrentTaskToDelayedList+0xec>)
 800332c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d124      	bne.n	8003380 <prvAddCurrentTaskToDelayedList+0x8c>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d021      	beq.n	8003380 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800333c:	4b29      	ldr	r3, [pc, #164]	; (80033e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	4b26      	ldr	r3, [pc, #152]	; (80033dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	4b24      	ldr	r3, [pc, #144]	; (80033dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	6892      	ldr	r2, [r2, #8]
 8003352:	60da      	str	r2, [r3, #12]
 8003354:	4b21      	ldr	r3, [pc, #132]	; (80033dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	3204      	adds	r2, #4
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	1d1a      	adds	r2, r3, #4
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	609a      	str	r2, [r3, #8]
 800336a:	4b1c      	ldr	r3, [pc, #112]	; (80033dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1d      	ldr	r2, [pc, #116]	; (80033e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003370:	615a      	str	r2, [r3, #20]
 8003372:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	4a1a      	ldr	r2, [pc, #104]	; (80033e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800337e:	e026      	b.n	80033ce <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003388:	4b14      	ldr	r3, [pc, #80]	; (80033dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	429a      	cmp	r2, r3
 8003396:	d209      	bcs.n	80033ac <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003398:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3304      	adds	r3, #4
 80033a2:	4619      	mov	r1, r3
 80033a4:	4610      	mov	r0, r2
 80033a6:	f7fe fb07 	bl	80019b8 <vListInsert>
}
 80033aa:	e010      	b.n	80033ce <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <prvAddCurrentTaskToDelayedList+0xf8>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <prvAddCurrentTaskToDelayedList+0xe8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3304      	adds	r3, #4
 80033b6:	4619      	mov	r1, r3
 80033b8:	4610      	mov	r0, r2
 80033ba:	f7fe fafd 	bl	80019b8 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80033be:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d202      	bcs.n	80033ce <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80033c8:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6013      	str	r3, [r2, #0]
}
 80033ce:	bf00      	nop
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	200001a8 	.word	0x200001a8
 80033dc:	200000cc 	.word	0x200000cc
 80033e0:	200001ac 	.word	0x200001ac
 80033e4:	20000190 	.word	0x20000190
 80033e8:	20000160 	.word	0x20000160
 80033ec:	2000015c 	.word	0x2000015c
 80033f0:	200001c4 	.word	0x200001c4

080033f4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80033fe:	f000 fa45 	bl	800388c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <xTimerCreateTimerTask+0x54>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800340a:	4b10      	ldr	r3, [pc, #64]	; (800344c <xTimerCreateTimerTask+0x58>)
 800340c:	9301      	str	r3, [sp, #4]
 800340e:	2302      	movs	r3, #2
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	2300      	movs	r3, #0
 8003414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003418:	490d      	ldr	r1, [pc, #52]	; (8003450 <xTimerCreateTimerTask+0x5c>)
 800341a:	480e      	ldr	r0, [pc, #56]	; (8003454 <xTimerCreateTimerTask+0x60>)
 800341c:	f7fe fe20 	bl	8002060 <xTaskCreate>
 8003420:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	603b      	str	r3, [r7, #0]
    }
 800343a:	bf00      	nop
 800343c:	e7fe      	b.n	800343c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800343e:	687b      	ldr	r3, [r7, #4]
    }
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000200 	.word	0x20000200
 800344c:	20000204 	.word	0x20000204
 8003450:	08004110 	.word	0x08004110
 8003454:	080034fd 	.word	0x080034fd

08003458 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003464:	e008      	b.n	8003478 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	4413      	add	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	18d1      	adds	r1, r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f8db 	bl	8003640 <prvInsertTimerInActiveList>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1ea      	bne.n	8003466 <prvReloadTimer+0xe>
        }
    }
 8003490:	bf00      	nop
 8003492:	bf00      	nop
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034a6:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <prvProcessExpiredTimer+0x5c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3304      	adds	r3, #4
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fe fab7 	bl	8001a28 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f7ff ffc3 	bl	8003458 <prvReloadTimer>
 80034d2:	e008      	b.n	80034e6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034da:	f023 0301 	bic.w	r3, r3, #1
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	4798      	blx	r3
    }
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200001f8 	.word	0x200001f8

080034fc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003504:	f107 0308 	add.w	r3, r7, #8
 8003508:	4618      	mov	r0, r3
 800350a:	f000 f857 	bl	80035bc <prvGetNextExpireTime>
 800350e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4619      	mov	r1, r3
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f803 	bl	8003520 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800351a:	f000 f8d3 	bl	80036c4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800351e:	e7f1      	b.n	8003504 <prvTimerTask+0x8>

08003520 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800352a:	f7fe ffe9 	bl	8002500 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800352e:	f107 0308 	add.w	r3, r7, #8
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f864 	bl	8003600 <prvSampleTimeNow>
 8003538:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d130      	bne.n	80035a2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10a      	bne.n	800355c <prvProcessTimerOrBlockTask+0x3c>
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	429a      	cmp	r2, r3
 800354c:	d806      	bhi.n	800355c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800354e:	f7fe ffe5 	bl	800251c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003552:	68f9      	ldr	r1, [r7, #12]
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ffa1 	bl	800349c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800355a:	e024      	b.n	80035a6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003562:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <prvProcessTimerOrBlockTask+0x90>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <prvProcessTimerOrBlockTask+0x50>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <prvProcessTimerOrBlockTask+0x52>
 8003570:	2300      	movs	r3, #0
 8003572:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <prvProcessTimerOrBlockTask+0x94>)
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	4619      	mov	r1, r3
 8003582:	f7fe fd39 	bl	8001ff8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003586:	f7fe ffc9 	bl	800251c <xTaskResumeAll>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <prvProcessTimerOrBlockTask+0x98>)
 8003592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	f3bf 8f6f 	isb	sy
    }
 80035a0:	e001      	b.n	80035a6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80035a2:	f7fe ffbb 	bl	800251c <xTaskResumeAll>
    }
 80035a6:	bf00      	nop
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	200001fc 	.word	0x200001fc
 80035b4:	20000200 	.word	0x20000200
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80035c4:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <prvGetNextExpireTime+0x40>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <prvGetNextExpireTime+0x16>
 80035ce:	2201      	movs	r2, #1
 80035d0:	e000      	b.n	80035d4 <prvGetNextExpireTime+0x18>
 80035d2:	2200      	movs	r2, #0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d105      	bne.n	80035ec <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80035e0:	4b06      	ldr	r3, [pc, #24]	; (80035fc <prvGetNextExpireTime+0x40>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	e001      	b.n	80035f0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80035f0:	68fb      	ldr	r3, [r7, #12]
    }
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	200001f8 	.word	0x200001f8

08003600 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003608:	f7ff f884 	bl	8002714 <xTaskGetTickCount>
 800360c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <prvSampleTimeNow+0x3c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	429a      	cmp	r2, r3
 8003616:	d205      	bcs.n	8003624 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003618:	f000 f912 	bl	8003840 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	e002      	b.n	800362a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800362a:	4a04      	ldr	r2, [pc, #16]	; (800363c <prvSampleTimeNow+0x3c>)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003630:	68fb      	ldr	r3, [r7, #12]
    }
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000208 	.word	0x20000208

08003640 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	429a      	cmp	r2, r3
 8003664:	d812      	bhi.n	800368c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	1ad2      	subs	r2, r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	429a      	cmp	r2, r3
 8003672:	d302      	bcc.n	800367a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003674:	2301      	movs	r3, #1
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	e01b      	b.n	80036b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800367a:	4b10      	ldr	r3, [pc, #64]	; (80036bc <prvInsertTimerInActiveList+0x7c>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3304      	adds	r3, #4
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f7fe f997 	bl	80019b8 <vListInsert>
 800368a:	e012      	b.n	80036b2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d206      	bcs.n	80036a2 <prvInsertTimerInActiveList+0x62>
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d302      	bcc.n	80036a2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800369c:	2301      	movs	r3, #1
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	e007      	b.n	80036b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80036a2:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <prvInsertTimerInActiveList+0x80>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	3304      	adds	r3, #4
 80036aa:	4619      	mov	r1, r3
 80036ac:	4610      	mov	r0, r2
 80036ae:	f7fe f983 	bl	80019b8 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80036b2:	697b      	ldr	r3, [r7, #20]
    }
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	200001fc 	.word	0x200001fc
 80036c0:	200001f8 	.word	0x200001f8

080036c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80036ca:	e0a6      	b.n	800381a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f2c0 80a3 	blt.w	800381a <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d004      	beq.n	80036ea <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fe f99f 	bl	8001a28 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036ea:	1d3b      	adds	r3, r7, #4
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff87 	bl	8003600 <prvSampleTimeNow>
 80036f2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	f200 808d 	bhi.w	8003818 <prvProcessReceivedCommands+0x154>
 80036fe:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <prvProcessReceivedCommands+0x40>)
 8003700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003704:	08003729 	.word	0x08003729
 8003708:	08003729 	.word	0x08003729
 800370c:	08003791 	.word	0x08003791
 8003710:	080037a5 	.word	0x080037a5
 8003714:	080037ef 	.word	0x080037ef
 8003718:	08003729 	.word	0x08003729
 800371c:	08003729 	.word	0x08003729
 8003720:	08003791 	.word	0x08003791
 8003724:	080037a5 	.word	0x080037a5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	b2da      	uxtb	r2, r3
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	18d1      	adds	r1, r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	69f8      	ldr	r0, [r7, #28]
 8003748:	f7ff ff7a 	bl	8003640 <prvInsertTimerInActiveList>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d063      	beq.n	800381a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d009      	beq.n	8003774 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	4413      	add	r3, r2
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4619      	mov	r1, r3
 800376c:	69f8      	ldr	r0, [r7, #28]
 800376e:	f7ff fe73 	bl	8003458 <prvReloadTimer>
 8003772:	e008      	b.n	8003786 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	b2da      	uxtb	r2, r3
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	69f8      	ldr	r0, [r7, #28]
 800378c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800378e:	e044      	b.n	800381a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	b2da      	uxtb	r2, r3
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80037a2:	e03a      	b.n	800381a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10a      	bne.n	80037da <prvProcessReceivedCommands+0x116>
        __asm volatile
 80037c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	617b      	str	r3, [r7, #20]
    }
 80037d6:	bf00      	nop
 80037d8:	e7fe      	b.n	80037d8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	18d1      	adds	r1, r2, r3
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	69f8      	ldr	r0, [r7, #28]
 80037e8:	f7ff ff2a 	bl	8003640 <prvInsertTimerInActiveList>
                        break;
 80037ec:	e015      	b.n	800381a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d103      	bne.n	8003804 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80037fc:	69f8      	ldr	r0, [r7, #28]
 80037fe:	f000 fb27 	bl	8003e50 <vPortFree>
 8003802:	e00a      	b.n	800381a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	b2da      	uxtb	r2, r3
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003816:	e000      	b.n	800381a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003818:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <prvProcessReceivedCommands+0x178>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f107 0108 	add.w	r1, r7, #8
 8003822:	2200      	movs	r2, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe fa2b 	bl	8001c80 <xQueueReceive>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	f47f af4d 	bne.w	80036cc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003832:	bf00      	nop
 8003834:	bf00      	nop
 8003836:	3720      	adds	r7, #32
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000200 	.word	0x20000200

08003840 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003846:	e009      	b.n	800385c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003848:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <prvSwitchTimerLists+0x44>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003852:	f04f 31ff 	mov.w	r1, #4294967295
 8003856:	6838      	ldr	r0, [r7, #0]
 8003858:	f7ff fe20 	bl	800349c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800385c:	4b09      	ldr	r3, [pc, #36]	; (8003884 <prvSwitchTimerLists+0x44>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003866:	4b07      	ldr	r3, [pc, #28]	; (8003884 <prvSwitchTimerLists+0x44>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <prvSwitchTimerLists+0x48>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a04      	ldr	r2, [pc, #16]	; (8003884 <prvSwitchTimerLists+0x44>)
 8003872:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003874:	4a04      	ldr	r2, [pc, #16]	; (8003888 <prvSwitchTimerLists+0x48>)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6013      	str	r3, [r2, #0]
    }
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	200001f8 	.word	0x200001f8
 8003888:	200001fc 	.word	0x200001fc

0800388c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003890:	f000 f926 	bl	8003ae0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003894:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <prvCheckForValidListAndQueue+0x54>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d11d      	bne.n	80038d8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800389c:	4811      	ldr	r0, [pc, #68]	; (80038e4 <prvCheckForValidListAndQueue+0x58>)
 800389e:	f7fe f83d 	bl	800191c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80038a2:	4811      	ldr	r0, [pc, #68]	; (80038e8 <prvCheckForValidListAndQueue+0x5c>)
 80038a4:	f7fe f83a 	bl	800191c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80038a8:	4b10      	ldr	r3, [pc, #64]	; (80038ec <prvCheckForValidListAndQueue+0x60>)
 80038aa:	4a0e      	ldr	r2, [pc, #56]	; (80038e4 <prvCheckForValidListAndQueue+0x58>)
 80038ac:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80038ae:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <prvCheckForValidListAndQueue+0x64>)
 80038b0:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <prvCheckForValidListAndQueue+0x5c>)
 80038b2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80038b4:	2200      	movs	r2, #0
 80038b6:	210c      	movs	r1, #12
 80038b8:	200a      	movs	r0, #10
 80038ba:	f7fe f96f 	bl	8001b9c <xQueueGenericCreate>
 80038be:	4603      	mov	r3, r0
 80038c0:	4a07      	ldr	r2, [pc, #28]	; (80038e0 <prvCheckForValidListAndQueue+0x54>)
 80038c2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <prvCheckForValidListAndQueue+0x54>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80038cc:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <prvCheckForValidListAndQueue+0x54>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4908      	ldr	r1, [pc, #32]	; (80038f4 <prvCheckForValidListAndQueue+0x68>)
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe fb42 	bl	8001f5c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80038d8:	f000 f932 	bl	8003b40 <vPortExitCritical>
    }
 80038dc:	bf00      	nop
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20000200 	.word	0x20000200
 80038e4:	200001d0 	.word	0x200001d0
 80038e8:	200001e4 	.word	0x200001e4
 80038ec:	200001f8 	.word	0x200001f8
 80038f0:	200001fc 	.word	0x200001fc
 80038f4:	08004118 	.word	0x08004118

080038f8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3b04      	subs	r3, #4
 8003908:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003910:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	3b04      	subs	r3, #4
 8003916:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f023 0201 	bic.w	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3b04      	subs	r3, #4
 8003926:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003928:	4a08      	ldr	r2, [pc, #32]	; (800394c <pxPortInitialiseStack+0x54>)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3b14      	subs	r3, #20
 8003932:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3b20      	subs	r3, #32
 800393e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003940:	68fb      	ldr	r3, [r7, #12]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	08003951 	.word	0x08003951

08003950 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8003956:	2300      	movs	r3, #0
 8003958:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800395a:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <prvTaskExitError+0x54>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003962:	d00a      	beq.n	800397a <prvTaskExitError+0x2a>
        __asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	60fb      	str	r3, [r7, #12]
    }
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <prvTaskExitError+0x28>
        __asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	60bb      	str	r3, [r7, #8]
    }
 800398c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800398e:	bf00      	nop
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0fc      	beq.n	8003990 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003996:	bf00      	nop
 8003998:	bf00      	nop
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000010 	.word	0x20000010
	...

080039b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80039b0:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <pxCurrentTCBConst2>)
 80039b2:	6819      	ldr	r1, [r3, #0]
 80039b4:	6808      	ldr	r0, [r1, #0]
 80039b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039ba:	f380 8809 	msr	PSP, r0
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f04f 0000 	mov.w	r0, #0
 80039c6:	f380 8811 	msr	BASEPRI, r0
 80039ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80039ce:	4770      	bx	lr

080039d0 <pxCurrentTCBConst2>:
 80039d0:	200000cc 	.word	0x200000cc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop

080039d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80039d8:	4806      	ldr	r0, [pc, #24]	; (80039f4 <prvPortStartFirstTask+0x1c>)
 80039da:	6800      	ldr	r0, [r0, #0]
 80039dc:	6800      	ldr	r0, [r0, #0]
 80039de:	f380 8808 	msr	MSP, r0
 80039e2:	b662      	cpsie	i
 80039e4:	b661      	cpsie	f
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	df00      	svc	0
 80039f0:	bf00      	nop
 80039f2:	0000      	.short	0x0000
 80039f4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80039f8:	bf00      	nop
 80039fa:	bf00      	nop

080039fc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a02:	4b32      	ldr	r3, [pc, #200]	; (8003acc <xPortStartScheduler+0xd0>)
 8003a04:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	22ff      	movs	r2, #255	; 0xff
 8003a12:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <xPortStartScheduler+0xd4>)
 8003a28:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <xPortStartScheduler+0xd8>)
 8003a2c:	2207      	movs	r2, #7
 8003a2e:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a30:	e009      	b.n	8003a46 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8003a32:	4b28      	ldr	r3, [pc, #160]	; (8003ad4 <xPortStartScheduler+0xd8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	4a26      	ldr	r2, [pc, #152]	; (8003ad4 <xPortStartScheduler+0xd8>)
 8003a3a:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4e:	2b80      	cmp	r3, #128	; 0x80
 8003a50:	d0ef      	beq.n	8003a32 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a52:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <xPortStartScheduler+0xd8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f1c3 0307 	rsb	r3, r3, #7
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d00a      	beq.n	8003a74 <xPortStartScheduler+0x78>
        __asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	60bb      	str	r3, [r7, #8]
    }
 8003a70:	bf00      	nop
 8003a72:	e7fe      	b.n	8003a72 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a74:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <xPortStartScheduler+0xd8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	4a16      	ldr	r2, [pc, #88]	; (8003ad4 <xPortStartScheduler+0xd8>)
 8003a7c:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <xPortStartScheduler+0xd8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a86:	4a13      	ldr	r2, [pc, #76]	; (8003ad4 <xPortStartScheduler+0xd8>)
 8003a88:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003a92:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <xPortStartScheduler+0xdc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a10      	ldr	r2, [pc, #64]	; (8003ad8 <xPortStartScheduler+0xdc>)
 8003a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a9c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003a9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ad8 <xPortStartScheduler+0xdc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a0d      	ldr	r2, [pc, #52]	; (8003ad8 <xPortStartScheduler+0xdc>)
 8003aa4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003aa8:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003aaa:	f000 f8b7 	bl	8003c1c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003aae:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <xPortStartScheduler+0xe0>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003ab4:	f7ff ff90 	bl	80039d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ab8:	f7fe ff50 	bl	800295c <vTaskSwitchContext>
    prvTaskExitError();
 8003abc:	f7ff ff48 	bl	8003950 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	e000e400 	.word	0xe000e400
 8003ad0:	2000020c 	.word	0x2000020c
 8003ad4:	20000210 	.word	0x20000210
 8003ad8:	e000ed20 	.word	0xe000ed20
 8003adc:	20000010 	.word	0x20000010

08003ae0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
        __asm volatile
 8003ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	607b      	str	r3, [r7, #4]
    }
 8003af8:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003afa:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <vPortEnterCritical+0x58>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3301      	adds	r3, #1
 8003b00:	4a0d      	ldr	r2, [pc, #52]	; (8003b38 <vPortEnterCritical+0x58>)
 8003b02:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <vPortEnterCritical+0x58>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d10f      	bne.n	8003b2c <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <vPortEnterCritical+0x5c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <vPortEnterCritical+0x4c>
        __asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	603b      	str	r3, [r7, #0]
    }
 8003b28:	bf00      	nop
 8003b2a:	e7fe      	b.n	8003b2a <vPortEnterCritical+0x4a>
    }
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20000010 	.word	0x20000010
 8003b3c:	e000ed04 	.word	0xe000ed04

08003b40 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003b46:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <vPortExitCritical+0x4c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <vPortExitCritical+0x24>
        __asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	607b      	str	r3, [r7, #4]
    }
 8003b60:	bf00      	nop
 8003b62:	e7fe      	b.n	8003b62 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <vPortExitCritical+0x4c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	4a08      	ldr	r2, [pc, #32]	; (8003b8c <vPortExitCritical+0x4c>)
 8003b6c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003b6e:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <vPortExitCritical+0x4c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d105      	bne.n	8003b82 <vPortExitCritical+0x42>
 8003b76:	2300      	movs	r3, #0
 8003b78:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	f383 8811 	msr	BASEPRI, r3
    }
 8003b80:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	20000010 	.word	0x20000010

08003b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003b90:	f3ef 8009 	mrs	r0, PSP
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <pxCurrentTCBConst>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ba0:	6010      	str	r0, [r2, #0]
 8003ba2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003ba6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003baa:	f380 8811 	msr	BASEPRI, r0
 8003bae:	f7fe fed5 	bl	800295c <vTaskSwitchContext>
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f380 8811 	msr	BASEPRI, r0
 8003bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003bbe:	6819      	ldr	r1, [r3, #0]
 8003bc0:	6808      	ldr	r0, [r1, #0]
 8003bc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bc6:	f380 8809 	msr	PSP, r0
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	4770      	bx	lr

08003bd0 <pxCurrentTCBConst>:
 8003bd0:	200000cc 	.word	0x200000cc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop

08003bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
        __asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	607b      	str	r3, [r7, #4]
    }
 8003bf0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003bf2:	f7fe fd9d 	bl	8002730 <xTaskIncrementTick>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <SysTick_Handler+0x40>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	2300      	movs	r3, #0
 8003c06:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f383 8811 	msr	BASEPRI, r3
    }
 8003c0e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <vPortSetupTimerInterrupt+0x30>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <vPortSetupTimerInterrupt+0x34>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <vPortSetupTimerInterrupt+0x38>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a09      	ldr	r2, [pc, #36]	; (8003c58 <vPortSetupTimerInterrupt+0x3c>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <vPortSetupTimerInterrupt+0x40>)
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c3e:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <vPortSetupTimerInterrupt+0x30>)
 8003c40:	2207      	movs	r2, #7
 8003c42:	601a      	str	r2, [r3, #0]
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr
 8003c4c:	e000e010 	.word	0xe000e010
 8003c50:	e000e018 	.word	0xe000e018
 8003c54:	20000000 	.word	0x20000000
 8003c58:	10624dd3 	.word	0x10624dd3
 8003c5c:	e000e014 	.word	0xe000e014

08003c60 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003c66:	f3ef 8305 	mrs	r3, IPSR
 8003c6a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b0f      	cmp	r3, #15
 8003c70:	d914      	bls.n	8003c9c <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003c72:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <vPortValidateInterruptPriority+0x6c>)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003c7c:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <vPortValidateInterruptPriority+0x70>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	7afa      	ldrb	r2, [r7, #11]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d20a      	bcs.n	8003c9c <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	607b      	str	r3, [r7, #4]
    }
 8003c98:	bf00      	nop
 8003c9a:	e7fe      	b.n	8003c9a <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003c9c:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <vPortValidateInterruptPriority+0x74>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <vPortValidateInterruptPriority+0x78>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d90a      	bls.n	8003cc2 <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	603b      	str	r3, [r7, #0]
    }
 8003cbe:	bf00      	nop
 8003cc0:	e7fe      	b.n	8003cc0 <vPortValidateInterruptPriority+0x60>
    }
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	e000e3f0 	.word	0xe000e3f0
 8003cd0:	2000020c 	.word	0x2000020c
 8003cd4:	e000ed0c 	.word	0xe000ed0c
 8003cd8:	20000210 	.word	0x20000210

08003cdc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08a      	sub	sp, #40	; 0x28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003ce8:	f7fe fc0a 	bl	8002500 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003cec:	4b53      	ldr	r3, [pc, #332]	; (8003e3c <pvPortMalloc+0x160>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003cf4:	f000 f908 	bl	8003f08 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d012      	beq.n	8003d24 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003cfe:	2208      	movs	r2, #8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	3308      	adds	r3, #8
 8003d0a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d804      	bhi.n	8003d20 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	e001      	b.n	8003d24 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	db70      	blt.n	8003e0c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d06d      	beq.n	8003e0c <pvPortMalloc+0x130>
 8003d30:	4b43      	ldr	r3, [pc, #268]	; (8003e40 <pvPortMalloc+0x164>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d868      	bhi.n	8003e0c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003d3a:	4b42      	ldr	r3, [pc, #264]	; (8003e44 <pvPortMalloc+0x168>)
 8003d3c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003d3e:	4b41      	ldr	r3, [pc, #260]	; (8003e44 <pvPortMalloc+0x168>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d44:	e004      	b.n	8003d50 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d903      	bls.n	8003d62 <pvPortMalloc+0x86>
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f1      	bne.n	8003d46 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003d62:	4b36      	ldr	r3, [pc, #216]	; (8003e3c <pvPortMalloc+0x160>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d04f      	beq.n	8003e0c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2208      	movs	r2, #8
 8003d72:	4413      	add	r3, r2
 8003d74:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	1ad2      	subs	r2, r2, r3
 8003d86:	2308      	movs	r3, #8
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d91f      	bls.n	8003dce <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4413      	add	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <pvPortMalloc+0xda>
        __asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	613b      	str	r3, [r7, #16]
    }
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	1ad2      	subs	r2, r2, r3
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003dc8:	6978      	ldr	r0, [r7, #20]
 8003dca:	f000 f8f9 	bl	8003fc0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003dce:	4b1c      	ldr	r3, [pc, #112]	; (8003e40 <pvPortMalloc+0x164>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <pvPortMalloc+0x164>)
 8003dda:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ddc:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <pvPortMalloc+0x164>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <pvPortMalloc+0x16c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d203      	bcs.n	8003df0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003de8:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <pvPortMalloc+0x164>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <pvPortMalloc+0x16c>)
 8003dee:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003e02:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <pvPortMalloc+0x170>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3301      	adds	r3, #1
 8003e08:	4a10      	ldr	r2, [pc, #64]	; (8003e4c <pvPortMalloc+0x170>)
 8003e0a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003e0c:	f7fe fb86 	bl	800251c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <pvPortMalloc+0x154>
        __asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	60fb      	str	r3, [r7, #12]
    }
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <pvPortMalloc+0x152>
    return pvReturn;
 8003e30:	69fb      	ldr	r3, [r7, #28]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3728      	adds	r7, #40	; 0x28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20002a1c 	.word	0x20002a1c
 8003e40:	20002a20 	.word	0x20002a20
 8003e44:	20002a14 	.word	0x20002a14
 8003e48:	20002a24 	.word	0x20002a24
 8003e4c:	20002a28 	.word	0x20002a28

08003e50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d049      	beq.n	8003ef6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003e62:	2308      	movs	r3, #8
 8003e64:	425b      	negs	r3, r3
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4413      	add	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	db0a      	blt.n	8003e8e <vPortFree+0x3e>
        __asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	60fb      	str	r3, [r7, #12]
    }
 8003e8a:	bf00      	nop
 8003e8c:	e7fe      	b.n	8003e8c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <vPortFree+0x5c>
        __asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	60bb      	str	r3, [r7, #8]
    }
 8003ea8:	bf00      	nop
 8003eaa:	e7fe      	b.n	8003eaa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	0fdb      	lsrs	r3, r3, #31
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d01c      	beq.n	8003ef6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d118      	bne.n	8003ef6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003ed0:	f7fe fb16 	bl	8002500 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <vPortFree+0xb0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4413      	add	r3, r2
 8003ede:	4a08      	ldr	r2, [pc, #32]	; (8003f00 <vPortFree+0xb0>)
 8003ee0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ee2:	6938      	ldr	r0, [r7, #16]
 8003ee4:	f000 f86c 	bl	8003fc0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <vPortFree+0xb4>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3301      	adds	r3, #1
 8003eee:	4a05      	ldr	r2, [pc, #20]	; (8003f04 <vPortFree+0xb4>)
 8003ef0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003ef2:	f7fe fb13 	bl	800251c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003ef6:	bf00      	nop
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20002a20 	.word	0x20002a20
 8003f04:	20002a2c 	.word	0x20002a2c

08003f08 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003f12:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003f14:	4b25      	ldr	r3, [pc, #148]	; (8003fac <prvHeapInit+0xa4>)
 8003f16:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00c      	beq.n	8003f3c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3307      	adds	r3, #7
 8003f26:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0307 	bic.w	r3, r3, #7
 8003f2e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	4a1d      	ldr	r2, [pc, #116]	; (8003fac <prvHeapInit+0xa4>)
 8003f38:	4413      	add	r3, r2
 8003f3a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f40:	4a1b      	ldr	r2, [pc, #108]	; (8003fb0 <prvHeapInit+0xa8>)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003f46:	4b1a      	ldr	r3, [pc, #104]	; (8003fb0 <prvHeapInit+0xa8>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	4413      	add	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003f54:	2208      	movs	r2, #8
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0307 	bic.w	r3, r3, #7
 8003f62:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4a13      	ldr	r2, [pc, #76]	; (8003fb4 <prvHeapInit+0xac>)
 8003f68:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003f6a:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <prvHeapInit+0xac>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003f72:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <prvHeapInit+0xac>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	1ad2      	subs	r2, r2, r3
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <prvHeapInit+0xac>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <prvHeapInit+0xb0>)
 8003f96:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a07      	ldr	r2, [pc, #28]	; (8003fbc <prvHeapInit+0xb4>)
 8003f9e:	6013      	str	r3, [r2, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	20000214 	.word	0x20000214
 8003fb0:	20002a14 	.word	0x20002a14
 8003fb4:	20002a1c 	.word	0x20002a1c
 8003fb8:	20002a24 	.word	0x20002a24
 8003fbc:	20002a20 	.word	0x20002a20

08003fc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003fc8:	4b27      	ldr	r3, [pc, #156]	; (8004068 <prvInsertBlockIntoFreeList+0xa8>)
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	e002      	b.n	8003fd4 <prvInsertBlockIntoFreeList+0x14>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d8f7      	bhi.n	8003fce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	4413      	add	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d108      	bne.n	8004002 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	441a      	add	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	441a      	add	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d118      	bne.n	8004048 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4b14      	ldr	r3, [pc, #80]	; (800406c <prvInsertBlockIntoFreeList+0xac>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d00d      	beq.n	800403e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	441a      	add	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	e008      	b.n	8004050 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800403e:	4b0b      	ldr	r3, [pc, #44]	; (800406c <prvInsertBlockIntoFreeList+0xac>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e003      	b.n	8004050 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	429a      	cmp	r2, r3
 8004056:	d002      	beq.n	800405e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr
 8004068:	20002a14 	.word	0x20002a14
 800406c:	20002a1c 	.word	0x20002a1c

08004070 <memset>:
 8004070:	4603      	mov	r3, r0
 8004072:	4402      	add	r2, r0
 8004074:	4293      	cmp	r3, r2
 8004076:	d100      	bne.n	800407a <memset+0xa>
 8004078:	4770      	bx	lr
 800407a:	f803 1b01 	strb.w	r1, [r3], #1
 800407e:	e7f9      	b.n	8004074 <memset+0x4>

08004080 <__libc_init_array>:
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	2600      	movs	r6, #0
 8004084:	4d0c      	ldr	r5, [pc, #48]	; (80040b8 <__libc_init_array+0x38>)
 8004086:	4c0d      	ldr	r4, [pc, #52]	; (80040bc <__libc_init_array+0x3c>)
 8004088:	1b64      	subs	r4, r4, r5
 800408a:	10a4      	asrs	r4, r4, #2
 800408c:	42a6      	cmp	r6, r4
 800408e:	d109      	bne.n	80040a4 <__libc_init_array+0x24>
 8004090:	f000 f828 	bl	80040e4 <_init>
 8004094:	2600      	movs	r6, #0
 8004096:	4d0a      	ldr	r5, [pc, #40]	; (80040c0 <__libc_init_array+0x40>)
 8004098:	4c0a      	ldr	r4, [pc, #40]	; (80040c4 <__libc_init_array+0x44>)
 800409a:	1b64      	subs	r4, r4, r5
 800409c:	10a4      	asrs	r4, r4, #2
 800409e:	42a6      	cmp	r6, r4
 80040a0:	d105      	bne.n	80040ae <__libc_init_array+0x2e>
 80040a2:	bd70      	pop	{r4, r5, r6, pc}
 80040a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a8:	4798      	blx	r3
 80040aa:	3601      	adds	r6, #1
 80040ac:	e7ee      	b.n	800408c <__libc_init_array+0xc>
 80040ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b2:	4798      	blx	r3
 80040b4:	3601      	adds	r6, #1
 80040b6:	e7f2      	b.n	800409e <__libc_init_array+0x1e>
 80040b8:	0800414c 	.word	0x0800414c
 80040bc:	0800414c 	.word	0x0800414c
 80040c0:	0800414c 	.word	0x0800414c
 80040c4:	08004150 	.word	0x08004150

080040c8 <memcpy>:
 80040c8:	440a      	add	r2, r1
 80040ca:	4291      	cmp	r1, r2
 80040cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80040d0:	d100      	bne.n	80040d4 <memcpy+0xc>
 80040d2:	4770      	bx	lr
 80040d4:	b510      	push	{r4, lr}
 80040d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040da:	4291      	cmp	r1, r2
 80040dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040e0:	d1f9      	bne.n	80040d6 <memcpy+0xe>
 80040e2:	bd10      	pop	{r4, pc}

080040e4 <_init>:
 80040e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e6:	bf00      	nop
 80040e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ea:	bc08      	pop	{r3}
 80040ec:	469e      	mov	lr, r3
 80040ee:	4770      	bx	lr

080040f0 <_fini>:
 80040f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f2:	bf00      	nop
 80040f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f6:	bc08      	pop	{r3}
 80040f8:	469e      	mov	lr, r3
 80040fa:	4770      	bx	lr
